URL,Title,Content
https://docs.gtk.org/gobject/concepts.html,"Type System Concepts<a class=""md-anchor"" title=""Permanent link"" href=""#type-system-concepts""></a>","API Version: 2.0
Library Version: 2.81.0
Generated by <a href=""https://gitlab.gnome.org/GNOME/gi-docgen"">gi-docgen</a> 2023.1
Most modern programming languages come with their own native object systems
and additional fundamental algorithmic language constructs. Just as GLib
serves as an implementation of such fundamental types and algorithms (linked
lists, hash tables and so forth), the GLib Object System provides the
required implementations of a flexible, extensible, and intentionally easy
to map (into other languages) object-oriented framework for C. The
substantial elements that are provided can be summarized&nbsp;as:
GObject, and its lower-level type system, GType, are used by <span class=""caps"">GTK</span> and most
<span class=""caps"">GNOME</span> libraries to&nbsp;provide:
A lot of programmers are used to working with compiled-only or dynamically
interpreted-only languages and do not understand the challenges associated
with cross-language interoperability. This introduction tries to provide an
insight into these challenges and briefly describes the solution chosen by&nbsp;GLib.
The following chapters go into greater detail into how GType and GObject
work and how you can use them as a C programmer. It is useful to keep in
mind that allowing access to C objects from other interpreted languages was
one of the major design goals: this can often explain the sometimes rather
convoluted APIs and features present in this&nbsp;library.
One could say that a programming language is merely a way to create data
types and manipulate them. Most languages provide a number of
language-native types and a few primitives to create more complex types
based on these primitive&nbsp;types.
In C, the language provides types such as char, long, pointer. During
compilation of C code, the compiler maps these language types to the
compiler’s target architecture machine types. If you are using a C
interpreter (assuming one exists), the interpreter (the program which
interprets the source code and executes it) maps the language types to the
machine types of the target machine at runtime, during the program execution
(or just before execution if it uses a Just In Time compiler&nbsp;engine).
Perl and Python are interpreted languages which do not really provide type
definitions similar to those used by C. Perl and Python programmers
manipulate variables and the type of the variables is decided only upon the
first assignment or upon the first use which forces a type on the variable.
The interpreter also often provides a lot of automatic conversions from one
type to the other. For example, in Perl, a variable which holds an integer
can be automatically converted to a string given the required&nbsp;context:
Of course, it is also often possible to explicitly specify conversions when
the default conversions provided by the language are not&nbsp;intuitive.
C APIs are defined by a set of functions and global variables which are
usually exported from a binary. C functions have an arbitrary number of
arguments and one return value. Each function is thus uniquely identified by
the function name and the set of C types which describe the function
arguments and return value. The global variables exported by the <span class=""caps"">API</span> are
similarly identified by their name and their&nbsp;type.
A C <span class=""caps"">API</span> is thus merely defined by a set of names to which a set of types are
associated. If you know the function calling convention and the mapping of
the C types to the machine types used by the platform you are on, you can
resolve the name of each function to find where the code associated to this
function is located in memory, and then construct a valid argument list for
the function. Finally, all you have to do is trigger a call to the target C
function with the argument&nbsp;list.
For the sake of discussion, here is a sample C function and the associated
32 bit x86 assembly code generated by <span class=""caps"">GCC</span> on a Linux&nbsp;computer:
The assembly code shown above is pretty straightforward: the first
instruction pushes the hexadecimal value 0xa (decimal value 10) as a 32-bit
integer on the stack and calls <code>function_foo</code>. As you can see, C function
calls are implemented by <span class=""caps"">GCC</span> as native function calls (this is probably the
fastest implementation&nbsp;possible).
Now, let’s say we want to call the C function <code>function_foo</code> from a Python
program. To do this, the Python interpreter needs&nbsp;to:
The process described above is pretty complex and there are a lot of ways to
make it entirely automatic and transparent to C and Python&nbsp;programmers:
The solution used by GLib is to use the GType library which holds at runtime
a description of all the objects manipulated by the programmer. This
so-called dynamic type library is then used by special generic glue code to
automatically convert function parameters and function calling conventions
between different runtime&nbsp;domains.
The greatest advantage of the solution implemented by GType is that the glue
code sitting at the runtime domain boundaries is written once: the figure
below states this more&nbsp;clearly.
<img alt="""" src=""./glue.png"">
Currently, there exist multiple generic glue code which makes it possible to
use C objects written with GType directly in a variety of languages, with a
minimum amount of work: there is no need to generate huge amounts of glue
code either automatically or by&nbsp;hand.
Although that goal was arguably laudable, its pursuit has had a major
influence on the whole GType/GObject library. C programmers are likely to be
puzzled at the complexity of the features exposed in the following chapters
if they forget that the GType/GObject library was not only designed to offer
<span class=""caps"">OO</span>-like features to C programmers but also transparent cross-language&nbsp;interoperability.
A type, as manipulated by the GLib type system, is much more generic than what is usually understood as an Object type. It is best explained by looking at the structure and the functions used to register new types in the type&nbsp;system.
<code>g_type_register_static()</code>, <code>g_type_register_dynamic()</code> and
<code>g_type_register_fundamental()</code> are the C functions, defined in <code>gtype.h</code>
and implemented in <code>gtype.c</code> which you should use to register a new GType in
the program’s type system. It is not likely you will ever need to use
<code>g_type_register_fundamental()</code> but in case you want to, the last chapter
explains how to create new fundamental&nbsp;types.
Fundamental types are top-level types which do not derive from any other
type while other non-fundamental types derive from other types. Upon
initialization, the type system not only initializes its internal data
structures but it also registers a number of core types: some of these are
fundamental types. Others are types derived from these fundamental&nbsp;types.
Fundamental and non-fundamental types are defined&nbsp;by:
Fundamental types are also defined by a set of <code>GTypeFundamentalFlags</code> which
are stored in a <code>GTypeFundamentalInfo</code>. Non-fundamental types are
furthermore defined by the type of their parent which is passed as the
<code>parent_type</code> parameter to <code>g_type_register_static()</code> and
<code>g_type_register_dynamic()</code>.
The major common point between all GLib types (fundamental and
non-fundamental, classed and non-classed, instantiatable and
non-instantiatable) is that they can all be manipulated through a single <span class=""caps"">API</span>
to copy/assign&nbsp;them.
The <code>GValue</code> structure is used as an abstract container for all of these
types. Its simplistic <span class=""caps"">API</span> (defined in <code>gobject/gvalue.h</code>) can be used to
invoke the <code>value_table</code> functions registered during type registration: for
example <code>g_value_copy()</code> copies the content of a <code>GValue</code> to another
<code>GValue</code>. This is similar to a C++ assignment which invokes the C++ copy
operator to modify the default bit-by-bit copy semantics of C++/C&nbsp;structures/classes.
The following code shows how you can copy around a 64 bit integer, as well
as a <code>GObject</code> instance&nbsp;pointer:
The important point about the above code is that the exact semantics of the
copy calls is undefined since they depend on the implementation of the copy
function. Certain copy functions might decide to allocate a new chunk of
memory and then to copy the data from the source to the destination. Others
might want to simply increment the reference count of the instance and copy
the reference to the new <code>GValue</code>.
The value table used to specify these assignment functions is documented in
<code>GTypeValueTable</code>.
Interestingly, it is also very unlikely you will ever need to specify a
<code>value_table</code> during type registration because these <code>value_tables</code> are
inherited from the parent types for non-fundamental&nbsp;types.
There are a number of conventions users are expected to follow when creating
new types which are to be exported in a header&nbsp;file:
The implementation of these macros is pretty straightforward: a number of
simple-to-use macros are provided in <code>gtype.h</code>. For the example we used above,
we would write the following trivial code to declare the&nbsp;macros:
Unless your code has special requirements, you can use the <code>G_DEFINE_TYPE</code>
macro to define a&nbsp;class:
Otherwise, the <code>viewer_file_get_type</code> function must be implemented&nbsp;manually:
A lot of types are not instantiatable by the type system and do not have a class. Most of these types are fundamental trivial types such as <code>gchar</code>, and are already registered by&nbsp;GLib.
In the rare case of needing to register such a type in the type system, fill a <code>GTypeInfo</code> structure with zeros since these types are also most of the time&nbsp;fundamental:
Having non-instantiatable types might seem a bit useless: what good is a
type if you cannot instantiate an instance of that type? Most of these types
are used in conjunction with <code>GValue</code>s: a <code>GValue</code> is initialized with an
integer or a string and it is passed around by using the registered type’s
<code>value_table</code>. <code>GValue</code>s (and by extension these trivial fundamental types)
are most useful when used in conjunction with object properties and&nbsp;signals.
Types which are registered with a class and are declared instantiatable are
what most closely resembles an object. Although <code>GObject</code>s are the most well
known type of instantiatable classed types, other kinds of similar objects
used as the base of an inheritance hierarchy have been externally developed
and they are all built on the fundamental features described&nbsp;below.
For example, the code below shows how you could register such a fundamental
object type in the type system (using none of the GObject convenience <span class=""caps"">API</span>):
Upon the first call to <code>viewer_file_get_type</code>, the type named <code>ViewerFile</code> will be registered in the type system as inheriting from the type <code>G_TYPE_OBJECT</code>.
Every object must define two structures: its class structure and its instance structure. All class structures must contain as first member a <code>GTypeClass</code> structure. All instance structures must contain as first member a <code>GTypeInstance</code> structure. The declaration of these C types, coming from <code>gtype.h</code> is shown&nbsp;below:
These constraints allow the type system to make sure that every object instance (identified by a pointer to the object’s instance structure) contains in its first bytes a pointer to the object’s class&nbsp;structure.
This relationship is best explained by an example: let’s take object B which inherits from object&nbsp;A:
The C standard mandates that the first field of a C structure is stored starting in the first byte of the buffer used to hold the structure’s fields in memory. This means that the first field of an instance of an object B is A’s first field which in turn is <code>GTypeInstance</code><span class=""quo"">‘</span>s first field which in turn is <code>g_class</code>, a pointer to B’s class&nbsp;structure.
Thanks to these simple conditions, it is possible to detect the type of every object instance by&nbsp;doing:
or, more&nbsp;compactly:
Instantiation of these types can be done with <code>g_type_create_instance()</code>, which
will look up the type information structure associated with the type
requested. Then, the instance size and instantiation policy (if the
<code>n_preallocs</code> field is set to a non-zero value, the type system allocates the
object’s instance structures in chunks rather than mallocing for every
instance) declared by the user are used to get a buffer to hold the object’s
instance&nbsp;structure.
If this is the first instance of the object ever created, the type system
must create a class structure. It allocates a buffer to hold the object’s
class structure and initializes it. The first part of the class structure
(ie: the embedded parent class structure) is initialized by copying the
contents from the class structure of the parent class. The rest of class
structure is initialized to zero. If there is no parent, the entire class
structure is initialized to zero. The type system then invokes the
<code>base_init</code> functions <code>(GBaseInitFunc)</code> from topmost fundamental
object to bottom-most most derived object. The object’s <code>class_init</code>
<code>(GClassInitFunc)</code> function is invoked afterwards to complete initialization
of the class structure. Finally, the object’s interfaces are initialized (we
will discuss interface initialization in more detail&nbsp;later).
Once the type system has a pointer to an initialized class structure, it
sets the object’s instance class pointer to the object’s class structure and
invokes the object’s <code>instance_init</code> <code>(GInstanceInitFunc)</code> functions, from
top-most fundamental type to bottom-most most-derived&nbsp;type.
Object instance destruction through <code>g_type_free_instance()</code> is very simple:
the instance structure is returned to the instance pool if there is one and
if this was the last living instance of the object, the class is&nbsp;destroyed.
Class destruction (the concept of destruction is sometimes partly referred
to as finalization in GType) is the symmetric process of the initialization:
interfaces are destroyed first. Then, the most derived <code>class_finalize</code>
<code>(GClassFinalizeFunc)</code> function is invoked. Finally, the <code>base_finalize</code>
<code>(GBaseFinalizeFunc)</code> functions are invoked from bottom-most most-derived type
to top-most fundamental type and the class structure is&nbsp;freed.
The base initialization/finalization process is very similar to the C++
constructor/destructor paradigm. The practical details are different though
and it is important not to get confused by superficial similarities. GTypes
have no instance destruction mechanism. It is the user’s responsibility to
implement correct destruction semantics on top of the existing GType code.
(This is what <code>GObject</code> does) Furthermore, C++
code equivalent to the <code>base_init</code> and <code>class_init</code> callbacks of GType is
usually not needed because C++ cannot really create object types at&nbsp;runtime.
The instantiation/finalization process can be summarized as&nbsp;follows:
GType’s interfaces are very similar to Java’s interfaces. They allow to
describe a common <span class=""caps"">API</span> that several classes will adhere to. Imagine the play,
pause and stop buttons on hi-fi equipment—those can be seen as a playback
interface. Once you know what they do, you can control your <span class=""caps"">CD</span> player, <span class=""caps"">MP3</span>
player or anything that uses these&nbsp;symbols.
To declare an interface you have to register a non-instantiatable classed
type which derives from <code>GTypeInterface</code>. The following piece of code declares
such an&nbsp;interface:
The interface function, <code>viewer_editable_save</code> is implemented in a pretty
simple&nbsp;way:
<code>viewer_editable_get_type</code> registers a type named <code>ViewerEditable</code> which
inherits from <code>G_TYPE_INTERFACE</code>. All interfaces must be children of
<code>G_TYPE_INTERFACE</code> in the inheritance&nbsp;tree.
An interface is defined by only one structure which must contain as first
member a <code>GTypeInterface</code> structure. The interface structure is expected to
contain the function pointers of the interface methods. It is good style to
define helper functions for each of the interface methods which simply call
the interface’s method directly: <code>viewer_editable_save</code> is one of&nbsp;these.
If you have no special requirements you can use the <code>G_IMPLEMENT_INTERFACE</code>
macro to implement an&nbsp;interface:
If your code does have special requirements, you must write a custom
<code>get_type</code> function to register your GType which inherits from some GObject
and which implements the interface <code>ViewerEditable</code>. For example, this code
registers a new <code>ViewerFile</code> class which implements <code>ViewerEditable</code>:
<code>g_type_add_interface_static()</code> records in the type system that the given
<code>ViewerFile</code> type implements also <code>ViewerEditable</code>
(<code>viewer_editable_get_type()</code> returns the type of <code>ViewerEditable</code>). The
<code>GInterfaceInfo</code> structure holds information about the implementation of the&nbsp;interface:
When an instantiatable classed type which implements an interface (either
directly or by inheriting an implementation from a superclass) is created
for the first time, its class structure is initialized following the process
described in the section called “Instantiatable classed types: objects”.
After that, the interface implementations associated with the type are&nbsp;initialized.
First a memory buffer is allocated to hold the interface structure. The
parent’s interface structure is then copied over to the new interface
structure (the parent interface is already initialized at that point). If
there is no parent interface, the interface structure is initialized with
zeros. The <code>g_type</code> and the <code>g_instance_type</code> fields are then initialized:
<code>g_type</code> is set to the type of the most-derived interface and <code>g_instance_type</code>
is set to the type of the most derived type which implements this&nbsp;interface.
The interface’s <code>base_init</code> function is called, and then the interface’s
<code>default_init</code> is invoked. Finally if the type has registered an
implementation of the interface, the implementation’s <code>interface_init</code>
function is invoked. If there are multiple implementations of an interface
the <code>base_init</code> and <code>interface_init</code> functions will be invoked once for each
implementation&nbsp;initialized.
It is thus recommended to use a <code>default_init</code> function to initialize an
interface. This function is called only once for the interface no matter how
many implementations there are. The <code>default_init</code> function is declared by
<code>G_DEFINE_INTERFACE</code> which can be used to define the&nbsp;interface:
Or you can do that yourself in a GType function for your&nbsp;interface:
In summary, interface initialization uses the following&nbsp;functions:
When the last instance of an instantiatable type which registered an
interface implementation is destroyed, the interface’s implementations
associated to the type are&nbsp;destroyed.
To destroy an interface implementation, GType first calls the
implementation’s <code>interface_finalize</code> function and then the interface’s
most-derived <code>base_finalize</code> function.
Again, it is important to understand, as in the section called “Interface
Initialization”, that both <code>interface_finalize</code> and <code>base_finalize</code> are
invoked exactly once for the destruction of each implementation of an
interface. Thus, if you were to use one of these functions, you would need
to use a static integer variable which would hold the number of instances of
implementations of an interface such that the interface’s class is destroyed
only once (when the integer variable reaches&nbsp;zero).
The above process can be summarized as&nbsp;follows: 
The previous chapter discussed the details of GLib’s Dynamic Type System.
The GObject library also contains an implementation for a base fundamental
type named <code>GObject</code>.
<code>GObject</code> is a fundamental classed instantiatable type. It&nbsp;implements:
All the <span class=""caps"">GNOME</span> libraries which use the GLib type system (like <span class=""caps"">GTK</span> and
GStreamer) inherit from <code>GObject</code> which is why it is important to understand
the details of how it&nbsp;works.
The <code>g_object_new()</code> family of functions can be used to instantiate any
GType which inherits from the GObject base type. All these functions make
sure the class and instance structures have been correctly initialized by
GLib’s type system and then invoke at one point or another the constructor
class method which is used&nbsp;to:
GObject explicitly guarantees that all class and instance members (except
the fields pointing to the parents) to be set to&nbsp;zero.
Once all construction operations have been completed and constructor
properties set, the constructed class method is&nbsp;called.
Objects which inherit from <code>GObject</code> are allowed to override this
constructed class method. The example below shows how <code>ViewerFile</code> overrides
the parent’s construction&nbsp;process:
If the user instantiates an object <code>ViewerFile</code> with:
If this is the first instantiation of such an object, the
<code>viewer_file_class_init</code> function will be invoked after any
<code>viewer_file_base_class_init</code> function. This will make sure the class
structure of this new object is correctly initialized. Here,
<code>viewer_file_class_init</code> is expected to override the object’s class methods
and setup the class’ own methods. In the example above, the constructed
method is the only overridden method: it is set to
<code>viewer_file_constructed</code>.
Once <code>g_object_new()</code> has obtained a reference to an initialized class
structure, it invokes its constructor method to create an instance of the
new object, if the constructor has been overridden in
<code>viewer_file_class_init</code>. Overridden constructors must chain up to their
parent’s constructor. In order to find the parent class and chain up to the
parent class constructor, we can use the <code>viewer_file_parent_class</code> pointer
that has been set up for us by the <code>G_DEFINE_TYPE</code> macro.
Finally, at one point or another, <code>g_object_constructor</code> is invoked by the
last constructor in the chain. This function allocates the object’s instance
buffer through <code>g_type_create_instance()</code> which means that the
<code>instance_init</code> function is invoked at this point if one was registered.
After <code>instance_init</code> returns, the object is fully initialized and should be
ready to have its methods called by the user. When
<code>g_type_create_instance()</code> returns, <code>g_object_constructor</code> sets the
construction properties (i.e. the properties which were given to
<code>g_object_new()</code>) and returns to the user’s&nbsp;constructor.
The process described above might seem a bit complicated, but it can be
summarized easily by the table below which lists the functions invoked by
<code>g_object_new()</code> and their order of&nbsp;invocation:
Readers should feel concerned about one little twist in the order in which
functions are invoked: while, technically, the class’ constructor method is
called before the GType’s <code>instance_init</code> function (since
<code>g_type_create_instance()</code> which calls <code>instance_init</code> is called by
<code>g_object_constructor</code> which is the top-level class constructor method and
to which users are expected to chain to), the user’s code which runs in a
user-provided constructor will always run after GType’s <code>instance_init</code>
function since the user-provided constructor must (you’ve been warned) chain
up before doing anything&nbsp;useful.
The memory-management <span class=""caps"">API</span> for GObjects is a bit complicated but the idea
behind it is pretty simple: the goal is to provide a flexible model based on
reference counting which can be integrated in applications which use or
require different memory management models (such as garbage collection). The
methods which are used to manipulate this reference count are described&nbsp;below.
The functions <code>g_object_ref()</code> and <code>g_object_unref()</code> increase and decrease
the reference count, respectively. These functions are thread-safe.
<code>g_clear_object()</code> is a convenience wrapper around <code>g_object_unref()</code> which
also clears the pointer passed to&nbsp;it.
The reference count is initialized to one by <code>g_object_new()</code> which means
that the caller is currently the sole owner of the newly-created reference.
(If the object is derived from <code>GInitiallyUnowned</code>, this reference is
“floating”, and must be “sunk”, i.e. transformed into a real reference.)
When the reference count reaches zero, that is, when <code>g_object_unref()</code> is
called by the last owner of a reference to the object, the <code>dispose()</code> and
the <code>finalize()</code> class methods are&nbsp;invoked.
Finally, after <code>finalize()</code> is invoked, <code>g_type_free_instance()</code> is called
to free the object instance. Depending on the memory allocation policy
decided when the type was registered (through one of the <code>g_type_register_*</code>
functions), the object’s instance memory will be freed or returned to the
object pool for this type. Once the object has been freed, if it was the
last instance of the type, the type’s class will be destroyed as described
in the section called “Instantiatable classed types: objects” and the
section called “Non-instantiatable classed types:&nbsp;interfaces”.
The table below summarizes the destruction process of a <code>GObject</code>:
Weak references are used to monitor object finalization:
<code>g_object_weak_ref()</code> adds a monitoring callback which does not hold a
reference to the object but which is invoked when the object runs its
dispose method. Weak references on the object are automatically dropped when
the instance is disposed, so there is no need to invoke <code>g_object_weak_unref()</code>
from the <code>GWeakNotify</code> callback. Remember that the object instance is not
passed to the <code>GWeakNotify</code> callback because the object has already been
disposed. Instead, the callback receives a pointer to where the object
previously&nbsp;was.
Weak references are also used to implement <code>g_object_add_weak_pointer()</code> and
<code>g_object_remove_weak_pointer()</code>. These functions add a weak reference to
the object they are applied to which makes sure to nullify the pointer given
by the user when object is&nbsp;finalized.
Similarly, <code>GWeakRef</code> can be used to implement weak references if thread
safety is&nbsp;required.
GObject’s memory management model was designed to be easily integrated in
existing code using garbage collection. This is why the destruction process
is split in two phases: the first phase, executed in the <code>dispose()</code> handler is
supposed to release all references to other member objects. The second
phase, executed by the <code>finalize()</code> handler is supposed to complete the object’s
destruction process. Object methods should be able to run without program
error in-between the two&nbsp;phases.
This two-step destruction process is very useful to break reference counting
cycles. While the detection of the cycles is up to the external code, once
the cycles have been detected, the external code can invoke
<code>g_object_run_dispose()</code> which will indeed break any existing cycles since
it will run the dispose handler associated to the object and thus release
all references to other&nbsp;objects.
This explains one of the rules about the <code>dispose()</code> handler stated earlier:
the <code>dispose()</code> handler can be invoked multiple times. Let’s say we have a
reference count cycle: object A references B which itself references object
A. Let’s say we have detected the cycle and we want to destroy the two
objects. One way to do this would be to invoke <code>g_object_run_dispose()</code> on one
of the&nbsp;objects.
If object A releases all its references to all objects, this means it
releases its reference to object B. If object B was not owned by anyone
else, this is its last reference count which means this last unref runs B’s
dispose handler which, in turn, releases B’s reference on object A. If this
is A’s last reference count, this last unref runs A’s dispose handler which
is running for the second time before A’s finalize handler is&nbsp;invoked!
The above example, which might seem a bit contrived, can really happen if
GObjects are being handled by language bindings—hence the rules for object
destruction should be closely&nbsp;followed.
One of GObject’s nice features is its generic get/set mechanism for object
properties. When an object is instantiated, the object’s <code>class_init</code>
handler should be used to register the object’s properties with
<code>g_object_class_install_properties()</code>.
The best way to understand how object properties work is by looking at a
real example of how it is&nbsp;used:
The client code above looks simple but a lot of things happen under the&nbsp;hood:
<code>g_object_set_property()</code> first ensures a property with this name was
registered in file’s <code>class_init</code> handler. If so it walks the class
hierarchy, from bottom-most most-derived type, to top-most fundamental type
to find the class which registered that property. It then tries to convert
the user-provided GValue into a GValue whose type is that of the associated&nbsp;property.
If the user provides a signed char GValue, as is shown here, and if the
object’s property was registered as an <code>unsigned int</code>, <code>g_value_transform()</code>
will try to transform the input signed char into an unsigned int. Of course,
the success of the transformation depends on the availability of the
required transform function. In practice, there will almost always be a
transformation which matches and conversion will be carried out if&nbsp;needed.
After transformation, the GValue is validated by <code>g_param_value_validate()</code>
which makes sure the user’s data stored in the GValue matches the
characteristics specified by the property’s GParamSpec. Here, the GParamSpec
we provided in <code>class_init</code> has a validation function which makes sure that
the GValue contains a value which respects the minimum and maximum bounds of
the GParamSpec. In the example above, the client’s GValue does not respect
these constraints (it is set to 11, while the maximum is 10). As such, the
<code>g_object_set_property()</code> function will return with an&nbsp;error.
If the user’s GValue had been set to a valid value,
<code>g_object_set_property()</code> would have proceeded with calling the object’s
<code>set_property</code> class method. Here, since our implementation of ViewerFile
did override this method, execution would jump to <code>viewer_file_set_property</code>
after having retrieved from the GParamSpec the <code>param_id</code> which had been
stored by <code>g_object_class_install_property()</code>.
Once the property has been set by the object’s <code>set_property</code> class method,
execution returns to <code>g_object_set_property()</code> which makes sure that the
“notify” signal is emitted on the object’s instance with the changed
property as parameter unless notifications were frozen by
<code>g_object_freeze_notify()</code>.
<code>g_object_thaw_notify()</code> can be used to re-enable notification of property
modifications through the “notify” signal. It is important to remember that
even if properties are changed while property change notification is frozen,
the “notify” signal will be emitted once for each of these changed
properties as soon as the property change notification is thawed: no
property change is lost for the “notify” signal, although multiple
notifications for a single property are compressed. Signals can only be
delayed by the notification freezing&nbsp;mechanism.
It sounds like a tedious task to set up GValues every time when one wants to
modify a property. In practice one will rarely do this. The functions
<code>g_object_set_property()</code> and <code>g_object_get_property()</code> are meant to be used
by language bindings. For application there is an easier way and that is
described&nbsp;next.
It is interesting to note that the <code>g_object_set()</code> and
<code>g_object_set_valist()</code> (variadic version) functions can be used to set
multiple properties at once. The client code shown above can then be
re-written&nbsp;as:
This saves us from managing the GValues that we were needing to handle when
using <code>g_object_set_property()</code>. The code above will trigger one notify
signal emission for each property&nbsp;modified.
Equivalent <code>_get</code> versions are also available: <code>g_object_get()</code> and
<code>g_object_get_valist()</code> (variadic version) can be used to get numerous
properties at&nbsp;once.
These high level functions have one drawback — they don’t provide a return
value. One should pay attention to the argument types and ranges when using
them. A known source of errors is to pass a different type from what the
property expects; for instance, passing an integer when the property expects
a floating point value and thus shifting all subsequent parameters by some
number of bytes. Also forgetting the terminating <span class=""caps"">NULL</span> will lead to undefined&nbsp;behaviour.
This explains how <code>g_object_new()</code>, <code>g_object_newv()</code> and
<code>g_object_new_valist()</code> work: they parse the user-provided variable number
of parameters and invoke <code>g_object_set()</code> on the parameters only after the
object has been successfully constructed. The “notify” signal will be
emitted for each property&nbsp;set.
Closures are central to the concept of asynchronous signal delivery which is
widely used throughout <span class=""caps"">GTK</span> and <span class=""caps"">GNOME</span> applications. A closure is an
abstraction, a generic representation of a callback. It is a small structure
which contains three&nbsp;objects:
The <code>GClosure</code> structure represents the common functionality of all closure
implementations: there exists a different closure implementation for each
separate runtime which wants to use the GObject type system. The GObject
library provides a simple GCClosure type which is a specific implementation
of closures to be used with C/C++&nbsp;callbacks.
A <code>GClosure</code> provides simple&nbsp;services:
If you are using C or C++ to connect a callback to a given event, you will
either use simple <code>GCClosures</code> which have a pretty minimal <span class=""caps"">API</span> or the even
simpler <code>g_signal_connect()</code> functions (which will be presented a bit&nbsp;later).
<code>g_cclosure_new()</code> will create a new closure which can invoke the
user-provided <code>callback_func</code> with the user-provided <code>user_data</code> as its last
parameter. When the closure is finalized (second stage of the destruction
process), it will invoke the <code>destroy_data</code> function if the user has
supplied&nbsp;one.
<code>g_cclosure_new_swap()</code> will create a new closure which can invoke the
user-provided <code>callback_func</code> with the user-provided <code>user_data</code> as its
first parameter (instead of being the last parameter as with
<code>g_cclosure_new()</code>). When the closure is finalized (second stage of the
destruction process), it will invoke the <code>destroy_data</code> function if the user
has supplied&nbsp;one.
As was explained above, closures hide the details of callback invocation. In
C, callback invocation is just like function invocation: it is a matter of
creating the correct stack frame for the called function and executing a
call assembly&nbsp;instruction.
C closure marshallers transform the array of GValues which represent the
parameters to the target function into a C-style function parameter list,
invoke the user-supplied C function with this new parameter list, get the
return value of the function, transform it into a GValue and return this
GValue to the marshaller&nbsp;caller.
A generic C closure marshaller is available as
<code>g_cclosure_marshal_generic()</code> which implements marshalling for all function
types using libffi. Custom marshallers for different types are not needed
apart from performance critical code where the libffi-based marshaller may
be too&nbsp;slow.
An example of a custom marshaller is given below, illustrating how GValues
can be converted to a C function call. The marshaller is for a C function
which takes an integer as its first parameter and returns <code>void</code>.
There exist other kinds of marshallers, for example there is a generic
Python marshaller which is used by all Python closures (a Python closure is
used to invoke a callback written in Python). This Python marshaller
transforms the input GValue list representing the function parameters into a
Python tuple which is the equivalent structure in&nbsp;Python.
GObject’s signals have nothing to do with standard <span class=""caps"">UNIX</span> signals: they
connect arbitrary application-specific events with any number of listeners.
For example, in <span class=""caps"">GTK</span>, every user event (keystroke or mouse move) is received
from the windowing system and generates a <span class=""caps"">GTK</span> event in the form of a signal
emission on the widget object&nbsp;instance.
Each signal is registered in the type system together with the type on which
it can be emitted: users of the type are said to connect to the signal on a
given type instance when they register a closure to be invoked upon the
signal emission. Users can also emit the signal by themselves or stop the
emission of the signal from within one of the closures connected to the&nbsp;signal.
When a signal is emitted on a given type instance, all the closures
connected to this signal on this type instance will be invoked. All the
closures connected to such a signal represent callbacks whose signature
looks&nbsp;like:
To register a new signal on an existing type, we can use any of
<code>g_signal_newv()</code>, <code>g_signal_new_valist()</code> or <code>g_signal_new()</code> functions:
The number of parameters to these functions is a bit intimidating but they are relatively&nbsp;simple:
As you can see from the above definition, a signal is basically a
description of the closures which can be connected to this signal and a
description of the order in which the closures connected to this signal will
be&nbsp;invoked.
If you want to connect to a signal with a closure, you have three&nbsp;possibilities:
It is also possible to connect a different kind of callback on a given
signal: emission hooks are invoked whenever a given signal is emitted
whatever the instance on which it is emitted. Emission hooks are connected
with <code>g_signal_add_emission_hook()</code> and removed with
<code>g_signal_remove_emission_hook()</code>.
Signal emission is done through the use of the <code>g_signal_emit()</code> family of&nbsp;functions.
Signal emission can be decomposed in 6&nbsp;steps:
If, at any point during the emission (except in the <code>RUN_CLEANUP</code> or
<code>EMISSION_HOOK</code> states), one of the closures stops the signal emission with
<code>g_signal_stop_emission()</code>, the emission jumps to the <code>RUN_CLEANUP</code> state.
If, at any point during emission, one of the closures or emission hook emits
the same signal on the same instance, emission is restarted from the
<code>RUN_FIRST</code> state.
The accumulator function is invoked in all states, after invocation of each
closure (except in <code>RUN_EMISSION_HOOK</code> and <code>RUN_CLEANUP</code>). It accumulates
the closure return value into the signal return value and returns <code>TRUE</code> or
<code>FALSE</code>.  If, at any point, it does not return <code>TRUE</code>, emission jumps to
<code>RUN_CLEANUP</code> state.
If no accumulator function was provided, the value returned by the last
handler run will be returned by <code>g_signal_emit()</code>.
All the functions related to signal emission or signal connection have a
parameter named the detail. Sometimes, this parameter is hidden by the <span class=""caps"">API</span>
but it is always there, in one form or&nbsp;another.
Of the three main connection functions, only one has an explicit detail
parameter as a GQuark: <code>g_signal_connect_closure_by_id()</code>.
The two other functions, <code>g_signal_connect_closure()</code> and
<code>g_signal_connect_data()</code> hide the detail parameter in the signal name
identification. Their <code>detailed_signal</code> parameter is a string which
identifies the name of the signal to connect to. The format of this string
should match <code>signal_name::detail_name</code>. For example, connecting to the
signal named <code>notify::cursor_position</code> will actually connect to the signal
named <code>notify</code> with the <code>cursor_position</code> detail. Internally, the detail
string is transformed to a GQuark if it is&nbsp;present.
Of the four main signal emission functions, one hides it in its signal name
parameter: <code>g_signal_emit_by_name()</code>. The other three have an explicit
detail parameter as a GQuark again: <code>g_signal_emit()</code>, <code>g_signal_emitv()</code>
and <code>g_signal_emit_valist()</code>.
If a detail is provided by the user to the emission function, it is used
during emission to match against the closures which also provide a detail.
If a closure’s detail does not match the detail provided by the user, it
will not be invoked (even though it is connected to a signal which is being&nbsp;emitted).
This completely optional filtering mechanism is mainly used as an
optimization for signals which are often emitted for many different reasons:
the clients can filter out which events they are interested in before the
closure’s marshalling code runs. For example, this is used extensively by
the notify signal of GObject: whenever a property is modified on a GObject,
instead of just emitting the notify signal, GObject associates as a detail
to this signal emission the name of the property modified. This allows
clients who wish to be notified of changes to only one property to filter
most events before receiving&nbsp;them.
As a simple rule, users can and should set the detail parameter to zero:
this will disable completely this optional filtering for that&nbsp;signal.
Content
<span></span><code><span class=""k"">my</span> <span class=""nv"">$tmp</span> <span class=""o"">=</span> <span class=""mi"">10</span><span class=""p"">;</span>
<span class=""k"">print</span> <span class=""s"">""this is an integer converted to a string:""</span> <span class=""o"">.</span> <span class=""nv"">$tmp</span> <span class=""o"">.</span> <span class=""s"">""\n""</span><span class=""p"">;</span>
</code>
<span></span><code><span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">function_foo</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">int</span><span class=""w""> </span><span class=""n"">foo</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""kt"">int</span><span class=""w""></span>
<span class=""nf"">main</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">int</span><span class=""w"">   </span><span class=""n"">argc</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""kt"">char</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">argv</span><span class=""p"">[])</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">function_foo</span><span class=""w""> </span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">    </span><span class=""k"">return</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>
</code>
<span></span><code><span class=""nf"">push</span><span class=""w"">   </span><span class=""no"">$0xa</span><span class=""w""></span>
<span class=""nf"">call</span><span class=""w"">   </span><span class=""mh"">0x80482f4</span> <span class=""p"">&lt;</span><span class=""no"">function_foo</span><span class=""p"">&gt;</span><span class=""w""></span>
</code>
<span></span><code><span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">struct</span><span class=""w""> </span><span class=""nc"">_GTypeInfo</span><span class=""w"">               </span><span class=""n"">GTypeInfo</span><span class=""p"">;</span><span class=""w""></span>
<span class=""k"">struct</span><span class=""w""> </span><span class=""nc"">_GTypeInfo</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""cm"">/* interface types, classed types, instantiated types */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">guint16</span><span class=""w"">                </span><span class=""n"">class_size</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">GBaseInitFunc</span><span class=""w"">          </span><span class=""n"">base_init</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GBaseFinalizeFunc</span><span class=""w"">      </span><span class=""n"">base_finalize</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* classed types, instantiated types */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GClassInitFunc</span><span class=""w"">         </span><span class=""n"">class_init</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GClassFinalizeFunc</span><span class=""w"">     </span><span class=""n"">class_finalize</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">gconstpointer</span><span class=""w"">          </span><span class=""n"">class_data</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* instantiated types */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">guint16</span><span class=""w"">                </span><span class=""n"">instance_size</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">guint16</span><span class=""w"">                </span><span class=""n"">n_preallocs</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GInstanceInitFunc</span><span class=""w"">      </span><span class=""n"">instance_init</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* value handling */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeValueTable</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">value_table</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">};</span><span class=""w""></span>

<span class=""n"">GType</span><span class=""w""></span>
<span class=""nf"">g_type_register_static</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GType</span><span class=""w"">            </span><span class=""n"">parent_type</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                        </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">gchar</span><span class=""w"">     </span><span class=""o"">*</span><span class=""n"">type_name</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                        </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeInfo</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">info</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                        </span><span class=""n"">GTypeFlags</span><span class=""w"">       </span><span class=""n"">flags</span><span class=""p"">);</span><span class=""w""></span>

<span class=""n"">GType</span><span class=""w""></span>
<span class=""nf"">g_type_register_fundamental</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GType</span><span class=""w"">                       </span><span class=""n"">type_id</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                             </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">gchar</span><span class=""w"">                </span><span class=""o"">*</span><span class=""n"">type_name</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                             </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeInfo</span><span class=""w"">            </span><span class=""o"">*</span><span class=""n"">info</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                             </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeFundamentalInfo</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">finfo</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                             </span><span class=""n"">GTypeFlags</span><span class=""w"">                  </span><span class=""n"">flags</span><span class=""p"">);</span><span class=""w""></span>
</code>
<span></span><code><span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""> </span><span class=""nf"">test_int</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GValue</span><span class=""w""> </span><span class=""n"">a_value</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">G_VALUE_INIT</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GValue</span><span class=""w""> </span><span class=""n"">b_value</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">G_VALUE_INIT</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">guint64</span><span class=""w""> </span><span class=""n"">a</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">b</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">a</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mh"">0xdeadbeef</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_value_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">a_value</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">G_TYPE_UINT64</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_value_set_uint64</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">a_value</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">a</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_value_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">b_value</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">G_TYPE_UINT64</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_value_copy</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">a_value</span><span class=""p"">,</span><span class=""w""> </span><span class=""o"">&amp;</span><span class=""n"">b_value</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">b</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_value_get_uint64</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">b_value</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""k"">if</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">a</span><span class=""w""> </span><span class=""o"">==</span><span class=""w""> </span><span class=""n"">b</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">g_print</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""Yay !! 10 lines of code to copy around a uint64.</span><span class=""se"">\n</span><span class=""s"">""</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">}</span><span class=""w""> </span><span class=""k"">else</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">g_print</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""Are you sure this is not a Z80 ?</span><span class=""se"">\n</span><span class=""s"">""</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">}</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""> </span><span class=""nf"">test_object</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GObject</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">obj</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GValue</span><span class=""w""> </span><span class=""n"">obj_vala</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">G_VALUE_INIT</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GValue</span><span class=""w""> </span><span class=""n"">obj_valb</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">G_VALUE_INIT</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">obj</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_object_new</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">VIEWER_TYPE_FILE</span><span class=""p"">,</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_value_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">obj_vala</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">VIEWER_TYPE_FILE</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_value_set_object</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">obj_vala</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">obj</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_value_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">obj_valb</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">G_TYPE_OBJECT</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* g_value_copy's semantics for G_TYPE_OBJECT types is to copy the reference.</span>
<span class=""cm"">   * This function thus calls g_object_ref.</span>
<span class=""cm"">   * It is interesting to note that the assignment works here because</span>
<span class=""cm"">   * VIEWER_TYPE_FILE is a G_TYPE_OBJECT.</span>
<span class=""cm"">   */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_value_copy</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">obj_vala</span><span class=""p"">,</span><span class=""w""> </span><span class=""o"">&amp;</span><span class=""n"">obj_valb</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_object_unref</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_OBJECT</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">obj</span><span class=""p"">));</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_object_unref</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_OBJECT</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">obj</span><span class=""p"">));</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>
</code>
<span></span><code><span class=""cp"">#define VIEWER_TYPE_FILE viewer_file_get_type()</span>
<span class=""n"">G_DECLARE_FINAL_TYPE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">viewer_file</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">VIEWER</span><span class=""p"">,</span><span class=""w""> </span><span class=""kt"">FILE</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">GObject</span><span class=""p"">)</span><span class=""w""></span>
</code>
<span></span><code><span class=""n"">G_DEFINE_TYPE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">viewer_file</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">G_TYPE_OBJECT</span><span class=""p"">)</span><span class=""w""></span>
</code>
<span></span><code><span class=""n"">GType</span><span class=""w""> </span><span class=""nf"">viewer_file_get_type</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">static</span><span class=""w""> </span><span class=""n"">GType</span><span class=""w""> </span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">if</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">==</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeInfo</span><span class=""w""> </span><span class=""n"">info</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">      </span><span class=""cm"">/* You fill this structure. */</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">};</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_type_register_static</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_TYPE_OBJECT</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                   </span><span class=""s"">""ViewerFile""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                   </span><span class=""o"">&amp;</span><span class=""n"">info</span><span class=""p"">,</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">}</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">return</span><span class=""w""> </span><span class=""n"">type</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>
</code>
<span></span><code><span class=""n"">GTypeInfo</span><span class=""w""> </span><span class=""n"">info</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">class_size</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">,</span><span class=""w""></span>

<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">base_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">base_finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>

<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">class_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">class_finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">class_data</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>

<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">instance_size</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">n_preallocs</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">instance_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>

<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">value_table</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""p"">};</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeValueTable</span><span class=""w""> </span><span class=""n"">value_table</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">value_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">value_init_long0</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">value_free</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">value_copy</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">value_copy_long0</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">value_peek_pointer</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>

<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">collect_format</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""s"">""i""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">collect_value</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">value_collect_int</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">lcopy_format</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""s"">""p""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">lcopy_value</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">value_lcopy_char</span><span class=""p"">,</span><span class=""w""></span>
<span class=""p"">};</span><span class=""w""></span>

<span class=""n"">info</span><span class=""p"">.</span><span class=""n"">value_table</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""o"">&amp;</span><span class=""n"">value_table</span><span class=""p"">;</span><span class=""w""></span>

<span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_type_register_fundamental</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_TYPE_CHAR</span><span class=""p"">,</span><span class=""w""> </span><span class=""s"">""gchar""</span><span class=""p"">,</span><span class=""w""> </span><span class=""o"">&amp;</span><span class=""n"">info</span><span class=""p"">,</span><span class=""w""> </span><span class=""o"">&amp;</span><span class=""n"">finfo</span><span class=""p"">,</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">);</span><span class=""w""></span>
</code>
<span></span><code><span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">struct</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GObject</span><span class=""w""> </span><span class=""n"">parent_instance</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* instance members */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">char</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">filename</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""> </span><span class=""n"">ViewerFile</span><span class=""p"">;</span><span class=""w""></span>

<span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">struct</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GObjectClass</span><span class=""w""> </span><span class=""n"">parent_class</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* class members */</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* the first is public, pure and virtual */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">open</span><span class=""p"">)</span><span class=""w"">  </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""w"">  </span><span class=""o"">*</span><span class=""n"">self</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                 </span><span class=""n"">GError</span><span class=""w"">     </span><span class=""o"">**</span><span class=""n"">error</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* the second is public and virtual */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">close</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""w"">  </span><span class=""o"">*</span><span class=""n"">self</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                 </span><span class=""n"">GError</span><span class=""w"">     </span><span class=""o"">**</span><span class=""n"">error</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""> </span><span class=""n"">ViewerFileClass</span><span class=""p"">;</span><span class=""w""></span>

<span class=""cp"">#define VIEWER_TYPE_FILE (viewer_file_get_type ())</span>

<span class=""n"">GType</span><span class=""w""></span>
<span class=""nf"">viewer_file_get_type</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">static</span><span class=""w""> </span><span class=""n"">GType</span><span class=""w""> </span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">if</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">==</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeInfo</span><span class=""w""> </span><span class=""n"">info</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_size</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""k"">sizeof</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFileClass</span><span class=""p"">),</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">base_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">base_finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GClassInitFunc</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">viewer_file_class_init</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_data</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">instance_size</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""k"">sizeof</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""p"">),</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">n_preallocs</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">instance_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GInstanceInitFunc</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">viewer_file_init</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">};</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_type_register_static</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_TYPE_OBJECT</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                   </span><span class=""s"">""ViewerFile""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                   </span><span class=""o"">&amp;</span><span class=""n"">info</span><span class=""p"">,</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">}</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">return</span><span class=""w""> </span><span class=""n"">type</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>
</code>
<span></span><code>struct _GTypeClass
{
  GType g_type;
};

struct _GTypeInstance
{
  GTypeClass *g_class;
};
</code>
<span></span><code><span class=""cm"">/* A definitions */</span><span class=""w""></span>
<span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">struct</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GTypeInstance</span><span class=""w""> </span><span class=""n"">parent</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">int</span><span class=""w""> </span><span class=""n"">field_a</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">int</span><span class=""w""> </span><span class=""n"">field_b</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""> </span><span class=""n"">A</span><span class=""p"">;</span><span class=""w""></span>

<span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">struct</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GTypeClass</span><span class=""w""> </span><span class=""n"">parent_class</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">method_a</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">method_b</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""> </span><span class=""n"">AClass</span><span class=""p"">;</span><span class=""w""></span>

<span class=""cm"">/* B definitions. */</span><span class=""w""></span>
<span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">struct</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">A</span><span class=""w""> </span><span class=""n"">parent</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">int</span><span class=""w""> </span><span class=""n"">field_c</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">int</span><span class=""w""> </span><span class=""n"">field_d</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""> </span><span class=""n"">B</span><span class=""p"">;</span><span class=""w""></span>

<span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">struct</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">AClass</span><span class=""w""> </span><span class=""n"">parent_class</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">method_c</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">method_d</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""> </span><span class=""n"">BClass</span><span class=""p"">;</span><span class=""w""></span>
</code>
<span></span><code><span class=""n"">B</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">b</span><span class=""p"">;</span><span class=""w""></span>
<span class=""n"">b</span><span class=""o"">-&gt;</span><span class=""n"">parent</span><span class=""p"">.</span><span class=""n"">parent</span><span class=""p"">.</span><span class=""n"">g_class</span><span class=""o"">-&gt;</span><span class=""n"">g_type</span><span class=""w""></span>
</code>
<span></span><code><span class=""n"">B</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">b</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">((</span><span class=""n"">GTypeInstance</span><span class=""w""> </span><span class=""o"">*</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">b</span><span class=""p"">)</span><span class=""o"">-&gt;</span><span class=""n"">g_class</span><span class=""o"">-&gt;</span><span class=""n"">g_type</span><span class=""w""></span>
</code>
<span></span><code><span class=""cp"">#define VIEWER_TYPE_EDITABLE viewer_editable_get_type ()</span>
<span class=""n"">G_DECLARE_INTERFACE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditable</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">viewer_editable</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">VIEWER</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">EDITABLE</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">GObject</span><span class=""p"">)</span><span class=""w""></span>

<span class=""k"">struct</span><span class=""w""> </span><span class=""nc"">_ViewerEditableInterface</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GTypeInterface</span><span class=""w""> </span><span class=""n"">parent</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">save</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditable</span><span class=""w"">  </span><span class=""o"">*</span><span class=""n"">self</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                </span><span class=""n"">GError</span><span class=""w"">         </span><span class=""o"">**</span><span class=""n"">error</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">};</span><span class=""w""></span>

<span class=""kt"">void</span><span class=""w""> </span><span class=""nf"">viewer_editable_save</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditable</span><span class=""w"">  </span><span class=""o"">*</span><span class=""n"">self</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                           </span><span class=""n"">GError</span><span class=""w"">         </span><span class=""o"">**</span><span class=""n"">error</span><span class=""p"">);</span><span class=""w""></span>
</code>
<span></span><code><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_editable_save</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditable</span><span class=""w"">  </span><span class=""o"">*</span><span class=""n"">self</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                      </span><span class=""n"">GError</span><span class=""w"">         </span><span class=""o"">**</span><span class=""n"">error</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">ViewerEditableinterface</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">iface</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_return_if_fail</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">VIEWER_IS_EDITABLE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">self</span><span class=""p"">));</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_return_if_fail</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">error</span><span class=""w""> </span><span class=""o"">==</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""w""> </span><span class=""o"">||</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">error</span><span class=""w""> </span><span class=""o"">==</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">iface</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">VIEWER_EDITABLE_GET_IFACE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">self</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_return_if_fail</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">iface</span><span class=""o"">-&gt;</span><span class=""n"">save</span><span class=""w""> </span><span class=""o"">!=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">iface</span><span class=""o"">-&gt;</span><span class=""n"">save</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">self</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>
</code>
<span></span><code><span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_file_save</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditable</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">self</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_print</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""File implementation of editable interface save method.</span><span class=""se"">\n</span><span class=""s"">""</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_file_editable_interface_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditableInterface</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">iface</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">iface</span><span class=""o"">-&gt;</span><span class=""n"">save</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">viewer_file_save</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""n"">G_DEFINE_TYPE_WITH_CODE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">viewer_file</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">VIEWER_TYPE_FILE</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                         </span><span class=""n"">G_IMPLEMENT_INTERFACE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">VIEWER_TYPE_EDITABLE</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                                </span><span class=""n"">viewer_file_editable_interface_init</span><span class=""p"">))</span><span class=""w""></span>
</code>
<span></span><code><span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_file_save</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditable</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">editable</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_print</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""File implementation of editable interface save method.</span><span class=""se"">\n</span><span class=""s"">""</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_file_editable_interface_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">gpointer</span><span class=""w""> </span><span class=""n"">g_iface</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                     </span><span class=""n"">gpointer</span><span class=""w""> </span><span class=""n"">iface_data</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">ViewerEditableInterface</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">iface</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_iface</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">iface</span><span class=""o"">-&gt;</span><span class=""n"">save</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">viewer_file_save</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""n"">GType</span><span class=""w""></span>
<span class=""nf"">viewer_file_get_type</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">static</span><span class=""w""> </span><span class=""n"">GType</span><span class=""w""> </span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">if</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">==</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeInfo</span><span class=""w""> </span><span class=""n"">info</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_size</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""k"">sizeof</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFileClass</span><span class=""p"">),</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">base_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">base_finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GClassInitFunc</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">viewer_file_class_init</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_data</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">instance_size</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""k"">sizeof</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""p"">),</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">n_preallocs</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">instance_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GInstanceInitFunc</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">viewer_file_init</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">};</span><span class=""w""></span>

<span class=""w"">    </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GInterfaceInfo</span><span class=""w""> </span><span class=""n"">editable_info</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">interface_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GInterfaceInitFunc</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">viewer_file_editable_interface_init</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">interface_finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">interface_data</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">};</span><span class=""w""></span>

<span class=""w"">    </span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_type_register_static</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">VIEWER_TYPE_FILE</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                   </span><span class=""s"">""ViewerFile""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                   </span><span class=""o"">&amp;</span><span class=""n"">info</span><span class=""p"">,</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">    </span><span class=""n"">g_type_add_interface_static</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">type</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                 </span><span class=""n"">VIEWER_TYPE_EDITABLE</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                 </span><span class=""o"">&amp;</span><span class=""n"">editable_info</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">}</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">return</span><span class=""w""> </span><span class=""n"">type</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>
</code>
<span></span><code><span class=""k"">struct</span><span class=""w""> </span><span class=""nc"">_GInterfaceInfo</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GInterfaceInitFunc</span><span class=""w"">     </span><span class=""n"">interface_init</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GInterfaceFinalizeFunc</span><span class=""w""> </span><span class=""n"">interface_finalize</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">gpointer</span><span class=""w"">               </span><span class=""n"">interface_data</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">};</span><span class=""w""></span>
</code>
<span></span><code><span class=""n"">G_DEFINE_INTERFACE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditable</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">viewer_editable</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">G_TYPE_OBJECT</span><span class=""p"">)</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""n"">viewer_editable_default_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditableInterface</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">iface</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""cm"">/* add properties and signals here, will only be called once */</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>
</code>
<span></span><code><span class=""n"">GType</span><span class=""w""></span>
<span class=""nf"">viewer_editable_get_type</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">static</span><span class=""w""> </span><span class=""n"">gsize</span><span class=""w""> </span><span class=""n"">type_id</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">if</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">g_once_init_enter</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">type_id</span><span class=""p"">))</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeInfo</span><span class=""w""> </span><span class=""n"">info</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">      </span><span class=""k"">sizeof</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditableInterface</span><span class=""p"">),</span><span class=""w""></span>
<span class=""w"">      </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w"">   </span><span class=""cm"">/* base_init */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w"">   </span><span class=""cm"">/* base_finalize */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">viewer_editable_default_init</span><span class=""p"">,</span><span class=""w""> </span><span class=""cm"">/* class_init */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w"">   </span><span class=""cm"">/* class_finalize */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w"">   </span><span class=""cm"">/* class_data */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""mi"">0</span><span class=""p"">,</span><span class=""w"">      </span><span class=""cm"">/* instance_size */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""mi"">0</span><span class=""p"">,</span><span class=""w"">      </span><span class=""cm"">/* n_preallocs */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""nb"">NULL</span><span class=""w"">    </span><span class=""cm"">/* instance_init */</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">};</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">GType</span><span class=""w""> </span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_type_register_static</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_TYPE_INTERFACE</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                         </span><span class=""s"">""ViewerEditable""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                         </span><span class=""o"">&amp;</span><span class=""n"">info</span><span class=""p"">,</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">g_once_init_leave</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">type_id</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">type</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">}</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">return</span><span class=""w""> </span><span class=""n"">type_id</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_editable_default_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditableInterface</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">iface</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""cm"">/* add properties and signals here, will only called once */</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>
</code>
<span></span><code><span class=""cp"">#define VIEWER_TYPE_FILE viewer_file_get_type ()</span>
<span class=""n"">G_DECLARE_FINAL_TYPE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">viewer_file</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">VIEWER</span><span class=""p"">,</span><span class=""w""> </span><span class=""kt"">FILE</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">GObject</span><span class=""p"">)</span><span class=""w""></span>

<span class=""k"">struct</span><span class=""w""> </span><span class=""nc"">_ViewerFile</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GObject</span><span class=""w""> </span><span class=""n"">parent_instance</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* instance members */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">char</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">filename</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">guint</span><span class=""w""> </span><span class=""n"">zoom_level</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">};</span><span class=""w""></span>

<span class=""cm"">/* will create viewer_file_get_type and set viewer_file_parent_class */</span><span class=""w""></span>
<span class=""n"">G_DEFINE_TYPE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">viewer_file</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">G_TYPE_OBJECT</span><span class=""p"">)</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""n"">viewer_file_constructed</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GObject</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">obj</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""cm"">/* update the object state depending on constructor properties */</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* Always chain up to the parent constructed function to complete object</span>
<span class=""cm"">   * initialisation. */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">G_OBJECT_CLASS</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">viewer_file_parent_class</span><span class=""p"">)</span><span class=""o"">-&gt;</span><span class=""n"">constructed</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">obj</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""n"">viewer_file_finalize</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GObject</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">obj</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">ViewerFile</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">self</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">VIEWER_FILE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">obj</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_free</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">filename</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* Always chain up to the parent finalize function to complete object</span>
<span class=""cm"">   * destruction. */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">G_OBJECT_CLASS</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">viewer_file_parent_class</span><span class=""p"">)</span><span class=""o"">-&gt;</span><span class=""n"">finalize</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">obj</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""n"">viewer_file_class_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFileClass</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">klass</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GObjectClass</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">object_class</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">G_OBJECT_CLASS</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">klass</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">object_class</span><span class=""o"">-&gt;</span><span class=""n"">constructed</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">viewer_file_constructed</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">object_class</span><span class=""o"">-&gt;</span><span class=""n"">finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">viewer_file_finalize</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""n"">viewer_file_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">self</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""cm"">/* initialize the object */</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>
</code>
<span></span><code><span class=""n"">ViewerFile</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">file</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_object_new</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">VIEWER_TYPE_FILE</span><span class=""p"">,</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">);</span><span class=""w""></span>
</code>
<span></span><code><span class=""c1"">// Implementation</span>

<span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">enum</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">PROP_FILENAME</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">1</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">PROP_ZOOM_LEVEL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">N_PROPERTIES</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""> </span><span class=""n"">ViewerFileProperty</span><span class=""p"">;</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""n"">GParamSpec</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">obj_properties</span><span class=""p"">[</span><span class=""n"">N_PROPERTIES</span><span class=""p"">]</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""> </span><span class=""p"">};</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_file_set_property</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GObject</span><span class=""w"">      </span><span class=""o"">*</span><span class=""n"">object</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                          </span><span class=""n"">guint</span><span class=""w"">         </span><span class=""n"">property_id</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                          </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GValue</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">value</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                          </span><span class=""n"">GParamSpec</span><span class=""w"">   </span><span class=""o"">*</span><span class=""n"">pspec</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">ViewerFile</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">self</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">VIEWER_FILE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">object</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""k"">switch</span><span class=""w""> </span><span class=""p"">((</span><span class=""n"">ViewerFileProperty</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">property_id</span><span class=""p"">)</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""k"">case</span><span class=""w""> </span><span class=""no"">PROP_FILENAME</span><span class=""p"">:</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">g_free</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">filename</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">filename</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_value_dup_string</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">value</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">g_print</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""filename: %s</span><span class=""se"">\n</span><span class=""s"">""</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">filename</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""k"">break</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">    </span><span class=""k"">case</span><span class=""w""> </span><span class=""no"">PROP_ZOOM_LEVEL</span><span class=""p"">:</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">zoom_level</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_value_get_uint</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">value</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">g_print</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""zoom level: %u</span><span class=""se"">\n</span><span class=""s"">""</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">zoom_level</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""k"">break</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">    </span><span class=""k"">default</span><span class=""o"">:</span><span class=""w""></span>
<span class=""w"">      </span><span class=""cm"">/* We don't have any other property... */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">G_OBJECT_WARN_INVALID_PROPERTY_ID</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">object</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">property_id</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">pspec</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""k"">break</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">}</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_file_get_property</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GObject</span><span class=""w"">    </span><span class=""o"">*</span><span class=""n"">object</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                          </span><span class=""n"">guint</span><span class=""w"">       </span><span class=""n"">property_id</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                          </span><span class=""n"">GValue</span><span class=""w"">     </span><span class=""o"">*</span><span class=""n"">value</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                          </span><span class=""n"">GParamSpec</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">pspec</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">ViewerFile</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">self</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">VIEWER_FILE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">object</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""k"">switch</span><span class=""w""> </span><span class=""p"">((</span><span class=""n"">ViewerFileProperty</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">property_id</span><span class=""p"">)</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""k"">case</span><span class=""w""> </span><span class=""no"">PROP_FILENAME</span><span class=""p"">:</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">g_value_set_string</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">value</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">filename</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""k"">break</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">    </span><span class=""k"">case</span><span class=""w""> </span><span class=""no"">PROP_ZOOM_LEVEL</span><span class=""p"">:</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">g_value_set_uint</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">value</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">zoom_level</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""k"">break</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">    </span><span class=""k"">default</span><span class=""o"">:</span><span class=""w""></span>
<span class=""w"">      </span><span class=""cm"">/* We don't have any other property... */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">G_OBJECT_WARN_INVALID_PROPERTY_ID</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">object</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">property_id</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">pspec</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""k"">break</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">}</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_file_class_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFileClass</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">klass</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GObjectClass</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">object_class</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">G_OBJECT_CLASS</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">klass</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">object_class</span><span class=""o"">-&gt;</span><span class=""n"">set_property</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">viewer_file_set_property</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">object_class</span><span class=""o"">-&gt;</span><span class=""n"">get_property</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">viewer_file_get_property</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">obj_properties</span><span class=""p"">[</span><span class=""n"">PROP_FILENAME</span><span class=""p"">]</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">g_param_spec_string</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""filename""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                         </span><span class=""s"">""Filename""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                         </span><span class=""s"">""Name of the file to load and display from.""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                         </span><span class=""nb"">NULL</span><span class=""w"">  </span><span class=""cm"">/* default value */</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                         </span><span class=""n"">G_PARAM_CONSTRUCT_ONLY</span><span class=""w""> </span><span class=""o"">|</span><span class=""w""> </span><span class=""n"">G_PARAM_READWRITE</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">obj_properties</span><span class=""p"">[</span><span class=""n"">PROP_ZOOM_LEVEL</span><span class=""p"">]</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">g_param_spec_uint</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""zoom-level""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                       </span><span class=""s"">""Zoom level""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                       </span><span class=""s"">""Zoom level to view the file at.""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                       </span><span class=""mi"">0</span><span class=""w"">  </span><span class=""cm"">/* minimum value */</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                       </span><span class=""mi"">10</span><span class=""w""> </span><span class=""cm"">/* maximum value */</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                       </span><span class=""mi"">2</span><span class=""w"">  </span><span class=""cm"">/* default value */</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                       </span><span class=""n"">G_PARAM_READWRITE</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_object_class_install_properties</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">object_class</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                     </span><span class=""n"">N_PROPERTIES</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                     </span><span class=""n"">obj_properties</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>
</code>
<span></span><code><span class=""c1"">// Use</span>

<span class=""n"">ViewerFile</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">file</span><span class=""p"">;</span><span class=""w""></span>
<span class=""n"">GValue</span><span class=""w""> </span><span class=""n"">val</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">G_VALUE_INIT</span><span class=""p"">;</span><span class=""w""></span>

<span class=""n"">file</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_object_new</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">VIEWER_TYPE_FILE</span><span class=""p"">,</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">);</span><span class=""w""></span>

<span class=""n"">g_value_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">val</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">G_TYPE_UINT</span><span class=""p"">);</span><span class=""w""></span>
<span class=""n"">g_value_set_char</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">val</span><span class=""p"">,</span><span class=""w""> </span><span class=""mi"">11</span><span class=""p"">);</span><span class=""w""></span>

<span class=""n"">g_object_set_property</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_OBJECT</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">file</span><span class=""p"">),</span><span class=""w""> </span><span class=""s"">""zoom-level""</span><span class=""p"">,</span><span class=""w""> </span><span class=""o"">&amp;</span><span class=""n"">val</span><span class=""p"">);</span><span class=""w""></span>

<span class=""n"">g_value_unset</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">val</span><span class=""p"">);</span><span class=""w""></span>
</code>
<span></span><code><span class=""n"">ViewerFile</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">file</span><span class=""p"">;</span><span class=""w""></span>
<span class=""n"">file</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""cm"">/* */</span><span class=""p"">;</span><span class=""w""></span>
<span class=""n"">g_object_set</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_OBJECT</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">file</span><span class=""p"">),</span><span class=""w""></span>
<span class=""w"">              </span><span class=""s"">""zoom-level""</span><span class=""p"">,</span><span class=""w""> </span><span class=""mi"">6</span><span class=""p"">,</span><span class=""w""> </span>
<span class=""w"">              </span><span class=""s"">""filename""</span><span class=""p"">,</span><span class=""w""> </span><span class=""s"">""~/some-file.txt""</span><span class=""p"">,</span><span class=""w""> </span>
<span class=""w"">              </span><span class=""nb"">NULL</span><span class=""p"">);</span><span class=""w""></span>
</code>
<span></span><code><span class=""n"">g_cclosure_marshal_VOID__INT</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GClosure</span><span class=""w"">     </span><span class=""o"">*</span><span class=""n"">closure</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                              </span><span class=""n"">GValue</span><span class=""w"">       </span><span class=""o"">*</span><span class=""n"">return_value</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                              </span><span class=""n"">guint</span><span class=""w"">         </span><span class=""n"">n_param_values</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                              </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GValue</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">param_values</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                              </span><span class=""n"">gpointer</span><span class=""w"">      </span><span class=""n"">invocation_hint</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                              </span><span class=""n"">gpointer</span><span class=""w"">      </span><span class=""n"">marshal_data</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">typedef</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">GMarshalFunc_VOID__INT</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">gpointer</span><span class=""w"">     </span><span class=""n"">data1</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                          </span><span class=""n"">gint</span><span class=""w"">         </span><span class=""n"">arg_1</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                          </span><span class=""n"">gpointer</span><span class=""w"">     </span><span class=""n"">data2</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">register</span><span class=""w""> </span><span class=""n"">GMarshalFunc_VOID__INT</span><span class=""w""> </span><span class=""n"">callback</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">register</span><span class=""w""> </span><span class=""n"">GCClosure</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">cc</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GCClosure</span><span class=""o"">*</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">closure</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">register</span><span class=""w""> </span><span class=""n"">gpointer</span><span class=""w""> </span><span class=""n"">data1</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">data2</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_return_if_fail</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">n_param_values</span><span class=""w""> </span><span class=""o"">==</span><span class=""w""> </span><span class=""mi"">2</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">data1</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_value_peek_pointer</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">param_values</span><span class=""w""> </span><span class=""o"">+</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">data2</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">closure</span><span class=""o"">-&gt;</span><span class=""n"">data</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">callback</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GMarshalFunc_VOID__INT</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">marshal_data</span><span class=""w""> </span><span class=""o"">?</span><span class=""w""> </span><span class=""n"">marshal_data</span><span class=""w""> </span><span class=""o"">:</span><span class=""w""> </span><span class=""n"">cc</span><span class=""o"">-&gt;</span><span class=""n"">callback</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">callback</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">data1</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">            </span><span class=""n"">g_marshal_value_peek_int</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">param_values</span><span class=""w""> </span><span class=""o"">+</span><span class=""w""> </span><span class=""mi"">1</span><span class=""p"">),</span><span class=""w""></span>
<span class=""w"">            </span><span class=""n"">data2</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>
</code>
<span></span><code><span class=""n"">return_type</span><span class=""w""></span>
<span class=""nf"">function_callback</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">gpointer</span><span class=""w""> </span><span class=""n"">instance</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                   </span><span class=""p"">...,</span><span class=""w""></span>
<span class=""w"">                   </span><span class=""n"">gpointer</span><span class=""w""> </span><span class=""n"">user_data</span><span class=""p"">);</span><span class=""w""></span>
</code>
<span></span><code><span class=""n"">guint</span><span class=""w""></span>
<span class=""nf"">g_signal_newv</span><span class=""w""> </span><span class=""p"">(</span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">gchar</span><span class=""w"">        </span><span class=""o"">*</span><span class=""n"">signal_name</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">GType</span><span class=""w"">               </span><span class=""n"">itype</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">GSignalFlags</span><span class=""w"">        </span><span class=""n"">signal_flags</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">GClosure</span><span class=""w"">           </span><span class=""o"">*</span><span class=""n"">class_closure</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">GSignalAccumulator</span><span class=""w"">  </span><span class=""n"">accumulator</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">gpointer</span><span class=""w"">            </span><span class=""n"">accu_data</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">GSignalCMarshaller</span><span class=""w"">  </span><span class=""n"">c_marshaller</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">GType</span><span class=""w"">               </span><span class=""n"">return_type</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">guint</span><span class=""w"">               </span><span class=""n"">n_params</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">GType</span><span class=""w"">              </span><span class=""o"">*</span><span class=""n"">param_types</span><span class=""p"">);</span><span class=""w""></span>
</code>
<span></span><code><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">g_signal_emitv</span><span class=""w""> </span><span class=""p"">(</span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GValue</span><span class=""w"">  </span><span class=""n"">instance_and_params</span><span class=""p"">[],</span><span class=""w""></span>
<span class=""w"">                </span><span class=""n"">guint</span><span class=""w"">         </span><span class=""n"">signal_id</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                </span><span class=""n"">GQuark</span><span class=""w"">        </span><span class=""n"">detail</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                </span><span class=""n"">GValue</span><span class=""w"">       </span><span class=""o"">*</span><span class=""n"">return_value</span><span class=""p"">);</span><span class=""w""></span>
</code>
<span class=""k"">my</span> <span class=""nv"">$tmp</span> <span class=""o"">=</span> <span class=""mi"">10</span><span class=""p"">;</span>
<span class=""k"">print</span> <span class=""s"">""this is an integer converted to a string:""</span> <span class=""o"">.</span> <span class=""nv"">$tmp</span> <span class=""o"">.</span> <span class=""s"">""\n""</span><span class=""p"">;</span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">function_foo</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">int</span><span class=""w""> </span><span class=""n"">foo</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""kt"">int</span><span class=""w""></span>
<span class=""nf"">main</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">int</span><span class=""w"">   </span><span class=""n"">argc</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""kt"">char</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">argv</span><span class=""p"">[])</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">function_foo</span><span class=""w""> </span><span class=""p"">(</span><span class=""mi"">10</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">    </span><span class=""k"">return</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""nf"">push</span><span class=""w"">   </span><span class=""no"">$0xa</span><span class=""w""></span>
<span class=""nf"">call</span><span class=""w"">   </span><span class=""mh"">0x80482f4</span> <span class=""p"">&lt;</span><span class=""no"">function_foo</span><span class=""p"">&gt;</span><span class=""w""></span>

function_foo
function_foo
<span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">struct</span><span class=""w""> </span><span class=""nc"">_GTypeInfo</span><span class=""w"">               </span><span class=""n"">GTypeInfo</span><span class=""p"">;</span><span class=""w""></span>
<span class=""k"">struct</span><span class=""w""> </span><span class=""nc"">_GTypeInfo</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""cm"">/* interface types, classed types, instantiated types */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">guint16</span><span class=""w"">                </span><span class=""n"">class_size</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">GBaseInitFunc</span><span class=""w"">          </span><span class=""n"">base_init</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GBaseFinalizeFunc</span><span class=""w"">      </span><span class=""n"">base_finalize</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* classed types, instantiated types */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GClassInitFunc</span><span class=""w"">         </span><span class=""n"">class_init</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GClassFinalizeFunc</span><span class=""w"">     </span><span class=""n"">class_finalize</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">gconstpointer</span><span class=""w"">          </span><span class=""n"">class_data</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* instantiated types */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">guint16</span><span class=""w"">                </span><span class=""n"">instance_size</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">guint16</span><span class=""w"">                </span><span class=""n"">n_preallocs</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GInstanceInitFunc</span><span class=""w"">      </span><span class=""n"">instance_init</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* value handling */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeValueTable</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">value_table</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">};</span><span class=""w""></span>

<span class=""n"">GType</span><span class=""w""></span>
<span class=""nf"">g_type_register_static</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GType</span><span class=""w"">            </span><span class=""n"">parent_type</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                        </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">gchar</span><span class=""w"">     </span><span class=""o"">*</span><span class=""n"">type_name</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                        </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeInfo</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">info</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                        </span><span class=""n"">GTypeFlags</span><span class=""w"">       </span><span class=""n"">flags</span><span class=""p"">);</span><span class=""w""></span>

<span class=""n"">GType</span><span class=""w""></span>
<span class=""nf"">g_type_register_fundamental</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GType</span><span class=""w"">                       </span><span class=""n"">type_id</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                             </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">gchar</span><span class=""w"">                </span><span class=""o"">*</span><span class=""n"">type_name</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                             </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeInfo</span><span class=""w"">            </span><span class=""o"">*</span><span class=""n"">info</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                             </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeFundamentalInfo</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">finfo</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                             </span><span class=""n"">GTypeFlags</span><span class=""w"">                  </span><span class=""n"">flags</span><span class=""p"">);</span><span class=""w""></span>

g_type_register_static()
g_type_register_dynamic()
g_type_register_fundamental()
gtype.h
gtype.c
g_type_register_fundamental()
class_size
GTypeInfo
base_init
class_init
GTypeInfo
base_finalize
class_finalize
GTypeInfo
instance_size
GTypeInfo
n_preallocs
GTypeInfo
value_table
GTypeInfo
GTypeFlags
GTypeFundamentalFlags
GTypeFundamentalInfo
parent_type
g_type_register_static()
g_type_register_dynamic()
GValue
gobject/gvalue.h
value_table
g_value_copy()
GValue
GValue
GObject
<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""> </span><span class=""nf"">test_int</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GValue</span><span class=""w""> </span><span class=""n"">a_value</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">G_VALUE_INIT</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GValue</span><span class=""w""> </span><span class=""n"">b_value</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">G_VALUE_INIT</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">guint64</span><span class=""w""> </span><span class=""n"">a</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">b</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">a</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mh"">0xdeadbeef</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_value_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">a_value</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">G_TYPE_UINT64</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_value_set_uint64</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">a_value</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">a</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_value_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">b_value</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">G_TYPE_UINT64</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_value_copy</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">a_value</span><span class=""p"">,</span><span class=""w""> </span><span class=""o"">&amp;</span><span class=""n"">b_value</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">b</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_value_get_uint64</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">b_value</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""k"">if</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">a</span><span class=""w""> </span><span class=""o"">==</span><span class=""w""> </span><span class=""n"">b</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">g_print</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""Yay !! 10 lines of code to copy around a uint64.</span><span class=""se"">\n</span><span class=""s"">""</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">}</span><span class=""w""> </span><span class=""k"">else</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">g_print</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""Are you sure this is not a Z80 ?</span><span class=""se"">\n</span><span class=""s"">""</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">}</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""> </span><span class=""nf"">test_object</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GObject</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">obj</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GValue</span><span class=""w""> </span><span class=""n"">obj_vala</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">G_VALUE_INIT</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GValue</span><span class=""w""> </span><span class=""n"">obj_valb</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">G_VALUE_INIT</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">obj</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_object_new</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">VIEWER_TYPE_FILE</span><span class=""p"">,</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_value_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">obj_vala</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">VIEWER_TYPE_FILE</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_value_set_object</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">obj_vala</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">obj</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_value_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">obj_valb</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">G_TYPE_OBJECT</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* g_value_copy's semantics for G_TYPE_OBJECT types is to copy the reference.</span>
<span class=""cm"">   * This function thus calls g_object_ref.</span>
<span class=""cm"">   * It is interesting to note that the assignment works here because</span>
<span class=""cm"">   * VIEWER_TYPE_FILE is a G_TYPE_OBJECT.</span>
<span class=""cm"">   */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_value_copy</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">obj_vala</span><span class=""p"">,</span><span class=""w""> </span><span class=""o"">&amp;</span><span class=""n"">obj_valb</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_object_unref</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_OBJECT</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">obj</span><span class=""p"">));</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_object_unref</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_OBJECT</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">obj</span><span class=""p"">));</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

GValue
GTypeValueTable
value_table
value_tables
object_method
file_save
Viewer
viewer_object_method
PREFIX_TYPE_OBJECT
File
Viewer
VIEWER_TYPE_FILE
prefix_object_get_type
viewer_file_get_type
G_DECLARE_FINAL_TYPE
G_DECLARE_DERIVABLE_TYPE
PREFIX_OBJECT (obj)
PrefixObject
VIEWER_FILE (obj)
PREFIX_OBJECT_CLASS (klass)
PrefixObjectClass
VIEWER_FILE_CLASS
PREFIX_IS_OBJECT (obj)
NULL
OBJECT
VIEWER_IS_FILE
PREFIX_IS_OBJECT_CLASS (klass)
OBJECT
VIEWER_IS_FILE_CLASS
PREFIX_OBJECT_GET_CLASS (obj)
VIEWER_FILE_GET_CLASS
gtype.h
<span class=""cp"">#define VIEWER_TYPE_FILE viewer_file_get_type()</span>
<span class=""n"">G_DECLARE_FINAL_TYPE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">viewer_file</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">VIEWER</span><span class=""p"">,</span><span class=""w""> </span><span class=""kt"">FILE</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">GObject</span><span class=""p"">)</span><span class=""w""></span>

G_DEFINE_TYPE
<span class=""n"">G_DEFINE_TYPE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">viewer_file</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">G_TYPE_OBJECT</span><span class=""p"">)</span><span class=""w""></span>

viewer_file_get_type
<span class=""n"">GType</span><span class=""w""> </span><span class=""nf"">viewer_file_get_type</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">static</span><span class=""w""> </span><span class=""n"">GType</span><span class=""w""> </span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">if</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">==</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeInfo</span><span class=""w""> </span><span class=""n"">info</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">      </span><span class=""cm"">/* You fill this structure. */</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">};</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_type_register_static</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_TYPE_OBJECT</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                   </span><span class=""s"">""ViewerFile""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                   </span><span class=""o"">&amp;</span><span class=""n"">info</span><span class=""p"">,</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">}</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">return</span><span class=""w""> </span><span class=""n"">type</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

gchar
GTypeInfo
<span class=""n"">GTypeInfo</span><span class=""w""> </span><span class=""n"">info</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">class_size</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">,</span><span class=""w""></span>

<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">base_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">base_finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>

<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">class_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">class_finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">class_data</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>

<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">instance_size</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">n_preallocs</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">instance_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>

<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">value_table</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""p"">};</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeValueTable</span><span class=""w""> </span><span class=""n"">value_table</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">value_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">value_init_long0</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">value_free</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">value_copy</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">value_copy_long0</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">value_peek_pointer</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>

<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">collect_format</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""s"">""i""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">collect_value</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">value_collect_int</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">lcopy_format</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""s"">""p""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">.</span><span class=""n"">lcopy_value</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">value_lcopy_char</span><span class=""p"">,</span><span class=""w""></span>
<span class=""p"">};</span><span class=""w""></span>

<span class=""n"">info</span><span class=""p"">.</span><span class=""n"">value_table</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""o"">&amp;</span><span class=""n"">value_table</span><span class=""p"">;</span><span class=""w""></span>

<span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_type_register_fundamental</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_TYPE_CHAR</span><span class=""p"">,</span><span class=""w""> </span><span class=""s"">""gchar""</span><span class=""p"">,</span><span class=""w""> </span><span class=""o"">&amp;</span><span class=""n"">info</span><span class=""p"">,</span><span class=""w""> </span><span class=""o"">&amp;</span><span class=""n"">finfo</span><span class=""p"">,</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">);</span><span class=""w""></span>

GValue
GValue
value_table
GValue
GObject
<span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">struct</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GObject</span><span class=""w""> </span><span class=""n"">parent_instance</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* instance members */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">char</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">filename</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""> </span><span class=""n"">ViewerFile</span><span class=""p"">;</span><span class=""w""></span>

<span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">struct</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GObjectClass</span><span class=""w""> </span><span class=""n"">parent_class</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* class members */</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* the first is public, pure and virtual */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">open</span><span class=""p"">)</span><span class=""w"">  </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""w"">  </span><span class=""o"">*</span><span class=""n"">self</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                 </span><span class=""n"">GError</span><span class=""w"">     </span><span class=""o"">**</span><span class=""n"">error</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* the second is public and virtual */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">close</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""w"">  </span><span class=""o"">*</span><span class=""n"">self</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                 </span><span class=""n"">GError</span><span class=""w"">     </span><span class=""o"">**</span><span class=""n"">error</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""> </span><span class=""n"">ViewerFileClass</span><span class=""p"">;</span><span class=""w""></span>

<span class=""cp"">#define VIEWER_TYPE_FILE (viewer_file_get_type ())</span>

<span class=""n"">GType</span><span class=""w""></span>
<span class=""nf"">viewer_file_get_type</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">static</span><span class=""w""> </span><span class=""n"">GType</span><span class=""w""> </span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">if</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">==</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeInfo</span><span class=""w""> </span><span class=""n"">info</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_size</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""k"">sizeof</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFileClass</span><span class=""p"">),</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">base_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">base_finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GClassInitFunc</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">viewer_file_class_init</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_data</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">instance_size</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""k"">sizeof</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""p"">),</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">n_preallocs</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">instance_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GInstanceInitFunc</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">viewer_file_init</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">};</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_type_register_static</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_TYPE_OBJECT</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                   </span><span class=""s"">""ViewerFile""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                   </span><span class=""o"">&amp;</span><span class=""n"">info</span><span class=""p"">,</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">}</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">return</span><span class=""w""> </span><span class=""n"">type</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

viewer_file_get_type
ViewerFile
G_TYPE_OBJECT
GTypeClass
GTypeInstance
gtype.h
struct _GTypeClass
{
  GType g_type;
};

struct _GTypeInstance
{
  GTypeClass *g_class;
};

<span class=""cm"">/* A definitions */</span><span class=""w""></span>
<span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">struct</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GTypeInstance</span><span class=""w""> </span><span class=""n"">parent</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">int</span><span class=""w""> </span><span class=""n"">field_a</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">int</span><span class=""w""> </span><span class=""n"">field_b</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""> </span><span class=""n"">A</span><span class=""p"">;</span><span class=""w""></span>

<span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">struct</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GTypeClass</span><span class=""w""> </span><span class=""n"">parent_class</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">method_a</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">method_b</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""> </span><span class=""n"">AClass</span><span class=""p"">;</span><span class=""w""></span>

<span class=""cm"">/* B definitions. */</span><span class=""w""></span>
<span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">struct</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">A</span><span class=""w""> </span><span class=""n"">parent</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">int</span><span class=""w""> </span><span class=""n"">field_c</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">int</span><span class=""w""> </span><span class=""n"">field_d</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""> </span><span class=""n"">B</span><span class=""p"">;</span><span class=""w""></span>

<span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">struct</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">AClass</span><span class=""w""> </span><span class=""n"">parent_class</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">method_c</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">method_d</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""> </span><span class=""n"">BClass</span><span class=""p"">;</span><span class=""w""></span>

GTypeInstance
g_class
<span class=""n"">B</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">b</span><span class=""p"">;</span><span class=""w""></span>
<span class=""n"">b</span><span class=""o"">-&gt;</span><span class=""n"">parent</span><span class=""p"">.</span><span class=""n"">parent</span><span class=""p"">.</span><span class=""n"">g_class</span><span class=""o"">-&gt;</span><span class=""n"">g_type</span><span class=""w""></span>

<span class=""n"">B</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">b</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">((</span><span class=""n"">GTypeInstance</span><span class=""w""> </span><span class=""o"">*</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">b</span><span class=""p"">)</span><span class=""o"">-&gt;</span><span class=""n"">g_class</span><span class=""o"">-&gt;</span><span class=""n"">g_type</span><span class=""w""></span>

g_type_create_instance()
n_preallocs
base_init
(GBaseInitFunc)
class_init
(GClassInitFunc)
instance_init
(GInstanceInitFunc)
g_type_free_instance()
class_finalize
(GClassFinalizeFunc)
base_finalize
(GBaseFinalizeFunc)
GObject
base_init
class_init
g_type_create_instance()
base_init
base_init
class_init
g_type_create_instance()
instance_init
g_type_free_instance()
class_finalize
base_finalize
base_finalize
GTypeInterface
<span class=""cp"">#define VIEWER_TYPE_EDITABLE viewer_editable_get_type ()</span>
<span class=""n"">G_DECLARE_INTERFACE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditable</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">viewer_editable</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">VIEWER</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">EDITABLE</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">GObject</span><span class=""p"">)</span><span class=""w""></span>

<span class=""k"">struct</span><span class=""w""> </span><span class=""nc"">_ViewerEditableInterface</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GTypeInterface</span><span class=""w""> </span><span class=""n"">parent</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">save</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditable</span><span class=""w"">  </span><span class=""o"">*</span><span class=""n"">self</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                </span><span class=""n"">GError</span><span class=""w"">         </span><span class=""o"">**</span><span class=""n"">error</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">};</span><span class=""w""></span>

<span class=""kt"">void</span><span class=""w""> </span><span class=""nf"">viewer_editable_save</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditable</span><span class=""w"">  </span><span class=""o"">*</span><span class=""n"">self</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                           </span><span class=""n"">GError</span><span class=""w"">         </span><span class=""o"">**</span><span class=""n"">error</span><span class=""p"">);</span><span class=""w""></span>

viewer_editable_save
<span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_editable_save</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditable</span><span class=""w"">  </span><span class=""o"">*</span><span class=""n"">self</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                      </span><span class=""n"">GError</span><span class=""w"">         </span><span class=""o"">**</span><span class=""n"">error</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">ViewerEditableinterface</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">iface</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_return_if_fail</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">VIEWER_IS_EDITABLE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">self</span><span class=""p"">));</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_return_if_fail</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">error</span><span class=""w""> </span><span class=""o"">==</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""w""> </span><span class=""o"">||</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">error</span><span class=""w""> </span><span class=""o"">==</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">iface</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">VIEWER_EDITABLE_GET_IFACE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">self</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_return_if_fail</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">iface</span><span class=""o"">-&gt;</span><span class=""n"">save</span><span class=""w""> </span><span class=""o"">!=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">iface</span><span class=""o"">-&gt;</span><span class=""n"">save</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">self</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

viewer_editable_get_type
ViewerEditable
G_TYPE_INTERFACE
G_TYPE_INTERFACE
GTypeInterface
viewer_editable_save
G_IMPLEMENT_INTERFACE
<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_file_save</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditable</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">self</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_print</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""File implementation of editable interface save method.</span><span class=""se"">\n</span><span class=""s"">""</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_file_editable_interface_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditableInterface</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">iface</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">iface</span><span class=""o"">-&gt;</span><span class=""n"">save</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">viewer_file_save</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""n"">G_DEFINE_TYPE_WITH_CODE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">viewer_file</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">VIEWER_TYPE_FILE</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                         </span><span class=""n"">G_IMPLEMENT_INTERFACE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">VIEWER_TYPE_EDITABLE</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                                </span><span class=""n"">viewer_file_editable_interface_init</span><span class=""p"">))</span><span class=""w""></span>

get_type
ViewerEditable
ViewerFile
ViewerEditable
<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_file_save</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditable</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">editable</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">g_print</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""File implementation of editable interface save method.</span><span class=""se"">\n</span><span class=""s"">""</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_file_editable_interface_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">gpointer</span><span class=""w""> </span><span class=""n"">g_iface</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                     </span><span class=""n"">gpointer</span><span class=""w""> </span><span class=""n"">iface_data</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">ViewerEditableInterface</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">iface</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_iface</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">iface</span><span class=""o"">-&gt;</span><span class=""n"">save</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">viewer_file_save</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""n"">GType</span><span class=""w""></span>
<span class=""nf"">viewer_file_get_type</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">static</span><span class=""w""> </span><span class=""n"">GType</span><span class=""w""> </span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">if</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">==</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeInfo</span><span class=""w""> </span><span class=""n"">info</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_size</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""k"">sizeof</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFileClass</span><span class=""p"">),</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">base_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">base_finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GClassInitFunc</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">viewer_file_class_init</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">class_data</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">instance_size</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""k"">sizeof</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""p"">),</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">n_preallocs</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">instance_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GInstanceInitFunc</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">viewer_file_init</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">};</span><span class=""w""></span>

<span class=""w"">    </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GInterfaceInfo</span><span class=""w""> </span><span class=""n"">editable_info</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">interface_init</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GInterfaceInitFunc</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">viewer_file_editable_interface_init</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">interface_finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">      </span><span class=""p"">.</span><span class=""n"">interface_data</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">};</span><span class=""w""></span>

<span class=""w"">    </span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_type_register_static</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">VIEWER_TYPE_FILE</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                   </span><span class=""s"">""ViewerFile""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                   </span><span class=""o"">&amp;</span><span class=""n"">info</span><span class=""p"">,</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">    </span><span class=""n"">g_type_add_interface_static</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">type</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                 </span><span class=""n"">VIEWER_TYPE_EDITABLE</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                 </span><span class=""o"">&amp;</span><span class=""n"">editable_info</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">}</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">return</span><span class=""w""> </span><span class=""n"">type</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

g_type_add_interface_static()
ViewerFile
ViewerEditable
viewer_editable_get_type()
ViewerEditable
GInterfaceInfo
<span class=""k"">struct</span><span class=""w""> </span><span class=""nc"">_GInterfaceInfo</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GInterfaceInitFunc</span><span class=""w"">     </span><span class=""n"">interface_init</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GInterfaceFinalizeFunc</span><span class=""w""> </span><span class=""n"">interface_finalize</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">gpointer</span><span class=""w"">               </span><span class=""n"">interface_data</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">};</span><span class=""w""></span>

g_type
g_instance_type
g_type
g_instance_type
base_init
default_init
interface_init
base_init
interface_init
default_init
default_init
G_DEFINE_INTERFACE
<span class=""n"">G_DEFINE_INTERFACE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditable</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">viewer_editable</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">G_TYPE_OBJECT</span><span class=""p"">)</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""n"">viewer_editable_default_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditableInterface</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">iface</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""cm"">/* add properties and signals here, will only be called once */</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""n"">GType</span><span class=""w""></span>
<span class=""nf"">viewer_editable_get_type</span><span class=""w""> </span><span class=""p"">(</span><span class=""kt"">void</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">static</span><span class=""w""> </span><span class=""n"">gsize</span><span class=""w""> </span><span class=""n"">type_id</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">if</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">g_once_init_enter</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">type_id</span><span class=""p"">))</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GTypeInfo</span><span class=""w""> </span><span class=""n"">info</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">      </span><span class=""k"">sizeof</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditableInterface</span><span class=""p"">),</span><span class=""w""></span>
<span class=""w"">      </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w"">   </span><span class=""cm"">/* base_init */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w"">   </span><span class=""cm"">/* base_finalize */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">viewer_editable_default_init</span><span class=""p"">,</span><span class=""w""> </span><span class=""cm"">/* class_init */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w"">   </span><span class=""cm"">/* class_finalize */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w"">   </span><span class=""cm"">/* class_data */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""mi"">0</span><span class=""p"">,</span><span class=""w"">      </span><span class=""cm"">/* instance_size */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""mi"">0</span><span class=""p"">,</span><span class=""w"">      </span><span class=""cm"">/* n_preallocs */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""nb"">NULL</span><span class=""w"">    </span><span class=""cm"">/* instance_init */</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">};</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">GType</span><span class=""w""> </span><span class=""n"">type</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_type_register_static</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_TYPE_INTERFACE</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                         </span><span class=""s"">""ViewerEditable""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                         </span><span class=""o"">&amp;</span><span class=""n"">info</span><span class=""p"">,</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">g_once_init_leave</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">type_id</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">type</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""p"">}</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">return</span><span class=""w""> </span><span class=""n"">type_id</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_editable_default_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerEditableInterface</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">iface</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""cm"">/* add properties and signals here, will only called once */</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

g_type_create_instance()
base_init
g_type_create_instance()
default_init
g_type_create_instance()
interface_init
interface_finalize
base_finalize
interface_finalize
base_finalize
g_type_free_instance()
interface_finalize
base_finalize
GObject
GObject
GObject
g_object_new()
g_type_create_instance()
GObject
ViewerFile
<span class=""cp"">#define VIEWER_TYPE_FILE viewer_file_get_type ()</span>
<span class=""n"">G_DECLARE_FINAL_TYPE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">viewer_file</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">VIEWER</span><span class=""p"">,</span><span class=""w""> </span><span class=""kt"">FILE</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">GObject</span><span class=""p"">)</span><span class=""w""></span>

<span class=""k"">struct</span><span class=""w""> </span><span class=""nc"">_ViewerFile</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GObject</span><span class=""w""> </span><span class=""n"">parent_instance</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* instance members */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""kt"">char</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">filename</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">guint</span><span class=""w""> </span><span class=""n"">zoom_level</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">};</span><span class=""w""></span>

<span class=""cm"">/* will create viewer_file_get_type and set viewer_file_parent_class */</span><span class=""w""></span>
<span class=""n"">G_DEFINE_TYPE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">viewer_file</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">G_TYPE_OBJECT</span><span class=""p"">)</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""n"">viewer_file_constructed</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GObject</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">obj</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""cm"">/* update the object state depending on constructor properties */</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* Always chain up to the parent constructed function to complete object</span>
<span class=""cm"">   * initialisation. */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">G_OBJECT_CLASS</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">viewer_file_parent_class</span><span class=""p"">)</span><span class=""o"">-&gt;</span><span class=""n"">constructed</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">obj</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""n"">viewer_file_finalize</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GObject</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">obj</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">ViewerFile</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">self</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">VIEWER_FILE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">obj</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_free</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">filename</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""cm"">/* Always chain up to the parent finalize function to complete object</span>
<span class=""cm"">   * destruction. */</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">G_OBJECT_CLASS</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">viewer_file_parent_class</span><span class=""p"">)</span><span class=""o"">-&gt;</span><span class=""n"">finalize</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">obj</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""n"">viewer_file_class_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFileClass</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">klass</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GObjectClass</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">object_class</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">G_OBJECT_CLASS</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">klass</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">object_class</span><span class=""o"">-&gt;</span><span class=""n"">constructed</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">viewer_file_constructed</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">object_class</span><span class=""o"">-&gt;</span><span class=""n"">finalize</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">viewer_file_finalize</span><span class=""p"">;</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""n"">viewer_file_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFile</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">self</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""cm"">/* initialize the object */</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

ViewerFile
<span class=""n"">ViewerFile</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">file</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_object_new</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">VIEWER_TYPE_FILE</span><span class=""p"">,</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">);</span><span class=""w""></span>

viewer_file_class_init
viewer_file_base_class_init
viewer_file_class_init
viewer_file_constructed
g_object_new()
viewer_file_class_init
viewer_file_parent_class
G_DEFINE_TYPE
g_object_constructor
g_type_create_instance()
instance_init
instance_init
g_type_create_instance()
g_object_constructor
g_object_new()
g_object_new()
g_object_new()
base_init
base_init
class_init
base_init
interface_init
g_object_new()
constructor
GObjectClass-&gt;constructor
instance_init
instance_init
instance_init
constructed
GObjectClass-&gt;constructed
constructor
instance_init
g_type_create_instance()
instance_init
g_object_constructor
instance_init
g_object_ref()
g_object_unref()
g_clear_object()
g_object_unref()
g_object_new()
GInitiallyUnowned
g_object_unref()
dispose()
finalize()
finalize()
g_type_free_instance()
g_type_register_*
GObject
g_object_unref()
g_object_unref()
interface_finalize
base_finalize
class_finalize
base_finalize
base_init
g_object_weak_ref()
g_object_weak_unref()
GWeakNotify
GWeakNotify
g_object_add_weak_pointer()
g_object_remove_weak_pointer()
GWeakRef
dispose()
finalize()
g_object_run_dispose()
dispose()
dispose()
g_object_run_dispose()
class_init
g_object_class_install_properties()
<span class=""c1"">// Implementation</span>

<span class=""k"">typedef</span><span class=""w""> </span><span class=""k"">enum</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">PROP_FILENAME</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""mi"">1</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">PROP_ZOOM_LEVEL</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">N_PROPERTIES</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""> </span><span class=""n"">ViewerFileProperty</span><span class=""p"">;</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""n"">GParamSpec</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">obj_properties</span><span class=""p"">[</span><span class=""n"">N_PROPERTIES</span><span class=""p"">]</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">{</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">,</span><span class=""w""> </span><span class=""p"">};</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_file_set_property</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GObject</span><span class=""w"">      </span><span class=""o"">*</span><span class=""n"">object</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                          </span><span class=""n"">guint</span><span class=""w"">         </span><span class=""n"">property_id</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                          </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GValue</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">value</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                          </span><span class=""n"">GParamSpec</span><span class=""w"">   </span><span class=""o"">*</span><span class=""n"">pspec</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">ViewerFile</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">self</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">VIEWER_FILE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">object</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""k"">switch</span><span class=""w""> </span><span class=""p"">((</span><span class=""n"">ViewerFileProperty</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">property_id</span><span class=""p"">)</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""k"">case</span><span class=""w""> </span><span class=""no"">PROP_FILENAME</span><span class=""p"">:</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">g_free</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">filename</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">filename</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_value_dup_string</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">value</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">g_print</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""filename: %s</span><span class=""se"">\n</span><span class=""s"">""</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">filename</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""k"">break</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">    </span><span class=""k"">case</span><span class=""w""> </span><span class=""no"">PROP_ZOOM_LEVEL</span><span class=""p"">:</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">zoom_level</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_value_get_uint</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">value</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">g_print</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""zoom level: %u</span><span class=""se"">\n</span><span class=""s"">""</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">zoom_level</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""k"">break</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">    </span><span class=""k"">default</span><span class=""o"">:</span><span class=""w""></span>
<span class=""w"">      </span><span class=""cm"">/* We don't have any other property... */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">G_OBJECT_WARN_INVALID_PROPERTY_ID</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">object</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">property_id</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">pspec</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""k"">break</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">}</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_file_get_property</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GObject</span><span class=""w"">    </span><span class=""o"">*</span><span class=""n"">object</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                          </span><span class=""n"">guint</span><span class=""w"">       </span><span class=""n"">property_id</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                          </span><span class=""n"">GValue</span><span class=""w"">     </span><span class=""o"">*</span><span class=""n"">value</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                          </span><span class=""n"">GParamSpec</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">pspec</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">ViewerFile</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">self</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">VIEWER_FILE</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">object</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""k"">switch</span><span class=""w""> </span><span class=""p"">((</span><span class=""n"">ViewerFileProperty</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">property_id</span><span class=""p"">)</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">{</span><span class=""w""></span>
<span class=""w"">    </span><span class=""k"">case</span><span class=""w""> </span><span class=""no"">PROP_FILENAME</span><span class=""p"">:</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">g_value_set_string</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">value</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">filename</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""k"">break</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">    </span><span class=""k"">case</span><span class=""w""> </span><span class=""no"">PROP_ZOOM_LEVEL</span><span class=""p"">:</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">g_value_set_uint</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">value</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">self</span><span class=""o"">-&gt;</span><span class=""n"">zoom_level</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""k"">break</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">    </span><span class=""k"">default</span><span class=""o"">:</span><span class=""w""></span>
<span class=""w"">      </span><span class=""cm"">/* We don't have any other property... */</span><span class=""w""></span>
<span class=""w"">      </span><span class=""n"">G_OBJECT_WARN_INVALID_PROPERTY_ID</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">object</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">property_id</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">pspec</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">      </span><span class=""k"">break</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">    </span><span class=""p"">}</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""k"">static</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">viewer_file_class_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">ViewerFileClass</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">klass</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">GObjectClass</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">object_class</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">G_OBJECT_CLASS</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">klass</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">object_class</span><span class=""o"">-&gt;</span><span class=""n"">set_property</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">viewer_file_set_property</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">object_class</span><span class=""o"">-&gt;</span><span class=""n"">get_property</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">viewer_file_get_property</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">obj_properties</span><span class=""p"">[</span><span class=""n"">PROP_FILENAME</span><span class=""p"">]</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">g_param_spec_string</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""filename""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                         </span><span class=""s"">""Filename""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                         </span><span class=""s"">""Name of the file to load and display from.""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                         </span><span class=""nb"">NULL</span><span class=""w"">  </span><span class=""cm"">/* default value */</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                         </span><span class=""n"">G_PARAM_CONSTRUCT_ONLY</span><span class=""w""> </span><span class=""o"">|</span><span class=""w""> </span><span class=""n"">G_PARAM_READWRITE</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">obj_properties</span><span class=""p"">[</span><span class=""n"">PROP_ZOOM_LEVEL</span><span class=""p"">]</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""></span>
<span class=""w"">    </span><span class=""n"">g_param_spec_uint</span><span class=""w""> </span><span class=""p"">(</span><span class=""s"">""zoom-level""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                       </span><span class=""s"">""Zoom level""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                       </span><span class=""s"">""Zoom level to view the file at.""</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                       </span><span class=""mi"">0</span><span class=""w"">  </span><span class=""cm"">/* minimum value */</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                       </span><span class=""mi"">10</span><span class=""w""> </span><span class=""cm"">/* maximum value */</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                       </span><span class=""mi"">2</span><span class=""w"">  </span><span class=""cm"">/* default value */</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                       </span><span class=""n"">G_PARAM_READWRITE</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_object_class_install_properties</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">object_class</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                     </span><span class=""n"">N_PROPERTIES</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                     </span><span class=""n"">obj_properties</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""c1"">// Use</span>

<span class=""n"">ViewerFile</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">file</span><span class=""p"">;</span><span class=""w""></span>
<span class=""n"">GValue</span><span class=""w""> </span><span class=""n"">val</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">G_VALUE_INIT</span><span class=""p"">;</span><span class=""w""></span>

<span class=""n"">file</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_object_new</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">VIEWER_TYPE_FILE</span><span class=""p"">,</span><span class=""w""> </span><span class=""nb"">NULL</span><span class=""p"">);</span><span class=""w""></span>

<span class=""n"">g_value_init</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">val</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">G_TYPE_UINT</span><span class=""p"">);</span><span class=""w""></span>
<span class=""n"">g_value_set_char</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">val</span><span class=""p"">,</span><span class=""w""> </span><span class=""mi"">11</span><span class=""p"">);</span><span class=""w""></span>

<span class=""n"">g_object_set_property</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_OBJECT</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">file</span><span class=""p"">),</span><span class=""w""> </span><span class=""s"">""zoom-level""</span><span class=""p"">,</span><span class=""w""> </span><span class=""o"">&amp;</span><span class=""n"">val</span><span class=""p"">);</span><span class=""w""></span>

<span class=""n"">g_value_unset</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">&amp;</span><span class=""n"">val</span><span class=""p"">);</span><span class=""w""></span>

g_object_set_property()
class_init
unsigned int
g_value_transform()
g_param_value_validate()
class_init
g_object_set_property()
g_object_set_property()
set_property
viewer_file_set_property
param_id
g_object_class_install_property()
set_property
g_object_set_property()
g_object_freeze_notify()
g_object_thaw_notify()
g_object_set_property()
g_object_get_property()
g_object_set()
g_object_set_valist()
<span class=""n"">ViewerFile</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">file</span><span class=""p"">;</span><span class=""w""></span>
<span class=""n"">file</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""cm"">/* */</span><span class=""p"">;</span><span class=""w""></span>
<span class=""n"">g_object_set</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">G_OBJECT</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">file</span><span class=""p"">),</span><span class=""w""></span>
<span class=""w"">              </span><span class=""s"">""zoom-level""</span><span class=""p"">,</span><span class=""w""> </span><span class=""mi"">6</span><span class=""p"">,</span><span class=""w""> </span>
<span class=""w"">              </span><span class=""s"">""filename""</span><span class=""p"">,</span><span class=""w""> </span><span class=""s"">""~/some-file.txt""</span><span class=""p"">,</span><span class=""w""> </span>
<span class=""w"">              </span><span class=""nb"">NULL</span><span class=""p"">);</span><span class=""w""></span>

g_object_set_property()
_get
g_object_get()
g_object_get_valist()
g_object_new()
g_object_newv()
g_object_new_valist()
g_object_set()
return_type function_callback (... , gpointer user_data);
user_data
GClosure
GClosure
g_closure_invoke()
g_closure_add_finalize_notifier()
g_closure_add_invalidate_notifier()
g_closure_add_marshal_guards()
g_closure_remove_finalize_notifier()
g_closure_remove_invalidate_notifier()
GCClosures
g_signal_connect()
g_cclosure_new()
callback_func
user_data
destroy_data
g_cclosure_new_swap()
callback_func
user_data
g_cclosure_new()
destroy_data
g_cclosure_marshal_generic()
void
<span class=""n"">g_cclosure_marshal_VOID__INT</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GClosure</span><span class=""w"">     </span><span class=""o"">*</span><span class=""n"">closure</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                              </span><span class=""n"">GValue</span><span class=""w"">       </span><span class=""o"">*</span><span class=""n"">return_value</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                              </span><span class=""n"">guint</span><span class=""w"">         </span><span class=""n"">n_param_values</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                              </span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GValue</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">param_values</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                              </span><span class=""n"">gpointer</span><span class=""w"">      </span><span class=""n"">invocation_hint</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                              </span><span class=""n"">gpointer</span><span class=""w"">      </span><span class=""n"">marshal_data</span><span class=""p"">)</span><span class=""w""></span>
<span class=""p"">{</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">typedef</span><span class=""w""> </span><span class=""kt"">void</span><span class=""w""> </span><span class=""p"">(</span><span class=""o"">*</span><span class=""n"">GMarshalFunc_VOID__INT</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">gpointer</span><span class=""w"">     </span><span class=""n"">data1</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                          </span><span class=""n"">gint</span><span class=""w"">         </span><span class=""n"">arg_1</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                                          </span><span class=""n"">gpointer</span><span class=""w"">     </span><span class=""n"">data2</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">register</span><span class=""w""> </span><span class=""n"">GMarshalFunc_VOID__INT</span><span class=""w""> </span><span class=""n"">callback</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">register</span><span class=""w""> </span><span class=""n"">GCClosure</span><span class=""w""> </span><span class=""o"">*</span><span class=""n"">cc</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GCClosure</span><span class=""o"">*</span><span class=""p"">)</span><span class=""w""> </span><span class=""n"">closure</span><span class=""p"">;</span><span class=""w""></span>
<span class=""w"">  </span><span class=""k"">register</span><span class=""w""> </span><span class=""n"">gpointer</span><span class=""w""> </span><span class=""n"">data1</span><span class=""p"">,</span><span class=""w""> </span><span class=""n"">data2</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">g_return_if_fail</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">n_param_values</span><span class=""w""> </span><span class=""o"">==</span><span class=""w""> </span><span class=""mi"">2</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">data1</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">g_value_peek_pointer</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">param_values</span><span class=""w""> </span><span class=""o"">+</span><span class=""w""> </span><span class=""mi"">0</span><span class=""p"">);</span><span class=""w""></span>
<span class=""w"">  </span><span class=""n"">data2</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""n"">closure</span><span class=""o"">-&gt;</span><span class=""n"">data</span><span class=""p"">;</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">callback</span><span class=""w""> </span><span class=""o"">=</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">GMarshalFunc_VOID__INT</span><span class=""p"">)</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">marshal_data</span><span class=""w""> </span><span class=""o"">?</span><span class=""w""> </span><span class=""n"">marshal_data</span><span class=""w""> </span><span class=""o"">:</span><span class=""w""> </span><span class=""n"">cc</span><span class=""o"">-&gt;</span><span class=""n"">callback</span><span class=""p"">);</span><span class=""w""></span>

<span class=""w"">  </span><span class=""n"">callback</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">data1</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">            </span><span class=""n"">g_marshal_value_peek_int</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">param_values</span><span class=""w""> </span><span class=""o"">+</span><span class=""w""> </span><span class=""mi"">1</span><span class=""p"">),</span><span class=""w""></span>
<span class=""w"">            </span><span class=""n"">data2</span><span class=""p"">);</span><span class=""w""></span>
<span class=""p"">}</span><span class=""w""></span>

<span class=""n"">return_type</span><span class=""w""></span>
<span class=""nf"">function_callback</span><span class=""w""> </span><span class=""p"">(</span><span class=""n"">gpointer</span><span class=""w""> </span><span class=""n"">instance</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                   </span><span class=""p"">...,</span><span class=""w""></span>
<span class=""w"">                   </span><span class=""n"">gpointer</span><span class=""w""> </span><span class=""n"">user_data</span><span class=""p"">);</span><span class=""w""></span>

g_signal_newv()
g_signal_new_valist()
g_signal_new()
<span class=""n"">guint</span><span class=""w""></span>
<span class=""nf"">g_signal_newv</span><span class=""w""> </span><span class=""p"">(</span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">gchar</span><span class=""w"">        </span><span class=""o"">*</span><span class=""n"">signal_name</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">GType</span><span class=""w"">               </span><span class=""n"">itype</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">GSignalFlags</span><span class=""w"">        </span><span class=""n"">signal_flags</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">GClosure</span><span class=""w"">           </span><span class=""o"">*</span><span class=""n"">class_closure</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">GSignalAccumulator</span><span class=""w"">  </span><span class=""n"">accumulator</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">gpointer</span><span class=""w"">            </span><span class=""n"">accu_data</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">GSignalCMarshaller</span><span class=""w"">  </span><span class=""n"">c_marshaller</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">GType</span><span class=""w"">               </span><span class=""n"">return_type</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">guint</span><span class=""w"">               </span><span class=""n"">n_params</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">               </span><span class=""n"">GType</span><span class=""w"">              </span><span class=""o"">*</span><span class=""n"">param_types</span><span class=""p"">);</span><span class=""w""></span>

signal_name
itype
signal_flags
class_closure
NULL
signal_flags
accumulator
FALSE
TRUE
NULL
accu_data
c_marshaller
return_type
n_params
param_types
n_params
g_signal_override_class_closure()
g_signal_connect()
g_signal_add_emission_hook()
g_signal_remove_emission_hook()
g_signal_emit()
<span class=""kt"">void</span><span class=""w""></span>
<span class=""nf"">g_signal_emitv</span><span class=""w""> </span><span class=""p"">(</span><span class=""k"">const</span><span class=""w""> </span><span class=""n"">GValue</span><span class=""w"">  </span><span class=""n"">instance_and_params</span><span class=""p"">[],</span><span class=""w""></span>
<span class=""w"">                </span><span class=""n"">guint</span><span class=""w"">         </span><span class=""n"">signal_id</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                </span><span class=""n"">GQuark</span><span class=""w"">        </span><span class=""n"">detail</span><span class=""p"">,</span><span class=""w""></span>
<span class=""w"">                </span><span class=""n"">GValue</span><span class=""w"">       </span><span class=""o"">*</span><span class=""n"">return_value</span><span class=""p"">);</span><span class=""w""></span>

instance_and_params
signal_id
detail
return_value
return_value
NULL
RUN_FIRST
G_SIGNAL_RUN_FIRST
EMISSION_HOOK
HANDLER_RUN_FIRST
g_signal_connect()
g_signal_handler_block()
RUN_LAST
G_SIGNAL_RUN_LAST
HANDLER_RUN_LAST
g_signal_connect_after()
HANDLER_RUN_FIRST
RUN_CLEANUP
G_SIGNAL_RUN_CLEANUP
RUN_CLEANUP
EMISSION_HOOK
g_signal_stop_emission()
RUN_CLEANUP
RUN_FIRST
RUN_EMISSION_HOOK
RUN_CLEANUP
TRUE
FALSE
TRUE
RUN_CLEANUP
g_signal_emit()
g_signal_connect_closure_by_id()
g_signal_connect_closure()
g_signal_connect_data()
detailed_signal
signal_name::detail_name
notify::cursor_position
notify
cursor_position
g_signal_emit_by_name()
g_signal_emit()
g_signal_emitv()
g_signal_emit_valist()
A generic type system to register arbitrary single-inherited flat and deep
  derived types as well as interfaces for structured types. It takes care of
  creation, initialization and memory management of the assorted object and
  class structures, maintains parent/child relationships and deals with
  dynamic implementations of such types. That is, their type specific
  implementations are relocatable/unloadable during&nbsp;runtime.
A collection of fundamental type implementations, such as integers,
  doubles, enums and structured types, to name a&nbsp;few.
A sample fundamental type implementation to base object hierarchies upon -
  the GObject fundamental&nbsp;type.
A signal system that allows very flexible user customization of
  virtual/overridable object methods and can serve as a powerful
  notification&nbsp;mechanism.
An extensible parameter/value system, supporting all the provided
  fundamental types that can be used to generically handle object properties
  or otherwise parameterized&nbsp;types.
object-oriented C-based APIs&nbsp;and
automatic transparent <span class=""caps"">API</span> bindings to other compiled or interpreted&nbsp;languages.
Find where the function is located. This probably means finding the binary
  generated by the C compiler which exports this&nbsp;function.
Load the code of the function in executable&nbsp;memory.
Convert the Python parameters to C-compatible parameters before calling
  the&nbsp;function.
Call the function with the right calling&nbsp;convention.
Convert the return values of the C function to Python-compatible variables
  to return them to the Python&nbsp;code.
The first solution is to write by hand a lot of glue code, once for each
  function exported or imported, which does the Python-to-C parameter
  conversion and the C-to-Python return value conversion. This glue code is
  then linked with the interpreter which allows Python programs to call
  Python functions which delegate work to C&nbsp;functions.
Another, nicer solution is to automatically generate the glue code, once
  for each function exported or imported, with a special compiler which
  reads the original function&nbsp;signature.
class size: the <code>class_size</code> field in <code>GTypeInfo</code>.
class initialization functions (C++ constructor): the <code>base_init</code> and
  <code>class_init</code> fields in <code>GTypeInfo</code>.
class destruction functions (C++ destructor): the <code>base_finalize</code> and
  <code>class_finalize</code> fields in <code>GTypeInfo</code>.
instance size (C++ parameter to new): the <code>instance_size</code> field in
  <code>GTypeInfo</code>.
instantiation policy (C++ type of new operator): the <code>n_preallocs</code> field
  in <code>GTypeInfo</code>.
copy functions (C++ copy operators): the <code>value_table</code> field in
  <code>GTypeInfo</code>.
type characteristic flags: <code>GTypeFlags</code>.
Type names (including object names) must be at least three characters long
  and start with “a–z”, “A–Z” or&nbsp;“_”.
Use the <code>object_method</code> pattern for function names: to invoke the method
  named save on an instance of object type file, call <code>file_save</code>.
Use prefixing to avoid namespace conflicts with other projects. If your
  library (or application) is named <code>Viewer</code>, prefix all your function names
  with viewer_. For example: <code>viewer_object_method</code>.
Create a macro named <code>PREFIX_TYPE_OBJECT</code> which always returns the GType
  for the associated object type. For an object of type <code>File</code> in the
  <code>Viewer</code> namespace, use: <code>VIEWER_TYPE_FILE</code>. This macro is implemented
  using a function named <code>prefix_object_get_type</code>; for example,
  <code>viewer_file_get_type</code>.
Use <code>G_DECLARE_FINAL_TYPE</code> or <code>G_DECLARE_DERIVABLE_TYPE</code> to define various
  other conventional macros for your&nbsp;object:
<code>PREFIX_OBJECT (obj)</code>, which returns a pointer of type <code>PrefixObject</code>.
    This macro is used to enforce static type safety by doing explicit casts
    wherever needed. It also enforces dynamic type safety by doing runtime
    checks. It is possible to disable the dynamic type checks in production
    builds (see “Building GLib” section in the GLib <span class=""caps"">API</span> reference). For
    example, we would create <code>VIEWER_FILE (obj)</code> to keep the previous&nbsp;example.
<code>PREFIX_OBJECT_CLASS (klass)</code>, which is strictly equivalent to the
    previous casting macro: it does static casting with dynamic type
    checking of class structures. It is expected to return a pointer to a
    class structure of type <code>PrefixObjectClass</code>. An example is:
    <code>VIEWER_FILE_CLASS</code>.
<code>PREFIX_IS_OBJECT (obj)</code>, which returns a gboolean which indicates
    whether the input object instance pointer is non-<code>NULL</code> and of type
    <code>OBJECT</code>. For example, <code>VIEWER_IS_FILE</code>.
<code>PREFIX_IS_OBJECT_CLASS (klass)</code>, which returns a boolean if the input
    class pointer is a pointer to a class of type <code>OBJECT</code>. For example,
    <code>VIEWER_IS_FILE_CLASS</code>.
<code>PREFIX_OBJECT_GET_CLASS (obj)</code>, which returns the class pointer
    associated to an instance of a given type. This macro is used for static
    and dynamic type safety purposes (just like the previous casting
    macros). For example, <code>VIEWER_FILE_GET_CLASS</code>.
memory management with reference&nbsp;counting
construction/Destruction of&nbsp;instances
generic per-object properties with set/get function&nbsp;pairs
easy use of&nbsp;signals
allocate and clear memory through <code>g_type_create_instance()</code>
initialize the object’s instance with the construction&nbsp;properties.
a function pointer (the callback itself) whose prototype looks like:
  <code>return_type function_callback (... , gpointer user_data);</code>
the <code>user_data</code> pointer which is passed to the callback upon invocation of
  the&nbsp;closure
a function pointer which represents the destructor of the closure:
  whenever the closure’s refcount reaches zero, this function will be called
  before the closure structure is&nbsp;freed
invocation (<code>g_closure_invoke()</code>): this is what closures were created for;
  they hide the details of callback invocation from the callback&nbsp;invoker.
notification: the closure notifies listeners of certain events such as
  closure invocation, closure invalidation and closure finalization.
  Listeners can be registered with <code>g_closure_add_finalize_notifier()</code>
  (finalization notification), <code>g_closure_add_invalidate_notifier()</code>
  (invalidation notification) and <code>g_closure_add_marshal_guards()</code>
  (invocation notification). There exist symmetric deregistration functions
  for finalization and invalidation events
  (<code>g_closure_remove_finalize_notifier()</code> and
  <code>g_closure_remove_invalidate_notifier()</code>) but not for the invocation&nbsp;process
<code>signal_name</code>: is a string which can be used to uniquely identify a given&nbsp;signal
<code>itype</code>: is the instance type on which this signal can be&nbsp;emitted
<code>signal_flags</code>: partly defines the order in which closures which were
  connected to the signal are&nbsp;invoked
<code>class_closure</code>: this is the default closure for the signal: if it is not
  <code>NULL</code> upon the signal emission, it will be invoked upon this emission of
  the signal. The moment where this closure is invoked compared to other
  closures connected to that signal depends partly on the <code>signal_flags</code>
<code>accumulator</code>: this is a function pointer which is invoked after each
  closure has been invoked. If it returns <code>FALSE</code>, signal emission is stopped.
  If it returns <code>TRUE</code>, signal emission proceeds normally. It is also used to
  compute the return value of the signal based on the return value of all
  the invoked closures. For example, an accumulator could ignore <code>NULL</code>
  returns from closures; or it could build a list of the values returned by
  the&nbsp;closures
<code>accu_data</code>: this pointer will be passed down to each invocation of the
  accumulator during&nbsp;emission
<code>c_marshaller</code>: this is the default C marshaller for any closure which is
  connected to this&nbsp;signal
<code>return_type</code>: this is the type of the return value of the&nbsp;signal
<code>n_params</code>: this is the number of parameters this signal&nbsp;takes
<code>param_types</code>: this is an array of GTypes which indicate the type of each
  parameter of the signal. The length of this array is indicated by
  <code>n_params</code>.
you can register a class closure at signal registration: this is a
  system-wide operation. i.e.: the class closure will be invoked during each
  emission of a given signal on any of the instances of the type which
  supports that&nbsp;signal
you can use <code>g_signal_override_class_closure()</code> which overrides the class
  closure of a given type. It is possible to call this function only on a
  derived type of the type on which the signal was registered. This function
  is of use only to language&nbsp;bindings
you can register a closure with the <code>g_signal_connect()</code> family of
  functions. This is an instance-specific operation: the closure will be
  invoked only during emission of a given signal on a given&nbsp;instance
the <code>instance_and_params</code> array of GValues contains the list of input
  parameters to the signal. The first element of the array is the instance
  pointer on which to invoke the signal. The following elements of the array
  contain the list of parameters to the&nbsp;signal
<code>signal_id</code> identifies the signal to&nbsp;invoke
<code>detail</code> identifies the specific detail of the signal to invoke. A detail
  is a kind of magic token/argument which is passed around during signal
  emission and which is used by closures connected to the signal to filter
  out unwanted signal emissions. In most cases, you can safely set this
  value to zero. See the section called “The detail argument” for more
  information about this&nbsp;parameter
<code>return_value</code> holds the return value of the last closure invoked during
  emission if no accumulator was specified. If an accumulator was specified
  during signal creation, this accumulator is used to calculate the return
  value as a function of the return values of all the closures invoked
  during emission. If no closure is invoked during emission, the
  <code>return_value</code> is nonetheless initialized to zero/<code>NULL</code>
<code>RUN_FIRST</code>: if the <code>G_SIGNAL_RUN_FIRST</code> flag was used during signal
   registration and if there exists a class closure for this signal, the
   class closure is&nbsp;invoked.
<code>EMISSION_HOOK</code>: if any emission hook was added to the signal, they are
   invoked from first to last added. Accumulate return&nbsp;values.
<code>HANDLER_RUN_FIRST</code>: if any closure were connected with the
   <code>g_signal_connect()</code> family of functions, and if they are not blocked
   (with the <code>g_signal_handler_block()</code> family of functions) they are run
   here, from first to last&nbsp;connected.
<code>RUN_LAST</code>: if the <code>G_SIGNAL_RUN_LAST</code> flag was set during registration
   and if a class closure was set, it is invoked&nbsp;here.
<code>HANDLER_RUN_LAST</code>: if any closure were connected with the
   <code>g_signal_connect_after()</code> family of functions, if they were not invoked
   during <code>HANDLER_RUN_FIRST</code> and if they are not blocked, they are run
   here, from first to last&nbsp;connected.
<code>RUN_CLEANUP</code>: if the <code>G_SIGNAL_RUN_CLEANUP</code> flag was set during
   registration and if a class closure was set, it is invoked here. Signal
   emission is completed&nbsp;here.
<a href=""#introduction""><span class=""link-text"">Introduction</span></a>
<a href=""#background""><span class=""link-text"">Background</span></a>
<a href=""#the-glib-dynamic-type-system""><span class=""link-text"">The GLib Dynamic Type System</span></a>
<a href=""#copy-functions""><span class=""link-text"">Copy functions</span></a>
<a href=""#conventions""><span class=""link-text"">Conventions</span></a>
<a href=""#non-instantiatable-non-classed-fundamental-types""><span class=""link-text"">Non-instantiatable non-classed fundamental types</span></a>
<a href=""#instantiatable-classed-types-objects""><span class=""link-text"">Instantiatable classed types: objects</span></a>
<a href=""#non-instantiatable-classed-types-interfaces""><span class=""link-text"">Non-instantiatable classed types: interfaces</span></a>
<a href=""#the-gobject-base-class""><span class=""link-text"">The GObject base class</span></a>
<a href=""#the-gobject-messaging-system""><span class=""link-text"">The GObject messaging system</span></a>

  <colgroup>
  <col align=""left"">
  <col align=""left"">
  <col align=""left"">
  </colgroup>
  <thead><tr>
  <th align=""left"">Invocation time</th>
  <th align=""left"">Function invoked</th>
  <th align=""left"">Function’s parameters</th>
  </tr></thead>
  <tbody>
  <tr>
  <td align=""left"" rowspan=""3"">First call to <code class=""function"">g_type_create_instance()</code> for target type</td>
  <td align=""left"">type’s <code class=""function"">base_init</code> function</td>
  <td align=""left"">On the inheritance tree of classes from fundamental type to target type. <code class=""function"">base_init</code> is invoked once for each class structure.</td>
  </tr>
  <tr>
  <td align=""left"">target type’s <code class=""function"">class_init</code> function</td>
  <td align=""left"">On target type’s class structure</td>
  </tr>
  <tr>
  <td align=""left"">interface initialization, see the section called “Interface Initialization”</td>
  <td align=""left""></td>
  </tr>
  <tr>
  <td align=""left"">Each call to <code class=""function"">g_type_create_instance()</code> for target type</td>
  <td align=""left"">target type’s <code class=""function"">instance_init</code> function</td>
  <td align=""left"">On object’s instance</td>
  </tr>
  <tr>
  <td rowspan=""3"" align=""left"">Last call to <code class=""function"">g_type_free_instance()</code> for target type</td>
  <td align=""left"">interface destruction, see the section called “Interface Destruction”</td>
  <td align=""left""></td>
  </tr>
  <tr>
  <td align=""left"">target type’s <code class=""function"">class_finalize</code> function</td>
  <td align=""left"">On target type’s class structure</td>
  </tr>
  <tr>
  <td align=""left"">type’s <code class=""function"">base_finalize</code> function</td>
  <td align=""left"">On the inheritance tree of classes from fundamental type to target type. <code class=""function"">base_finalize</code> is invoked once for each class structure.</td>
  </tr>
  </tbody>


  <colgroup>
  <col align=""left"">
  <col align=""left"">
  <col align=""left"">
  </colgroup>
  <thead><tr>
  <th align=""left"">Invocation time</th>
  <th align=""left"">Function Invoked</th>
  <th align=""left"">Function’s parameters</th>
  <th>Remark</th>
  </tr></thead>
  <tbody>
  <tr>
  <td align=""left"">First call to <code class=""function"">g_type_create_instance()</code> for <span class=""emphasis""><em>any</em></span> type implementing interface</td>
  <td align=""left"">interface’s <code class=""function"">base_init</code> function</td>
  <td align=""left"">On interface’s vtable</td>
  <td>Rarely necessary to use this. Called once per instantiated classed type implementing the interface.</td>
  </tr>
  <tr>
  <td align=""left"">First call to <code class=""function"">g_type_create_instance()</code> for <span class=""emphasis""><em>each</em></span> type implementing interface</td>
  <td align=""left"">interface’s <code class=""function"">default_init</code> function</td>
  <td align=""left"">On interface’s vtable</td>
  <td>Register interface’s signals, properties, etc. here. Will be called once.</td>
  </tr>
  <tr>
  <td align=""left"">First call to <code class=""function"">g_type_create_instance()</code> for <span class=""emphasis""><em>any</em></span> type implementing interface</td>
  <td align=""left"">implementation’s <code class=""function"">interface_init</code> function</td>
  <td align=""left"">On interface’s vtable</td>
  <td>Initialize interface implementation. Called for each class that that implements the interface. Initialize the interface method pointers in the interface structure to the implementing class’s implementation.</td>
  </tr>
  </tbody>


  <colgroup>
  <col align=""left"">
  <col align=""left"">
  <col align=""left"">
  </colgroup>
  <thead><tr>
  <th align=""left"">Invocation time</th>
  <th align=""left"">Function Invoked</th>
  <th align=""left"">Function’s parameters</th>
  </tr></thead>
  <tbody>
  <tr>
  <td rowspan=""2"" align=""left"">Last call to <code class=""function"">g_type_free_instance()</code> for type implementing interface</td>
  <td align=""left"">interface’s <code class=""function"">interface_finalize</code> function</td>
  <td align=""left"">On interface’s vtable</td>
  </tr>
  <tr>
  <td align=""left"">interface’s <code class=""function"">base_finalize</code> function</td>
  <td align=""left"">On interface’s vtable</td>
  </tr>
  </tbody>


  <colgroup>
  <col align=""left"">
  <col align=""left"">
  <col align=""left"">
  </colgroup>
  <thead><tr>
  <th align=""left"">Invocation time</th>
  <th align=""left"">Function invoked</th>
  <th align=""left"">Function’s parameters</th>
  <th>Remark</th>
  </tr></thead>
  <tbody>
  <tr>
  <td rowspan=""4"" align=""left"">First call to <code class=""function"">g_object_new()</code> for target type</td>
  <td align=""left"">target type’s <code class=""function"">base_init</code> function</td>
  <td align=""left"">On the inheritance tree of classes from fundamental type to target type. <code class=""function"">base_init</code> is invoked once for each class structure.</td>
  <td>Never used in practice. Unlikely you will need it.</td>
  </tr>
  <tr>
  <td align=""left"">target type’s <code class=""function"">class_init</code> function</td>
  <td align=""left"">On target type’s class structure</td>
  <td>Here, you should make sure to initialize or override class methods (that is, assign to each class’ method its function pointer) and create the signals and the properties associated to your object.</td>
  </tr>
  <tr>
  <td align=""left"">interface’s <code class=""function"">base_init</code> function</td>
  <td align=""left"">On interface’s vtable</td>
  <td></td>
  </tr>
  <tr>
  <td align=""left"">interface’s <code class=""function"">interface_init</code> function</td>
  <td align=""left"">On interface’s vtable</td>
  <td></td>
  </tr>
  <tr>
  <td align=""left"" rowspan=""3"">Each call to <code class=""function"">g_object_new()</code> for target type</td>
  <td align=""left"">target type’s class <code class=""function"">constructor</code> method: <code class=""function"">GObjectClass-&gt;constructor</code>
  </td>
  <td align=""left"">On object’s instance</td>
  <td>If you need to handle construct properties in a custom way, or implement a singleton class, override the constructor method and make sure to chain up to the object’s parent class before doing your own initialization. In doubt, do not override the constructor method.</td>
  </tr>
  <tr>
  <td align=""left"">type’s <code class=""function"">instance_init</code> function</td>
  <td align=""left"">On the inheritance tree of classes from fundamental type to target type. The <code class=""function"">instance_init</code> provided for each type is invoked once for each instance structure.</td>
  <td>Provide an <code class=""function"">instance_init</code> function to initialize your object before its construction properties are set. This is the preferred way to initialize a GObject instance. This function is equivalent to C++ constructors.</td>
  </tr>
  <tr>
  <td align=""left"">target type’s class <code class=""function"">constructed</code> method: <code class=""function"">GObjectClass-&gt;constructed</code></td>
  <td align=""left"">On object’s instance</td>
  <td>If you need to perform object initialization steps after all construct properties have been set. This is the final step in the object initialization process, and is only called if the <code class=""function"">constructor</code> method returned a new object instance (rather than, for example, an existing singleton).</td>
  </tr>
  </tbody>


  <colgroup>
  <col align=""left"">
  <col align=""left"">
  <col align=""left"">
  </colgroup>
  <thead><tr>
  <th align=""left"">Invocation time</th>
  <th align=""left"">Function invoked</th>
  <th align=""left"">Function’s parameters</th>
  <th>Remark</th>
  </tr></thead>
  <tbody>
  <tr>
  <td rowspan=""2"" align=""left"">Last call to <code class=""function"">g_object_unref()</code> for an instance of target type</td>
  <td align=""left"">target type’s dispose class function</td>
  <td align=""left"">GObject instance</td>
  <td>When dispose ends, the object should not hold any reference to any other member object. The object is also expected to be able to answer client method invocations (with possibly an error code but no memory violation) until finalize is executed. dispose can be executed more than once. dispose should chain up to its parent implementation just before returning to the caller.</td>
  </tr>
  <tr>
  <td align=""left"">target type’s finalize class function</td>
  <td align=""left"">GObject instance</td>
  <td>Finalize is expected to complete the destruction process initiated by dispose. It should complete the object’s destruction. finalize will be executed only once. finalize should chain up to its parent implementation just before returning to the caller. See the section on “Reference counts and cycles” for more information.</td>
  </tr>
  <tr>
  <td align=""left"" rowspan=""4"">Last call to <code class=""function"">g_object_unref()</code> for the last instance of target type</td>
  <td align=""left"">interface’s <code class=""function"">interface_finalize</code> function</td>
  <td align=""left"">On interface’s vtable</td>
  <td>Never used in practice. Unlikely you will need it.</td>
  </tr>
  <tr>
  <td align=""left"">interface’s <code class=""function"">base_finalize</code> function</td>
  <td align=""left"">On interface’s vtable</td>
  <td>Never used in practice. Unlikely you will need it.</td>
  </tr>
  <tr>
  <td align=""left"">target type’s <code class=""function"">class_finalize</code> function</td>
  <td align=""left"">On target type’s class structure</td>
  <td>Never used in practice. Unlikely you will need it.</td>
  </tr>
  <tr>
  <td align=""left"">type’s <code class=""function"">base_finalize</code> function</td>
  <td align=""left"">On the inheritance tree of classes from fundamental type to target type. <code class=""function"">base_init</code> is invoked once for each class structure.</td>
  <td>Never used in practice. Unlikely you will need it.</td>
  </tr>
  </tbody>

"
https://gstreamer.freedesktop.org/documentation/deploying/index.html?gi-language=c,Deploying your application,"Once the development of your application is finished, you will need to
deploy it to the target machine, usually in the form of a package or
installer. You have several options here, and, even though this subject
is not really in the scope of this documentation, we will give some
hints to try to help you.
The first choice you need to make is whether you want to deploy your
application to more than one platform. If yes, then you have the choice
to use a different packaging system for each platform, or use one that
can deliver to all platforms simultaneously. This table summarizes the
pros and cons of each option.
<strong>Multiplatform packaging system</strong>
The same system is used to package your application for all platforms
You only need to develop your packaging system once, and it works for all supported platforms.
<strong>Single-platform packaging system</strong>
Your application is packaged using a different system on each platform.
You can make use of all the advantages each packaging system can offer.
You need to develop a new packaging system for each supported platform.
GStreamer itself supports many different platforms (Linux, iOS, Android, Mac
OS X, Windows, etc) and has been built using a multiplatform packaging
system named <strong>Cerbero</strong>, which is available for you to use, should you
choose to go down this route.
You can install GStreamer in the target machine in the same way
you installed it in your development machine, you can deploy it
privately, or you can even customize it before deploying. Here you have
a few options:
<strong>Shared GStreamer</strong>
GStreamer is installed independently of your application, as a prerequisite, in a common place in the target computer (<code>C:\Program Files</code>, for example). You application uses an environment variable to locate it.
<strong>Private GStreamer with dynamic linking</strong>
Your application deploys GStreamer to a private folder.
<strong>Private GStreamer with static linking</strong>
Your application links statically against GStreamer, so it effectively becomes part of your application binary.
The following pages give further directions for some of the above
options.
<b>Subpages:</b>

			<a href=""deploying/mac-osx.html"">Mac OS X deployment</a>
						

			<a href=""deploying/windows.html"">Windows deployment</a>
						

			<a href=""deploying/multiplatform-using-cerbero.html"">Multiplatform deployment using Cerbero</a>
						
The results of the search are
C:\Program Files

    <a data-toggle=""dropdown"" aria-haspopup=""true"" class=""dropdown-toggle"" aria-expanded=""false"" role=""button"">
        API References<span class=""caret""></span>
    </a>
	<ul id=""modules-menu"" class=""dropdown-menu"">
					<li>
				<a href=""gstreamer/gi-index.html"">GStreamer core</a>
			</li>
					<li>
				<a href=""libs.html"">GStreamer Libraries</a>
			</li>
					<li>
				<a href=""plugins_doc.html"">GStreamer Plugins</a>
			</li>
		</ul>


				<a href=""gstreamer/gi-index.html"">GStreamer core</a>
			

				<a href=""libs.html"">GStreamer Libraries</a>
			

				<a href=""plugins_doc.html"">GStreamer Plugins</a>
			

    <a href=""application-development/index.html"">Application manual</a>


    <a href=""tutorials/index.html"">Tutorials</a>

<p>You only need to develop your packaging system once, and it works for all supported platforms.</p>
On some platforms, the packaging system might impose artificial restrictions inherited from the other platforms.

<p>You can make use of all the advantages each packaging system can offer.</p>

<p>You need to develop a new packaging system for each supported platform.</p>
If more than one application in the target computer uses GStreamer, it is installed only once and shared, reducing disk usage.
Tampering or corruption of the shared GStreamer installation can make your application fail.
Your GStreamer is independent of other applications, so it does not get corrupted if other applications mess with their installations.
If multiple applications in the target computer use GStreamer, it won’t be shared, consuming more disk space.
Your GStreamer is independent of other applications, so it does not get corrupted if other applications mess with their installations.
Deployment for ordinary users is easier as you have fewer files.
This is your only choice on iOS.
If multiple applications in the target computer use GStreamer, it won’t be shared, consuming more disk space.
You need to provide the required files for your users to re-link your application against a modified GStreamer as required by the license.
Platform-specific packaging methods:
<ul>
<li>For <a href=""deploying/mac-osx.html"">Mac OS X</a>
</li>
<li>For <a href=""deploying/windows.html"">Windows</a>
</li>
</ul>

For <a href=""deploying/mac-osx.html"">Mac OS X</a>

For <a href=""deploying/windows.html"">Windows</a>

<a href=""deploying/multiplatform-using-cerbero.html"">Multiplatform deployment using
Cerbero</a>

<colgroup>
<col width=""33%"">
<col width=""33%"">
<col width=""33%"">
</colgroup>
<thead>
<tr class=""header"">
<th>&nbsp;</th>
<th>Pros</th>
<th>Cons</th>
</tr>
</thead>
<tbody>
<tr class=""odd"">
<td>
<p><strong>Multiplatform packaging system</strong></p>
<p>The same system is used to package your application for all platforms</p>
</td>
<td><ul>
<li><p>You only need to develop your packaging system once, and it works for all supported platforms.</p></li>
</ul></td>
<td><ul>
<li>On some platforms, the packaging system might impose artificial restrictions inherited from the other platforms.</li>
</ul></td>
</tr>
<tr class=""even"">
<td>
<p><strong>Single-platform packaging system</strong></p>
<p>Your application is packaged using a different system on each platform.</p>
</td>
<td><ul>
<li>
<p>You can make use of all the advantages each packaging system can offer.</p>
</li>
</ul></td>
<td><ul>
<li><p>You need to develop a new packaging system for each supported platform.</p></li>
</ul></td>
</tr>
</tbody>


<colgroup>
<col width=""33%"">
<col width=""33%"">
<col width=""33%"">
</colgroup>
<thead>
<tr class=""header"">
<th></th>
<th>Pros</th>
<th>Cons</th>
</tr>
</thead>
<tbody>
<tr class=""odd"">
<td>
<p><strong>Shared GStreamer</strong></p>
<p>GStreamer is installed independently of your application, as a prerequisite, in a common place in the target computer (<code>C:\Program Files</code>, for example). You application uses an environment variable to locate it.</p>
</td>
<td><ul>
<li>If more than one application in the target computer uses GStreamer, it is installed only once and shared, reducing disk usage.</li>
</ul></td>
<td><ul>
<li>Tampering or corruption of the shared GStreamer installation can make your application fail.</li>
</ul></td>
</tr>
<tr class=""even"">
<td>
<p><strong>Private GStreamer with dynamic linking</strong></p>
<p>Your application deploys GStreamer to a private folder.</p>
</td>
<td><ul>
<li>Your GStreamer is independent of other applications, so it does not get corrupted if other applications mess with their installations.</li>
</ul></td>
<td><ul>
<li>If multiple applications in the target computer use GStreamer, it won’t be shared, consuming more disk space.</li>
</ul></td>
</tr>
<tr class=""odd"">
<td>
<p><strong>Private GStreamer with static linking</strong></p>
<p>Your application links statically against GStreamer, so it effectively becomes part of your application binary.</p>
</td>
<td><ul>
<li>Your GStreamer is independent of other applications, so it does not get corrupted if other applications mess with their installations.</li>
<li>Deployment for ordinary users is easier as you have fewer files.</li>
<li>This is your only choice on iOS.</li>
</ul></td>
<td><ul>
<li>If multiple applications in the target computer use GStreamer, it won’t be shared, consuming more disk space.</li>
<li>You need to provide the required files for your users to re-link your application against a modified GStreamer as required by the license.</li>
</ul></td>
</tr>
</tbody>

"
https://gstreamer.freedesktop.org/documentation/?gi-language=c,"GStreamer: a flexible, fast and multiplatform multimedia framework","
GStreamer is an extremely powerful and versatile framework for creating
streaming media applications. Many of the virtues of the GStreamer
framework come from its modularity: GStreamer can seamlessly incorporate
new plugin modules. But because modularity and power often come at a
cost of greater complexity, writing new applications is not always easy.
    
<b>Subpages:</b>

			<a href=""installing/index.html"">Installing GStreamer</a>
							– Download and install GStreamer
						

			<a href=""tutorials/index.html"">Tutorials</a>
							– Learn how to use GStreamer
						

			<a href=""application-development/index.html"">Application Development Manual</a>
							– Complete walkthrough for building an application using GStreamer
						

			<a href=""plugin-development/index.html"">Plugin Writer's Guide</a>
							– Complete walkthrough for writing your very own GStreamer plugin
						

			<a href=""frequently-asked-questions/index.html"">Frequently Asked Questions</a>
						

			<a href=""deploying/index.html"">Deploying your application</a>
							– Deploy GStreamer with your application
						

			<a href=""contribute/index.html"">Contributing to GStreamer</a>
							– Contributing to GStreamer
						

			<a href=""additional/index.html"">Additional documentation</a>
						

			<a href=""tools/index.html"">Command line tools</a>
							– Command line tools
						

			<a href=""libs.html"">API reference</a>
							– All the GStreamer libraries from the various components
						

			<a href=""plugins_doc.html"">Plugins</a>
							– All the GStreamer plugins from its various components
						
The results of the search are

    <a role=""button"" class=""dropdown-toggle"" data-toggle=""dropdown"" aria-haspopup=""true"" aria-expanded=""false"">
        API References<span class=""caret""></span>
    </a>
	<ul class=""dropdown-menu"" id=""modules-menu"">
					<li>
				<a href=""gstreamer/gi-index.html"">GStreamer core</a>
			</li>
					<li>
				<a href=""libs.html"">GStreamer Libraries</a>
			</li>
					<li>
				<a href=""plugins_doc.html"">GStreamer Plugins</a>
			</li>
		</ul>


				<a href=""gstreamer/gi-index.html"">GStreamer core</a>
			

				<a href=""libs.html"">GStreamer Libraries</a>
			

				<a href=""plugins_doc.html"">GStreamer Plugins</a>
			

    <a href=""application-development/index.html"">Application manual</a>


    <a href=""tutorials/index.html"">Tutorials</a>

"
https://gstreamer.freedesktop.org/documentation/application-development/basics/pads.html?gi-language=c,Pads and capabilities,"As we have seen in <a href=""application-development/basics/elements.html"">Elements</a>, the pads are the
element's interface to the outside world. Data streams from one
element's source pad to another element's sink pad. The specific type of
media that the element can handle will be exposed by the pad's
capabilities. We will talk more on capabilities later in this chapter
(see <a href=""application-development/basics/pads.html#capabilities-of-a-pad"">Capabilities of a pad</a>).
A pad type is defined by two properties: its direction and its
availability. As we've mentioned before, GStreamer defines two pad
directions: source pads and sink pads. This terminology is defined from
the view of within the element: elements receive data on their sink pads
and generate data on their source pads. Schematically, sink pads are
drawn on the left side of an element, whereas source pads are drawn on
the right side of an element. In such graphs, data flows from left to
right. [1]
Pad directions are very simple compared to pad availability. A pad can
have any of three availabilities: always, sometimes and on request. The
meaning of those three types is exactly as it says: always pads always
exist, sometimes pads exist only in certain cases (and can disappear
randomly), and on-request pads appear only if explicitly requested by
applications.
Some elements might not have all of their pads when the element is
created. This can happen, for example, with an Ogg demuxer element. The
element will read the Ogg stream and create dynamic pads for each
contained elementary stream (vorbis, theora) when it detects such a
stream in the Ogg stream. Likewise, it will delete the pad when the
stream ends. This principle is very useful for demuxer elements, for
example.
Running <code>gst-inspect-1.0 oggdemux</code> will show that the element has only one
pad: a sink pad called 'sink'. The other pads are “dormant”. You can see
this in the pad template because there is an “Availability: Sometimes”
property. Depending on the type of Ogg file you play, the pads will be
created. We will see that this is very important when you are going to
create dynamic pipelines. You can attach a signal handler to an element
to inform you when the element has created a new pad from one of its
“sometimes” pad templates. The following piece of code is an example
of how to do this:
It is not uncommon to add elements to the pipeline only from within the
""pad-added"" callback. If you do this, don't forget to set the state of
the newly-added elements to the target state of the pipeline using
<code>gst_element_set_state ()</code> or <code>gst_element_sync_state_with_parent ()</code>.
An element can also have request pads. These pads are not created
automatically but are only created on demand. This is very useful for
multiplexers, aggregators and tee elements. Aggregators are elements
that merge the content of several input streams together into one output
stream. Tee elements are the reverse: they are elements that have one
input stream and copy this stream to each of their output pads, which
are created on request. Whenever an application needs another copy of
the stream, it can simply request a new output pad from the tee element.
The following piece of code shows how you can request a new output pad
from a “tee” element:
The <code>gst_element_request_pad_simple ()</code> method can be used to get a pad
from the element based on the name of the pad template. It is also
possible to request a pad that is compatible with another pad template.
This is very useful if you want to link an element to a multiplexer
element and you need to request a pad that is compatible. The method
<code>gst_element_get_compatible_pad ()</code> can be used to request a compatible
pad, as shown in the next example. It will request a compatible pad from
an Ogg multiplexer from any input.
Since the pads play a very important role in how the element is viewed
by the outside world, a mechanism is implemented to describe the data
that can flow or currently flows through the pad by using capabilities.
Here, we will briefly describe what capabilities are and how to use
them, enough to get an understanding of the concept. For an in-depth
look into capabilities and a list of all capabilities defined in
GStreamer, see the <a href=""plugin-development/index.html"">Plugin Writers Guide</a>
Capabilities are attached to pad templates and to pads. For pad
templates, it will describe the types of media that may stream over a
pad created from this template. For pads, it can either be a list of
possible caps (usually a copy of the pad template's capabilities), in
which case the pad is not yet negotiated, or it is the type of media
that currently streams over this pad, in which case the pad has been
negotiated already.
A pad's capabilities are described in a <code>GstCaps</code> object. Internally, a
<a href=""http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer/html/GstCaps.html""><code>GstCaps</code></a>
will contain one or more
<a href=""http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer/html/GstStructure.html""><code>GstStructure</code></a>
that will describe one media type. A negotiated pad will have
capabilities set that contain exactly <em>one</em> structure. Also, this
structure will contain only <em>fixed</em> values. These constraints are not
true for unnegotiated pads or pad templates.
As an example, below is a dump of the capabilities of the “vorbisdec”
element, which you will get by running <code>gst-inspect vorbisdec</code>. You will
see two pads: a source and a sink pad. Both of these pads are always
available, and both have capabilities attached to them. The sink pad
will accept vorbis-encoded audio data, with the media type
“audio/x-vorbis”. The source pad will be used to send raw (decoded)
audio samples to the next element, with a raw audio media type (in this
case, “audio/x-raw”). The source pad will also contain properties for
the audio samplerate and the amount of channels, plus some more that you
don't need to worry about for now.
Properties are used to describe extra information for capabilities. A
property consists of a key (a string) and a value. There are different
possible value types that can be used:
Basic types, this can be pretty much any <code>GType</code> registered with
Glib. Those properties indicate a specific, non-dynamic value for
this property. Examples include:
An integer value (<code>G_TYPE_INT</code>): the property has this exact
value.
A boolean value (<code>G_TYPE_BOOLEAN</code>): the property is either <code>TRUE</code>
or <code>FALSE</code>.
A float value (<code>G_TYPE_FLOAT</code>): the property has this exact
floating point value.
A string value (<code>G_TYPE_STRING</code>): the property contains a UTF-8
string.
A fraction value (<code>GST_TYPE_FRACTION</code>): contains a fraction
expressed by an integer numerator and denominator.
Range types are <code>GType</code>s registered by GStreamer to indicate a range
of possible values. They are used for indicating allowed audio
samplerate values or supported video sizes. The two types defined in
GStreamer are:
An integer range value (<code>GST_TYPE_INT_RANGE</code>): the property
denotes a range of possible integers, with a lower and an upper
boundary. The “vorbisdec” element, for example, has a rate
property that can be between 8000 and 50000.
A float range value (<code>GST_TYPE_FLOAT_RANGE</code>): the property
denotes a range of possible floating point values, with a lower
and an upper boundary.
A fraction range value (<code>GST_TYPE_FRACTION_RANGE</code>): the property
denotes a range of possible fraction values, with a lower and an
upper boundary.
A list value (<code>GST_TYPE_LIST</code>): the property can take any value from
a list of basic values given in this list.
Example: caps that express that either a sample rate of 44100 Hz and
a sample rate of 48000 Hz is supported would use a list of integer
values, with one value being 44100 and one value being 48000.
An array value (<code>GST_TYPE_ARRAY</code>): the property is an array of
values. Each value in the array is a full value on its own, too. All
values in the array should be of the same elementary type. This
means that an array can contain any combination of integers, lists
of integers, integer ranges together, and the same for floats or
strings, but it can not contain both floats and ints at the same
time.
Example: for audio where there are more than two channels involved
the channel layout needs to be specified (for one and two channel
audio the channel layout is implicit unless stated otherwise in the
caps). So the channel layout would be an array of integer enum
values where each enum value represents a loudspeaker position.
Unlike a <code>GST_TYPE_LIST</code>, the values in an array will be interpreted
as a whole.
Capabilities (short: caps) describe the type of data that is streamed
between two pads, or that one pad (template) supports. This makes them
very useful for various purposes:
Autoplugging: automatically finding elements to link to a pad based
on its capabilities. All autopluggers use this method.
Compatibility detection: when two pads are linked, GStreamer can
verify if the two pads are talking about the same media type. The
process of linking two pads and checking if they are compatible is
called “caps negotiation”.
Metadata: by reading the capabilities from a pad, applications can
provide information about the type of media that is being streamed
over the pad, which is information about the stream that is
currently being played back.
Filtering: an application can use capabilities to limit the possible
media types that can stream between two pads to a specific subset of
their supported stream types. An application can, for example, use
“filtered caps” to set a specific (fixed or non-fixed) video size
that should stream between two pads. You will see an example of
filtered caps later in this manual, in <a href=""application-development/advanced/pipeline-manipulation.html#manually-adding-or-removing-data-fromto-a-pipeline"">Manually adding or removing
data from/to a pipeline</a>.
You can do caps filtering by inserting a capsfilter element into
your pipeline and setting its “caps” property. Caps filters are
often placed after converter elements like audioconvert,
audioresample, videoconvert or videoscale to force those converters
to convert data to a specific output format at a certain point in a
stream.
A pad can have a set (i.e. one or more) of capabilities attached to it.
Capabilities (<code>GstCaps</code>) are represented as an array of one or more
<code>GstStructure</code>s, and each <code>GstStructure</code> is an array of fields where
each field consists of a field name string (e.g. ""width"") and a typed
value (e.g. <code>G_TYPE_INT</code> or <code>GST_TYPE_INT_RANGE</code>).
Note that there is a distinct difference between the <em>possible</em>
capabilities of a pad (ie. usually what you find as caps of pad
templates as they are shown in gst-inspect), the <em>allowed</em> caps of a pad
(can be the same as the pad's template caps or a subset of them,
depending on the possible caps of the peer pad) and lastly <em>negotiated</em>
caps (these describe the exact format of a stream or buffer and contain
exactly one structure and have no variable bits like ranges or lists,
ie. they are fixed caps).
You can get values of properties in a set of capabilities by querying
individual properties of one structure. You can get a structure from a
caps using <code>gst_caps_get_structure ()</code> and the number of structures in a
<code>GstCaps</code> using <code>gst_caps_get_size ()</code>.
Caps are called <em>simple caps</em> when they contain only one structure, and
<em>fixed caps</em> when they contain only one structure and have no variable
field types (like ranges or lists of possible values). Two other special
types of caps are <em>ANY caps</em> and <em>empty caps</em>.
Here is an example of how to extract the width and height from a set of
fixed video caps:
While capabilities are mainly used inside a plugin to describe the media
type of the pads, the application programmer often also has to have
basic understanding of capabilities in order to interface with the
plugins, especially when using filtered caps. When you're using filtered
caps or fixation, you're limiting the allowed types of media that can
stream between two pads to a subset of their supported media types. You
do this using a <code>capsfilter</code> element in your pipeline. In order to do
this, you also need to create your own <code>GstCaps</code>. The easiest way to do
this is by using the convenience function <code>gst_caps_new_simple ()</code>:
This will force the data flow between those two elements to a certain
video format, width, height and framerate (or the linking will fail if
that cannot be achieved in the context of the elements involved). Keep
in mind that when you use <code>gst_element_link_filtered ()</code> it will automatically create a
<code>capsfilter</code> element for you and insert it into your bin or pipeline
between the two elements you want to connect (this is important if you
ever want to disconnect those elements because then you will have to
disconnect both elements from the capsfilter instead).
In some cases, you will want to create a more elaborate set of
capabilities to filter a link between two pads. Then, this function is
too simplistic and you'll want to use the method <code>gst_caps_new_full ()</code>:
See the API references for the full API of
<a href=""http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer/html/GstStructure.html""><code>GstStructure</code></a>
and
<a href=""http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer/html/GstCaps.html""><code>GstCaps</code></a>.
You can see from <a href=""application-development/basics/pads.html#visualisation-of-a-gstbin-------element-without-ghost-pads"">Visualisation of a GstBin element without ghost
pads</a> how a
bin has no pads of its own. This is where ""ghost pads"" come into play.
<img alt=""Visualisation of a GstBin element without ghost pads"" title=""fig:"" src=""application-development/basics/images/bin-element-noghost.png"" id=""visualisation-of-a-gstbin-element-without-ghost-pads"">
A ghost pad is a pad from some element in the bin that can be accessed
directly from the bin as well. Compare it to a symbolic link in UNIX
filesystems. Using ghost pads on bins, the bin also has a pad and can
transparently be used as an element in other parts of your code.
<img alt=""Visualisation of a GstBin element with a ghost pad"" id=""visualisation-of-a-gstbin-element-with-a-ghost-pad"" src=""application-development/basics/images/bin-element-ghost.png"" title=""fig:"">
<a href=""application-development/basics/pads.html#visualisation-of-a-gstbin-------element-with-a-ghost-pad"">Visualisation of a GstBin element with a ghost
pad</a> is a
representation of a ghost pad. The sink pad of element one is now also a
pad of the bin. Because ghost pads look and work like any other pads,
they can be added to any type of elements, not just to a <code>GstBin</code>, just
like ordinary pads.
A ghostpad is created using the function <code>gst_ghost_pad_new ()</code>:
In the above example, the bin now also has a pad: the pad called “sink”
of the given element. The bin can, from here on, be used as a substitute
for the sink element. You could, for example, link another element to
the bin.
The results of the search are
<code class=""language-c"">#include &lt;gst/gst.h&gt;

static void
cb_new_pad (GstElement *element,
        GstPad     *pad,
        gpointer    data)
{
  gchar *name;

  name = gst_pad_get_name (pad);
  g_print (""A new pad %s was created\n"", name);
  g_free (name);

  /* here, you would setup a new pad link for the newly created pad */
[..]

}

int
main (int   argc,
      char *argv[])
{
  GstElement *pipeline, *source, *demux;
  GMainLoop *loop;

  /* init */
  gst_init (&amp;argc, &amp;argv);

  /* create elements */
  pipeline = gst_pipeline_new (""my_pipeline"");
  source = gst_element_factory_make (""filesrc"", ""source"");
  g_object_set (source, ""location"", argv[1], NULL);
  demux = gst_element_factory_make (""oggdemux"", ""demuxer"");

  /* you would normally check that the elements were created properly */

  /* put together a pipeline */
  gst_bin_add_many (GST_BIN (pipeline), source, demux, NULL);
  gst_element_link_pads (source, ""src"", demux, ""sink"");

  /* listen for newly created pads */
  g_signal_connect (demux, ""pad-added"", G_CALLBACK (cb_new_pad), NULL);

  /* start the pipeline */
  gst_element_set_state (GST_ELEMENT (pipeline), GST_STATE_PLAYING);
  loop = g_main_loop_new (NULL, FALSE);
  g_main_loop_run (loop);

[..]

}

</code>
<code class=""language-c"">static void
some_function (GstElement * tee)
{
  GstPad *pad;
  gchar *name;

  pad = gst_element_request_pad_simple (tee, ""src%d"");
  name = gst_pad_get_name (pad);
  g_print (""A new pad %s was created\n"", name);
  g_free (name);

  /* here, you would link the pad */

  /* [..] */

  /* and, after doing that, free our reference */
  gst_object_unref (GST_OBJECT (pad));
}
</code>
<code class=""language-c"">static void
link_to_multiplexer (GstPad * tolink_pad, GstElement * mux)
{
  GstPad *pad;
  gchar *srcname, *sinkname;

  srcname = gst_pad_get_name (tolink_pad);
  pad = gst_element_get_compatible_pad (mux, tolink_pad, NULL);
  gst_pad_link (tolink_pad, pad);
  sinkname = gst_pad_get_name (pad);
  gst_object_unref (GST_OBJECT (pad));

  g_print (""A new pad %s was created and linked to %s\n"", sinkname, srcname);
  g_free (sinkname);
  g_free (srcname);
}
</code>
<code>Pad Templates:
  SRC template: 'src'
    Availability: Always
    Capabilities:
      audio/x-raw
                 format: F32LE
                   rate: [ 1, 2147483647 ]
               channels: [ 1, 256 ]

  SINK template: 'sink'
    Availability: Always
    Capabilities:
      audio/x-vorbis
</code>
<code class=""language-c"">static void
read_video_props (GstCaps *caps)
{
  gint width, height;
  const GstStructure *str;

  g_return_if_fail (gst_caps_is_fixed (caps));

  str = gst_caps_get_structure (caps, 0);
  if (!gst_structure_get_int (str, ""width"", &amp;width) ||
      !gst_structure_get_int (str, ""height"", &amp;height)) {
    g_print (""No width/height available\n"");
    return;
  }

  g_print (""The video size of this set of capabilities is %dx%d\n"",
       width, height);
}

</code>
<code class=""language-c"">static gboolean
link_elements_with_filter (GstElement *element1, GstElement *element2)
{
  gboolean link_ok;
  GstCaps *caps;

  caps = gst_caps_new_simple (""video/x-raw"",
          ""format"", G_TYPE_STRING, ""I420"",
          ""width"", G_TYPE_INT, 384,
          ""height"", G_TYPE_INT, 288,
          ""framerate"", GST_TYPE_FRACTION, 25, 1,
          NULL);

  link_ok = gst_element_link_filtered (element1, element2, caps);
  gst_caps_unref (caps);

  if (!link_ok) {
    g_warning (""Failed to link element1 and element2!"");
  }

  return link_ok;
}

</code>
<code class=""language-c"">static gboolean
link_elements_with_filter (GstElement *element1, GstElement *element2)
{
  gboolean link_ok;
  GstCaps *caps;

  caps = gst_caps_new_full (
      gst_structure_new (""video/x-raw"",
             ""width"", G_TYPE_INT, 384,
             ""height"", G_TYPE_INT, 288,
             ""framerate"", GST_TYPE_FRACTION, 25, 1,
             NULL),
      gst_structure_new (""video/x-bayer"",
             ""width"", G_TYPE_INT, 384,
             ""height"", G_TYPE_INT, 288,
             ""framerate"", GST_TYPE_FRACTION, 25, 1,
             NULL),
      NULL);

  link_ok = gst_element_link_filtered (element1, element2, caps);
  gst_caps_unref (caps);

  if (!link_ok) {
    g_warning (""Failed to link element1 and element2!"");
  }

  return link_ok;
}

</code>
<code class=""language-c"">#include &lt;gst/gst.h&gt;

int
main (int   argc,
      char *argv[])
{
  GstElement *bin, *sink;
  GstPad *pad;

  /* init */
  gst_init (&amp;argc, &amp;argv);

  /* create element, add to bin */
  sink = gst_element_factory_make (""fakesink"", ""sink"");
  bin = gst_bin_new (""mybin"");
  gst_bin_add (GST_BIN (bin), sink);

  /* add ghostpad */
  pad = gst_element_get_static_pad (sink, ""sink"");
  gst_element_add_pad (bin, gst_ghost_pad_new (""sink"", pad));
  gst_object_unref (GST_OBJECT (pad));

[..]

}

</code>
gst-inspect-1.0 oggdemux
#include &lt;gst/gst.h&gt;

static void
cb_new_pad (GstElement *element,
        GstPad     *pad,
        gpointer    data)
{
  gchar *name;

  name = gst_pad_get_name (pad);
  g_print (""A new pad %s was created\n"", name);
  g_free (name);

  /* here, you would setup a new pad link for the newly created pad */
[..]

}

int
main (int   argc,
      char *argv[])
{
  GstElement *pipeline, *source, *demux;
  GMainLoop *loop;

  /* init */
  gst_init (&amp;argc, &amp;argv);

  /* create elements */
  pipeline = gst_pipeline_new (""my_pipeline"");
  source = gst_element_factory_make (""filesrc"", ""source"");
  g_object_set (source, ""location"", argv[1], NULL);
  demux = gst_element_factory_make (""oggdemux"", ""demuxer"");

  /* you would normally check that the elements were created properly */

  /* put together a pipeline */
  gst_bin_add_many (GST_BIN (pipeline), source, demux, NULL);
  gst_element_link_pads (source, ""src"", demux, ""sink"");

  /* listen for newly created pads */
  g_signal_connect (demux, ""pad-added"", G_CALLBACK (cb_new_pad), NULL);

  /* start the pipeline */
  gst_element_set_state (GST_ELEMENT (pipeline), GST_STATE_PLAYING);
  loop = g_main_loop_new (NULL, FALSE);
  g_main_loop_run (loop);

[..]

}


gst_element_set_state ()
gst_element_sync_state_with_parent ()
static void
some_function (GstElement * tee)
{
  GstPad *pad;
  gchar *name;

  pad = gst_element_request_pad_simple (tee, ""src%d"");
  name = gst_pad_get_name (pad);
  g_print (""A new pad %s was created\n"", name);
  g_free (name);

  /* here, you would link the pad */

  /* [..] */

  /* and, after doing that, free our reference */
  gst_object_unref (GST_OBJECT (pad));
}

gst_element_request_pad_simple ()
gst_element_get_compatible_pad ()
static void
link_to_multiplexer (GstPad * tolink_pad, GstElement * mux)
{
  GstPad *pad;
  gchar *srcname, *sinkname;

  srcname = gst_pad_get_name (tolink_pad);
  pad = gst_element_get_compatible_pad (mux, tolink_pad, NULL);
  gst_pad_link (tolink_pad, pad);
  sinkname = gst_pad_get_name (pad);
  gst_object_unref (GST_OBJECT (pad));

  g_print (""A new pad %s was created and linked to %s\n"", sinkname, srcname);
  g_free (sinkname);
  g_free (srcname);
}

GstCaps
GstCaps
GstStructure
gst-inspect vorbisdec
Pad Templates:
  SRC template: 'src'
    Availability: Always
    Capabilities:
      audio/x-raw
                 format: F32LE
                   rate: [ 1, 2147483647 ]
               channels: [ 1, 256 ]

  SINK template: 'sink'
    Availability: Always
    Capabilities:
      audio/x-vorbis

GType
G_TYPE_INT
G_TYPE_BOOLEAN
TRUE
FALSE
G_TYPE_FLOAT
G_TYPE_STRING
GST_TYPE_FRACTION
GType
GST_TYPE_INT_RANGE
GST_TYPE_FLOAT_RANGE
GST_TYPE_FRACTION_RANGE
GST_TYPE_LIST
GST_TYPE_ARRAY
GST_TYPE_LIST
GstCaps
GstStructure
GstStructure
G_TYPE_INT
GST_TYPE_INT_RANGE
gst_caps_get_structure ()
GstCaps
gst_caps_get_size ()
static void
read_video_props (GstCaps *caps)
{
  gint width, height;
  const GstStructure *str;

  g_return_if_fail (gst_caps_is_fixed (caps));

  str = gst_caps_get_structure (caps, 0);
  if (!gst_structure_get_int (str, ""width"", &amp;width) ||
      !gst_structure_get_int (str, ""height"", &amp;height)) {
    g_print (""No width/height available\n"");
    return;
  }

  g_print (""The video size of this set of capabilities is %dx%d\n"",
       width, height);
}


capsfilter
GstCaps
gst_caps_new_simple ()
static gboolean
link_elements_with_filter (GstElement *element1, GstElement *element2)
{
  gboolean link_ok;
  GstCaps *caps;

  caps = gst_caps_new_simple (""video/x-raw"",
          ""format"", G_TYPE_STRING, ""I420"",
          ""width"", G_TYPE_INT, 384,
          ""height"", G_TYPE_INT, 288,
          ""framerate"", GST_TYPE_FRACTION, 25, 1,
          NULL);

  link_ok = gst_element_link_filtered (element1, element2, caps);
  gst_caps_unref (caps);

  if (!link_ok) {
    g_warning (""Failed to link element1 and element2!"");
  }

  return link_ok;
}


gst_element_link_filtered ()
capsfilter
gst_caps_new_full ()
static gboolean
link_elements_with_filter (GstElement *element1, GstElement *element2)
{
  gboolean link_ok;
  GstCaps *caps;

  caps = gst_caps_new_full (
      gst_structure_new (""video/x-raw"",
             ""width"", G_TYPE_INT, 384,
             ""height"", G_TYPE_INT, 288,
             ""framerate"", GST_TYPE_FRACTION, 25, 1,
             NULL),
      gst_structure_new (""video/x-bayer"",
             ""width"", G_TYPE_INT, 384,
             ""height"", G_TYPE_INT, 288,
             ""framerate"", GST_TYPE_FRACTION, 25, 1,
             NULL),
      NULL);

  link_ok = gst_element_link_filtered (element1, element2, caps);
  gst_caps_unref (caps);

  if (!link_ok) {
    g_warning (""Failed to link element1 and element2!"");
  }

  return link_ok;
}


GstStructure
GstCaps
GstBin
gst_ghost_pad_new ()
#include &lt;gst/gst.h&gt;

int
main (int   argc,
      char *argv[])
{
  GstElement *bin, *sink;
  GstPad *pad;

  /* init */
  gst_init (&amp;argc, &amp;argv);

  /* create element, add to bin */
  sink = gst_element_factory_make (""fakesink"", ""sink"");
  bin = gst_bin_new (""mybin"");
  gst_bin_add (GST_BIN (bin), sink);

  /* add ghostpad */
  pad = gst_element_get_static_pad (sink, ""sink"");
  gst_element_add_pad (bin, gst_ghost_pad_new (""sink"", pad));
  gst_object_unref (GST_OBJECT (pad));

[..]

}



    <a role=""button"" aria-haspopup=""true"" data-toggle=""dropdown"" aria-expanded=""false"" class=""dropdown-toggle"">
        API References<span class=""caret""></span>
    </a>
	<ul class=""dropdown-menu"" id=""modules-menu"">
					<li>
				<a href=""gstreamer/gi-index.html"">GStreamer core</a>
			</li>
					<li>
				<a href=""libs.html"">GStreamer Libraries</a>
			</li>
					<li>
				<a href=""plugins_doc.html"">GStreamer Plugins</a>
			</li>
		</ul>


				<a href=""gstreamer/gi-index.html"">GStreamer core</a>
			

				<a href=""libs.html"">GStreamer Libraries</a>
			

				<a href=""plugins_doc.html"">GStreamer Plugins</a>
			

    <a href=""application-development/index.html"">Application manual</a>


    <a href=""tutorials/index.html"">Tutorials</a>


<p>Basic types, this can be pretty much any <code>GType</code> registered with
Glib. Those properties indicate a specific, non-dynamic value for
this property. Examples include:</p>
<ul>
<li>
<p>An integer value (<code>G_TYPE_INT</code>): the property has this exact
value.</p>
</li>
<li>
<p>A boolean value (<code>G_TYPE_BOOLEAN</code>): the property is either <code>TRUE</code>
or <code>FALSE</code>.</p>
</li>
<li>
<p>A float value (<code>G_TYPE_FLOAT</code>): the property has this exact
floating point value.</p>
</li>
<li>
<p>A string value (<code>G_TYPE_STRING</code>): the property contains a UTF-8
string.</p>
</li>
<li>
<p>A fraction value (<code>GST_TYPE_FRACTION</code>): contains a fraction
expressed by an integer numerator and denominator.</p>
</li>
</ul>


<p>An integer value (<code>G_TYPE_INT</code>): the property has this exact
value.</p>


<p>A boolean value (<code>G_TYPE_BOOLEAN</code>): the property is either <code>TRUE</code>
or <code>FALSE</code>.</p>


<p>A float value (<code>G_TYPE_FLOAT</code>): the property has this exact
floating point value.</p>


<p>A string value (<code>G_TYPE_STRING</code>): the property contains a UTF-8
string.</p>


<p>A fraction value (<code>GST_TYPE_FRACTION</code>): contains a fraction
expressed by an integer numerator and denominator.</p>


<p>Range types are <code>GType</code>s registered by GStreamer to indicate a range
of possible values. They are used for indicating allowed audio
samplerate values or supported video sizes. The two types defined in
GStreamer are:</p>
<ul>
<li>
<p>An integer range value (<code>GST_TYPE_INT_RANGE</code>): the property
denotes a range of possible integers, with a lower and an upper
boundary. The “vorbisdec” element, for example, has a rate
property that can be between 8000 and 50000.</p>
</li>
<li>
<p>A float range value (<code>GST_TYPE_FLOAT_RANGE</code>): the property
denotes a range of possible floating point values, with a lower
and an upper boundary.</p>
</li>
<li>
<p>A fraction range value (<code>GST_TYPE_FRACTION_RANGE</code>): the property
denotes a range of possible fraction values, with a lower and an
upper boundary.</p>
</li>
</ul>


<p>An integer range value (<code>GST_TYPE_INT_RANGE</code>): the property
denotes a range of possible integers, with a lower and an upper
boundary. The “vorbisdec” element, for example, has a rate
property that can be between 8000 and 50000.</p>


<p>A float range value (<code>GST_TYPE_FLOAT_RANGE</code>): the property
denotes a range of possible floating point values, with a lower
and an upper boundary.</p>


<p>A fraction range value (<code>GST_TYPE_FRACTION_RANGE</code>): the property
denotes a range of possible fraction values, with a lower and an
upper boundary.</p>


<p>A list value (<code>GST_TYPE_LIST</code>): the property can take any value from
a list of basic values given in this list.</p>
<p>Example: caps that express that either a sample rate of 44100 Hz and
a sample rate of 48000 Hz is supported would use a list of integer
values, with one value being 44100 and one value being 48000.</p>


<p>An array value (<code>GST_TYPE_ARRAY</code>): the property is an array of
values. Each value in the array is a full value on its own, too. All
values in the array should be of the same elementary type. This
means that an array can contain any combination of integers, lists
of integers, integer ranges together, and the same for floats or
strings, but it can not contain both floats and ints at the same
time.</p>
<p>Example: for audio where there are more than two channels involved
the channel layout needs to be specified (for one and two channel
audio the channel layout is implicit unless stated otherwise in the
caps). So the channel layout would be an array of integer enum
values where each enum value represents a loudspeaker position.
Unlike a <code>GST_TYPE_LIST</code>, the values in an array will be interpreted
as a whole.</p>


<p>Autoplugging: automatically finding elements to link to a pad based
on its capabilities. All autopluggers use this method.</p>


<p>Compatibility detection: when two pads are linked, GStreamer can
verify if the two pads are talking about the same media type. The
process of linking two pads and checking if they are compatible is
called “caps negotiation”.</p>


<p>Metadata: by reading the capabilities from a pad, applications can
provide information about the type of media that is being streamed
over the pad, which is information about the stream that is
currently being played back.</p>


<p>Filtering: an application can use capabilities to limit the possible
media types that can stream between two pads to a specific subset of
their supported stream types. An application can, for example, use
“filtered caps” to set a specific (fixed or non-fixed) video size
that should stream between two pads. You will see an example of
filtered caps later in this manual, in <a href=""application-development/advanced/pipeline-manipulation.html#manually-adding-or-removing-data-fromto-a-pipeline"">Manually adding or removing
data from/to a pipeline</a>.
You can do caps filtering by inserting a capsfilter element into
your pipeline and setting its “caps” property. Caps filters are
often placed after converter elements like audioconvert,
audioresample, videoconvert or videoscale to force those converters
to convert data to a specific output format at a certain point in a
stream.</p>

In reality, there is no objection to data flowing from a source pad
to the sink pad of an element upstream (to the left of this element
in drawings). Data will, however, always flow from a source pad of
one element to the sink pad of another.
"
https://gstreamer.freedesktop.org/documentation/application-development/basics/elements.html?gi-language=c,Elements,"The most important object in GStreamer for the application programmer is
the
<a href=""http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer/html/GstElement.html""><code>GstElement</code></a>
object. An element is the basic building block for a media pipeline. All
the different high-level components you will use are derived from
<code>GstElement</code>. Every decoder, encoder, demuxer, video or audio output is
in fact a <code>GstElement</code>
For the application programmer, elements are best visualized as black
boxes. On the one end, you might put something in, the element does
something with it and something else comes out at the other side. For a
decoder element, for example, you'd put in encoded data, and the element
would output decoded data. In the next chapter (see <a href=""application-development/basics/pads.html"">Pads and
capabilities</a>), you will learn more about data input
and output in elements, and how you can set that up in your application.
Source elements generate data for use by a pipeline, for example reading
from disk or from a sound card. <a href=""application-development/basics/elements.html#visualisation-of-a-source-element"">Visualisation of a source
element</a> shows how we will visualise
a source element. We always draw a source pad to the right of the
element.
<img alt=""Visualisation of a source element"" id=""visualisation-of-a-source-element"" title=""fig:"" src=""application-development/basics/images/src-element.png"">
Source elements do not accept data, they only generate data. You can see
this in the figure because it only has a source pad (on the right). A
source pad can only generate data.
Filters and filter-like elements have both input and outputs pads. They
operate on data that they receive on their input (sink) pads, and will
provide data on their output (source) pads. Examples of such elements
are a volume element (filter), a video scaler (convertor), an Ogg
demuxer or a Vorbis decoder.
Filter-like elements can have any number of source or sink pads. A video
demuxer, for example, would have one sink pad and several (1-N) source
pads, one for each elementary stream contained in the container format.
Decoders, on the other hand, will only have one source and sink pads.
<img alt=""Visualisation of a filter element"" id=""visualisation-of-a-filter-element"" src=""application-development/basics/images/filter-element.png"" title=""fig:"">
<a href=""application-development/basics/elements.html#visualisation-of-a-filter-element"">Visualisation of a filter element</a>
shows how we will visualise a filter-like element. This specific element
has one source pad and one sink pad. Sink pads, receiving input data,
are depicted at the left of the element; source pads are still on the
right.
<img src=""application-development/basics/images/filter-element-multi.png"" title=""fig:"" id=""visualisation-of-a-filter-element-with-more-than-one-output-pad"" alt=""Visualisation of a filter element with more than one output pad"">
<a href=""application-development/basics/elements.html#visualisation-of-a-filter-element-with----more-than-one-output-pad"">Visualisation of a filter element with more than one output
pad</a>
shows another filter-like element, this one having more than one output
(source) pad. An example of one such element could, for example, be an
Ogg demuxer for an Ogg stream containing both audio and video. One
source pad will contain the elementary video stream, another will
contain the elementary audio stream. Demuxers will generally fire
signals when a new pad is created. The application programmer can then
handle the new elementary stream in the signal handler.
Sink elements are end points in a media pipeline. They accept data but
do not produce anything. Disk writing, soundcard playback, and video
output would all be implemented by sink elements. <a href=""application-development/basics/elements.html#visualisation-of-a-sink-element"">Visualisation of a
sink element</a> shows a sink element.
<img id=""visualisation-of-a-sink-element"" title=""fig:"" src=""application-development/basics/images/sink-element.png"" alt=""Visualisation of a sink element"">
The simplest way to create an element is to use
<a href=""http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer/html/GstElementFactory.html#gst-element-factory-make""><code>gst_element_factory_make ()</code></a>.
This function takes a factory name and an element name for the newly
created element. The name of the element is something you can use later
on to look up the element in a bin, for example. The name will also be
used in debug output. You can pass <code>NULL</code> as the name argument to get a
unique, default name.
When you don't need the element anymore, you need to unref it using
<a href=""http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer/html/GstObject.html#gst-object-unref""><code>gst_object_unref ()</code></a>.
This decreases the reference count for the element by 1. An element has
a refcount of 1 when it gets created. An element gets destroyed
completely when the refcount is decreased to 0.
The following example [1] shows how to create an element named
<em>source</em> from the element factory named <em>fakesrc</em>. It checks if the
creation succeeded. After checking, it unrefs the element.
<code>gst_element_factory_make</code> is actually a shorthand for a combination of
two functions. A
<a href=""http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer/html/GstElement.html""><code>GstElement</code></a>
object is created from a factory. To create the element, you have to get
access to a
<a href=""http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer/html/GstElementFactory.html""><code>GstElementFactory</code></a>
object using a unique factory name. This is done with
<a href=""http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer/html/GstElementFactory.html#gst-element-factory-find""><code>gst_element_factory_find ()</code></a>.
The following code fragment is used to get a factory that can be used to
create the <em>fakesrc</em> element, a fake data source. The function
<a href=""http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer/html/GstElementFactory.html#gst-element-factory-create""><code>gst_element_factory_create ()</code></a>
will use the element factory to create an element with the given name.
A
<a href=""http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer/html/GstElement.html""><code>GstElement</code></a>
can have several properties which are implemented using standard
<code>GObject</code> properties. The usual <code>GObject</code> methods to query, set and get
property values and <code>GParamSpecs</code> are therefore supported.
Every <code>GstElement</code> inherits at least one property from its parent
<code>GstObject</code>: the ""name"" property. This is the name you provide to the
functions <code>gst_element_factory_make ()</code> or <code>gst_element_factory_create ()</code>. You can get and set this property using the functions
<code>gst_object_set_name</code> and <code>gst_object_get_name</code> or use the <code>GObject</code>
property mechanism as shown below.
Most plugins provide additional properties to provide more information
about their configuration or to configure the element. <code>gst-inspect</code> is
a useful tool to query the properties of a particular element, it will
also use property introspection to give a short explanation about the
function of the property and about the parameter types and ranges it
supports. See <a href=""application-development/appendix/checklist-element.html#gst-inspect"">gst-inspect</a> in
the appendix for details about <code>gst-inspect</code>.
For more information about <code>GObject</code> properties we recommend you read
the <a href=""http://developer.gnome.org/gobject/stable/rn01.html"">GObject
manual</a> and an
introduction to <a href=""http://developer.gnome.org/gobject/stable/pt01.html"">The Glib Object
system</a>.
A
<a href=""http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer/html/GstElement.html""><code>GstElement</code></a>
also provides various <code>GObject</code> signals that can be used as a flexible
callback mechanism. Here, too, you can use <code>gst-inspect</code> to see which
signals a specific element supports. Together, signals and properties
are the most basic way in which elements and applications interact.
In the previous section, we briefly introduced the
<a href=""http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer/html/GstElementFactory.html""><code>GstElementFactory</code></a>
object already as a way to create instances of an element. Element
factories, however, are much more than just that. Element factories are
the basic types retrieved from the GStreamer registry, they describe all
plugins and elements that GStreamer can create. This means that element
factories are useful for automated element instancing, such as what
autopluggers do, and for creating lists of available elements.
Tools like <code>gst-inspect</code> will provide some generic information about an
element, such as the person that wrote the plugin, a descriptive name
(and a shortname), a rank and a category. The category can be used to
get the type of the element that can be created using this element
factory. Examples of categories include <code>Codec/Decoder/Video</code> (video
decoder), <code>Codec/Encoder/Video</code> (video encoder), <code>Source/Video</code> (a video
generator), <code>Sink/Video</code> (a video output), and all these exist for audio
as well, of course. Then, there's also <code>Codec/Demuxer</code> and <code>Codec/Muxer</code>
and a whole lot more. <code>gst-inspect</code> will give a list of all factories,
and <code>gst-inspect &lt;factory-name&gt;</code> will list all of the above information,
and a lot more.
You can use <code>gst_registry_pool_feature_list (GST_TYPE_ELEMENT_FACTORY)</code>
to get a list of all the element factories that GStreamer knows about.
Perhaps the most powerful feature of element factories is that they
contain a full description of the pads that the element can generate,
and the capabilities of those pads (in layman words: what types of media
can stream over those pads), without actually having to load those
plugins into memory. This can be used to provide a codec selection list
for encoders, or it can be used for autoplugging purposes for media
players. All current GStreamer-based media players and autopluggers work
this way. We'll look closer at these features as we learn about <code>GstPad</code>
and <code>GstCaps</code> in the next chapter: <a href=""application-development/basics/pads.html"">Pads and capabilities</a>
By linking a source element with zero or more filter-like elements and
finally a sink element, you set up a media pipeline. Data will flow
through the elements. This is the basic concept of media handling in
GStreamer.
<img title=""fig:"" src=""application-development/basics/images/linked-elements.png"" id=""visualisation-of-three-linked-elements"" alt=""Visualisation of three linked elements"">
By linking these three elements, we have created a very simple chain of
elements. The effect of this will be that the output of the source
element will be used as input for the filter-like element. The filter-like
element will do something with the data and send the result to the final
sink element.
Imagine the above graph as a simple Ogg/Vorbis audio decoder. The source
is a disk source which reads the file from disc. The second element is a
Ogg/Vorbis audio decoder. The sink element is your soundcard, playing
back the decoded audio data. We will use this simple graph to construct
an Ogg/Vorbis player later in this manual.
In code, the above graph is written like this:
For more specific behaviour, there are also the functions
<code>gst_element_link ()</code> and <code>gst_element_link_pads ()</code>. You can also
obtain references to individual pads and link those using various
<code>gst_pad_link_* ()</code> functions. See the API references for more details.
Important: you must add elements to a bin or pipeline <em>before</em> linking
them, since adding an element to a bin will disconnect any already
existing links. Also, you cannot directly link elements that are not in
the same bin or pipeline; if you want to link elements or pads at
different hierarchy levels, you will need to use ghost pads (more about
<a href=""application-development/basics/pads.html#ghost-pads"">ghost pads</a> later).
After being created, an element will not actually perform any actions
yet. You need to change elements state to make it do something.
GStreamer knows four element states, each with a very specific meaning.
Those four states are:
<code>GST_STATE_NULL</code>: this is the default state. No resources are
allocated in this state, so, transitioning to it will free all
resources. The element must be in this state when its refcount
reaches 0 and it is freed.
<code>GST_STATE_READY</code>: in the ready state, an element has allocated all
of its global resources, that is, resources that can be kept within
streams. You can think about opening devices, allocating buffers and
so on. However, the stream is not opened in this state, so the
stream positions is automatically zero. If a stream was previously
opened, it should be closed in this state, and position, properties
and such should be reset.
<code>GST_STATE_PAUSED</code>: in this state, an element has opened the stream,
but is not actively processing it. An element is allowed to modify a
stream's position, read and process data and such to prepare for
playback as soon as state is changed to PAUSED, but it is <em>not</em>
allowed to play the data which would make the clock run. In summary,
PAUSED is the same as PLAYING but without a running clock.
Elements going into the <code>PAUSED</code> state should prepare themselves for
moving over to the <code>PLAYING</code> state as soon as possible. Video or audio
outputs would, for example, wait for data to arrive and queue it so
they can play it right after the state change. Also, video sinks can
already play the first frame (since this does not affect the clock
yet). Autopluggers could use this same state transition to already
plug together a pipeline. Most other elements, such as codecs or
filters, do not need to explicitly do anything in this state,
however.
<code>GST_STATE_PLAYING</code>: in the <code>PLAYING</code> state, an element does exactly
the same as in the <code>PAUSED</code> state, except that the clock now runs.
You can change the state of an element using the function
<code>gst_element_set_state ()</code>. If you set an element to another state,
GStreamer will internally traverse all intermediate states. So if you
set an element from <code>NULL</code> to <code>PLAYING</code>, GStreamer will internally set the
element to <code>READY</code> and <code>PAUSED</code> in between.
When moved to <code>GST_STATE_PLAYING</code>, pipelines will process data
automatically. They do not need to be iterated in any form. Internally,
GStreamer will start threads that take on this task for them. GStreamer
will also take care of switching messages from the pipeline's thread
into the application's own thread, by using a
<a href=""http://gstreamer.freedesktop.org/data/doc/gstreamer/stable/gstreamer/html/GstBus.html""><code>GstBus</code></a>.
See <a href=""application-development/basics/bus.html"">Bus</a> for details.
When you set a bin or pipeline to a certain target state, it will
usually propagate the state change to all elements within the bin or
pipeline automatically, so it's usually only necessary to set the state
of the top-level pipeline to start up the pipeline or shut it down.
However, when adding elements dynamically to an already-running
pipeline, e.g. from within a ""pad-added"" signal callback, you need to
set it to the desired target state yourself using <code>gst_element_set_state ()</code> or <code>gst_element_sync_state_with_parent ()</code>.
The results of the search are
<code class=""language-c"">#include &lt;gst/gst.h&gt;

int
main (int   argc,
      char *argv[])
{
  GstElement *element;

  /* init GStreamer */
  gst_init (&amp;argc, &amp;argv);

  /* create element */
  element = gst_element_factory_make (""fakesrc"", ""source"");
  if (!element) {
    g_print (""Failed to create element of type 'fakesrc'\n"");
    return -1;
  }

  gst_object_unref (GST_OBJECT (element));

  return 0;
}

</code>
<code class=""language-c"">#include &lt;gst/gst.h&gt;

int
main (int   argc,
      char *argv[])
{
  GstElementFactory *factory;
  GstElement * element;

  /* init GStreamer */
  gst_init (&amp;argc, &amp;argv);

  /* create element, method #2 */
  factory = gst_element_factory_find (""fakesrc"");
  if (!factory) {
    g_print (""Failed to find factory of type 'fakesrc'\n"");
    return -1;
  }
  element = gst_element_factory_create (factory, ""source"");
  if (!element) {
    g_print (""Failed to create element, even though its factory exists!\n"");
    return -1;
  }

  gst_object_unref (GST_OBJECT (element));
  gst_object_unref (GST_OBJECT (factory));

  return 0;
}

</code>
<code class=""language-c"">#include &lt;gst/gst.h&gt;

int
main (int   argc,
      char *argv[])
{
  GstElement *element;
  gchar *name;

  /* init GStreamer */
  gst_init (&amp;argc, &amp;argv);

  /* create element */
  element = gst_element_factory_make (""fakesrc"", ""source"");

  /* get name */
  g_object_get (G_OBJECT (element), ""name"", &amp;name, NULL);
  g_print (""The name of the element is '%s'.\n"", name);
  g_free (name);

  gst_object_unref (GST_OBJECT (element));

  return 0;
}

</code>
<code class=""language-c"">#include &lt;gst/gst.h&gt;

int
main (int   argc,
      char *argv[])
{
  GstElementFactory *factory;

  /* init GStreamer */
  gst_init (&amp;argc, &amp;argv);

  /* get factory */
  factory = gst_element_factory_find (""fakesrc"");
  if (!factory) {
    g_print (""You don't have the 'fakesrc' element installed!\n"");
    return -1;
  }

  /* display information */
  g_print (""The '%s' element is a member of the category %s.\n""
           ""Description: %s\n"",
           gst_plugin_feature_get_name (GST_PLUGIN_FEATURE (factory)),
           gst_element_factory_get_metadata (factory, GST_ELEMENT_METADATA_KLASS),
           gst_element_factory_get_metadata (factory, GST_ELEMENT_METADATA_DESCRIPTION));

  gst_object_unref (GST_OBJECT (factory));

  return 0;
}

</code>
<code class=""language-c"">#include &lt;gst/gst.h&gt;

int
main (int   argc,
      char *argv[])
{
  GstElement *pipeline;
  GstElement *source, *filter, *sink;

  /* init */
  gst_init (&amp;argc, &amp;argv);

  /* create pipeline */
  pipeline = gst_pipeline_new (""my-pipeline"");

  /* create elements */
  source = gst_element_factory_make (""fakesrc"", ""source"");
  filter = gst_element_factory_make (""identity"", ""filter"");
  sink = gst_element_factory_make (""fakesink"", ""sink"");

  /* must add elements to pipeline before linking them */
  gst_bin_add_many (GST_BIN (pipeline), source, filter, sink, NULL);

  /* link */
  if (!gst_element_link_many (source, filter, sink, NULL)) {
    g_warning (""Failed to link elements!"");
  }

[..]

}

</code>
GstElement
GstElement
GstElement
GstElement
gst_element_factory_make ()
NULL
gst_object_unref ()
#include &lt;gst/gst.h&gt;

int
main (int   argc,
      char *argv[])
{
  GstElement *element;

  /* init GStreamer */
  gst_init (&amp;argc, &amp;argv);

  /* create element */
  element = gst_element_factory_make (""fakesrc"", ""source"");
  if (!element) {
    g_print (""Failed to create element of type 'fakesrc'\n"");
    return -1;
  }

  gst_object_unref (GST_OBJECT (element));

  return 0;
}


gst_element_factory_make
GstElement
GstElementFactory
gst_element_factory_find ()
gst_element_factory_create ()
#include &lt;gst/gst.h&gt;

int
main (int   argc,
      char *argv[])
{
  GstElementFactory *factory;
  GstElement * element;

  /* init GStreamer */
  gst_init (&amp;argc, &amp;argv);

  /* create element, method #2 */
  factory = gst_element_factory_find (""fakesrc"");
  if (!factory) {
    g_print (""Failed to find factory of type 'fakesrc'\n"");
    return -1;
  }
  element = gst_element_factory_create (factory, ""source"");
  if (!element) {
    g_print (""Failed to create element, even though its factory exists!\n"");
    return -1;
  }

  gst_object_unref (GST_OBJECT (element));
  gst_object_unref (GST_OBJECT (factory));

  return 0;
}


GObject
GstElement
GObject
GObject
GParamSpecs
GstElement
GstObject
gst_element_factory_make ()
gst_element_factory_create ()
gst_object_set_name
gst_object_get_name
GObject
#include &lt;gst/gst.h&gt;

int
main (int   argc,
      char *argv[])
{
  GstElement *element;
  gchar *name;

  /* init GStreamer */
  gst_init (&amp;argc, &amp;argv);

  /* create element */
  element = gst_element_factory_make (""fakesrc"", ""source"");

  /* get name */
  g_object_get (G_OBJECT (element), ""name"", &amp;name, NULL);
  g_print (""The name of the element is '%s'.\n"", name);
  g_free (name);

  gst_object_unref (GST_OBJECT (element));

  return 0;
}


gst-inspect
gst-inspect
GObject
GstElement
GObject
gst-inspect
GstElementFactory
gst-inspect
Codec/Decoder/Video
Codec/Encoder/Video
Source/Video
Sink/Video
Codec/Demuxer
Codec/Muxer
gst-inspect
gst-inspect &lt;factory-name&gt;
#include &lt;gst/gst.h&gt;

int
main (int   argc,
      char *argv[])
{
  GstElementFactory *factory;

  /* init GStreamer */
  gst_init (&amp;argc, &amp;argv);

  /* get factory */
  factory = gst_element_factory_find (""fakesrc"");
  if (!factory) {
    g_print (""You don't have the 'fakesrc' element installed!\n"");
    return -1;
  }

  /* display information */
  g_print (""The '%s' element is a member of the category %s.\n""
           ""Description: %s\n"",
           gst_plugin_feature_get_name (GST_PLUGIN_FEATURE (factory)),
           gst_element_factory_get_metadata (factory, GST_ELEMENT_METADATA_KLASS),
           gst_element_factory_get_metadata (factory, GST_ELEMENT_METADATA_DESCRIPTION));

  gst_object_unref (GST_OBJECT (factory));

  return 0;
}


gst_registry_pool_feature_list (GST_TYPE_ELEMENT_FACTORY)
GstPad
GstCaps
#include &lt;gst/gst.h&gt;

int
main (int   argc,
      char *argv[])
{
  GstElement *pipeline;
  GstElement *source, *filter, *sink;

  /* init */
  gst_init (&amp;argc, &amp;argv);

  /* create pipeline */
  pipeline = gst_pipeline_new (""my-pipeline"");

  /* create elements */
  source = gst_element_factory_make (""fakesrc"", ""source"");
  filter = gst_element_factory_make (""identity"", ""filter"");
  sink = gst_element_factory_make (""fakesink"", ""sink"");

  /* must add elements to pipeline before linking them */
  gst_bin_add_many (GST_BIN (pipeline), source, filter, sink, NULL);

  /* link */
  if (!gst_element_link_many (source, filter, sink, NULL)) {
    g_warning (""Failed to link elements!"");
  }

[..]

}


gst_element_link ()
gst_element_link_pads ()
gst_pad_link_* ()
GST_STATE_NULL
GST_STATE_READY
GST_STATE_PAUSED
PAUSED
PLAYING
GST_STATE_PLAYING
PLAYING
PAUSED
gst_element_set_state ()
NULL
PLAYING
READY
PAUSED
GST_STATE_PLAYING
GstBus
gst_element_set_state ()
gst_element_sync_state_with_parent ()
tests/examples/manual

    <a data-toggle=""dropdown"" role=""button"" aria-expanded=""false"" class=""dropdown-toggle"" aria-haspopup=""true"">
        API References<span class=""caret""></span>
    </a>
	<ul class=""dropdown-menu"" id=""modules-menu"">
					<li>
				<a href=""gstreamer/gi-index.html"">GStreamer core</a>
			</li>
					<li>
				<a href=""libs.html"">GStreamer Libraries</a>
			</li>
					<li>
				<a href=""plugins_doc.html"">GStreamer Plugins</a>
			</li>
		</ul>


				<a href=""gstreamer/gi-index.html"">GStreamer core</a>
			

				<a href=""libs.html"">GStreamer Libraries</a>
			

				<a href=""plugins_doc.html"">GStreamer Plugins</a>
			

    <a href=""application-development/index.html"">Application manual</a>


    <a href=""tutorials/index.html"">Tutorials</a>


<p><code>GST_STATE_NULL</code>: this is the default state. No resources are
allocated in this state, so, transitioning to it will free all
resources. The element must be in this state when its refcount
reaches 0 and it is freed.</p>


<p><code>GST_STATE_READY</code>: in the ready state, an element has allocated all
of its global resources, that is, resources that can be kept within
streams. You can think about opening devices, allocating buffers and
so on. However, the stream is not opened in this state, so the
stream positions is automatically zero. If a stream was previously
opened, it should be closed in this state, and position, properties
and such should be reset.</p>


<p><code>GST_STATE_PAUSED</code>: in this state, an element has opened the stream,
but is not actively processing it. An element is allowed to modify a
stream's position, read and process data and such to prepare for
playback as soon as state is changed to PAUSED, but it is <em>not</em>
allowed to play the data which would make the clock run. In summary,
PAUSED is the same as PLAYING but without a running clock.</p>
<p>Elements going into the <code>PAUSED</code> state should prepare themselves for
moving over to the <code>PLAYING</code> state as soon as possible. Video or audio
outputs would, for example, wait for data to arrive and queue it so
they can play it right after the state change. Also, video sinks can
already play the first frame (since this does not affect the clock
yet). Autopluggers could use this same state transition to already
plug together a pipeline. Most other elements, such as codecs or
filters, do not need to explicitly do anything in this state,
however.</p>


<p><code>GST_STATE_PLAYING</code>: in the <code>PLAYING</code> state, an element does exactly
the same as in the <code>PAUSED</code> state, except that the clock now runs.</p>

The code for this example is automatically extracted from the
documentation and built under <code>tests/examples/manual</code> in the
GStreamer tarball.
"
https://gstreamer.freedesktop.org/documentation/gstreamer/gstplugin.html?gi-language=c,GstPlugin,"GStreamer is extensible, so <a data-gi-href-javascript=""gstreamer/gstelement.html#GstElement"" data-gi-title-javascript=""Gst.Element"" href=""gstreamer/gstelement.html#GstElement"" data-gi-href-python=""gstreamer/gstelement.html#GstElement"" data-gi-title-python=""Gst.Element"">GstElement</a> instances can be loaded at runtime.
A plugin system can provide one or more of the basic GStreamer
<a data-gi-href-javascript=""gstreamer/gstpluginfeature.html#GstPluginFeature"" href=""gstreamer/gstpluginfeature.html#GstPluginFeature"" data-gi-href-python=""gstreamer/gstpluginfeature.html#GstPluginFeature"" data-gi-title-python=""Gst.PluginFeature"" data-gi-title-javascript=""Gst.PluginFeature"">GstPluginFeature</a> subclasses.
A plugin should export a symbol <code>gst_plugin_desc</code> that is a
struct of type <a href=""gstreamer/gstplugin.html#GstPluginDesc"" data-gi-title-javascript=""Gst.PluginDesc"" data-gi-href-python=""gstreamer/gstplugin.html#GstPluginDesc"" data-gi-title-python=""Gst.PluginDesc"" data-gi-href-javascript=""gstreamer/gstplugin.html#GstPluginDesc"">GstPluginDesc</a>.
the plugin loader will check the version of the core library the plugin was
linked against and will create a new <a data-gi-title-python=""Gst.Plugin"" data-gi-title-javascript=""Gst.Plugin"" data-gi-href-python=""gstreamer/gstplugin.html#GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"" data-gi-href-javascript=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a>. It will then call the
<a data-gi-title-python=""Gst.PluginInitFunc"" href=""gstreamer/gstplugin.html#GstPluginInitFunc"" data-gi-href-javascript=""gstreamer/gstplugin.html#GstPluginInitFunc"" data-gi-title-javascript=""Gst.PluginInitFunc"" data-gi-href-python=""gstreamer/gstplugin.html#GstPluginInitFunc"">GstPluginInitFunc</a> function that was provided in the
<code>gst_plugin_desc</code>.
Once you have a handle to a <a data-gi-href-javascript=""gstreamer/gstplugin.html#GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"" data-gi-title-javascript=""Gst.Plugin"" data-gi-href-python=""gstreamer/gstplugin.html#GstPlugin"" data-gi-title-python=""Gst.Plugin"">GstPlugin</a> (e.g. from the <a data-gi-title-javascript=""Gst.Registry"" href=""gstreamer/gstregistry.html#GstRegistry"" data-gi-title-python=""Gst.Registry"" data-gi-href-python=""gstreamer/gstregistry.html#GstRegistry"" data-gi-href-javascript=""gstreamer/gstregistry.html#GstRegistry"">GstRegistry</a>), you
can add any object that subclasses <a href=""gstreamer/gstpluginfeature.html#GstPluginFeature"" data-gi-title-javascript=""Gst.PluginFeature"" data-gi-title-python=""Gst.PluginFeature"" data-gi-href-python=""gstreamer/gstpluginfeature.html#GstPluginFeature"" data-gi-href-javascript=""gstreamer/gstpluginfeature.html#GstPluginFeature"">GstPluginFeature</a>.
Usually plugins are always automatically loaded so you don't need to call
<a href=""gstreamer/gstplugin.html#gst_plugin_load"" data-gi-title-python=""Gst.Plugin.load"" data-gi-href-javascript=""gstreamer/gstplugin.html#gst_plugin_load"" data-gi-title-javascript=""Gst.Plugin.prototype.load"" data-gi-href-python=""gstreamer/gstplugin.html#gst_plugin_load"">gst_plugin_load</a> explicitly to bring it into memory. There are options to
statically link plugins to an app or even use GStreamer without a plugin
repository in which case <a href=""gstreamer/gstplugin.html#gst_plugin_load"" data-gi-title-javascript=""Gst.Plugin.prototype.load"" data-gi-title-python=""Gst.Plugin.load"" data-gi-href-python=""gstreamer/gstplugin.html#gst_plugin_load"" data-gi-href-javascript=""gstreamer/gstplugin.html#gst_plugin_load"">gst_plugin_load</a> can be needed to bring the plugin
into memory.
The opaque plugin object
The opaque plugin object
The opaque plugin object
Make GStreamer aware of external dependencies which affect the feature
set of this plugin (ie. the elements or typefinders associated with it).
GStreamer will re-inspect plugins with external dependencies whenever any
of the external dependencies change. This is useful for plugins which wrap
other plugin systems, e.g. a plugin which wraps a plugin-based visualisation
library and makes visualisations available as GStreamer elements, or a
codec loader which exposes elements and/or caps dependent on what external
codec libraries are currently installed.
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a>
<a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a>-terminated array of environment variables affecting the
feature set of the plugin (e.g. an environment variable containing
paths where to look for additional modules/plugins of a library),
or <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a>. Environment variable names may be followed by a path component
which will be added to the content of the environment variable, e.g.
""HOME/.mystuff/plugins"".
<a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a>-terminated array of directories/paths where dependent files
may be, or <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a>.
<a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a>-terminated array of file names (or file name suffixes,
depending on <em>flags</em>) to be used in combination with the paths from
<em>paths</em> and/or the paths extracted from the environment variables in
<em>env_vars</em>, or <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a>.
optional flags, or <a href=""gstreamer/gstplugin.html#GST_PLUGIN_DEPENDENCY_FLAG_NONE"">GST_PLUGIN_DEPENDENCY_FLAG_NONE</a>
Make GStreamer aware of external dependencies which affect the feature
set of this plugin (ie. the elements or typefinders associated with it).
GStreamer will re-inspect plugins with external dependencies whenever any
of the external dependencies change. This is useful for plugins which wrap
other plugin systems, e.g. a plugin which wraps a plugin-based visualisation
library and makes visualisations available as GStreamer elements, or a
codec loader which exposes elements and/or caps dependent on what external
codec libraries are currently installed.
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a>-terminated array of environment variables affecting the
feature set of the plugin (e.g. an environment variable containing
paths where to look for additional modules/plugins of a library),
or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a>. Environment variable names may be followed by a path component
which will be added to the content of the environment variable, e.g.
""HOME/.mystuff/plugins"".
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a>-terminated array of directories/paths where dependent files
may be, or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a>.
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a>-terminated array of file names (or file name suffixes,
depending on <em>flags</em>) to be used in combination with the paths from
<em>paths</em> and/or the paths extracted from the environment variables in
<em>env_vars</em>, or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a>.
optional flags, or <a href=""gstreamer/gstplugin.html#GST_PLUGIN_DEPENDENCY_FLAG_NONE"">Gst.PluginDependencyFlags.NONE</a>
Make GStreamer aware of external dependencies which affect the feature
set of this plugin (ie. the elements or typefinders associated with it).
GStreamer will re-inspect plugins with external dependencies whenever any
of the external dependencies change. This is useful for plugins which wrap
other plugin systems, e.g. a plugin which wraps a plugin-based visualisation
library and makes visualisations available as GStreamer elements, or a
codec loader which exposes elements and/or caps dependent on what external
codec libraries are currently installed.
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
<a href=""https://docs.python.org/3/library/constants.html#None"">None</a>-terminated array of environment variables affecting the
feature set of the plugin (e.g. an environment variable containing
paths where to look for additional modules/plugins of a library),
or <a href=""https://docs.python.org/3/library/constants.html#None"">None</a>. Environment variable names may be followed by a path component
which will be added to the content of the environment variable, e.g.
""HOME/.mystuff/plugins"".
<a href=""https://docs.python.org/3/library/constants.html#None"">None</a>-terminated array of directories/paths where dependent files
may be, or <a href=""https://docs.python.org/3/library/constants.html#None"">None</a>.
<a href=""https://docs.python.org/3/library/constants.html#None"">None</a>-terminated array of file names (or file name suffixes,
depending on <em>flags</em>) to be used in combination with the paths from
<em>paths</em> and/or the paths extracted from the environment variables in
<em>env_vars</em>, or <a href=""https://docs.python.org/3/library/constants.html#None"">None</a>.
optional flags, or <a href=""gstreamer/gstplugin.html#GST_PLUGIN_DEPENDENCY_FLAG_NONE"">Gst.PluginDependencyFlags.NONE</a>
Make GStreamer aware of external dependencies which affect the feature
set of this plugin (ie. the elements or typefinders associated with it).
GStreamer will re-inspect plugins with external dependencies whenever any
of the external dependencies change. This is useful for plugins which wrap
other plugin systems, e.g. a plugin which wraps a plugin-based visualisation
library and makes visualisations available as GStreamer elements, or a
codec loader which exposes elements and/or caps dependent on what external
codec libraries are currently installed.
Convenience wrapper function for <a href=""gstreamer/gstplugin.html#gst_plugin_add_dependency"">gst_plugin_add_dependency</a> which
takes simple strings as arguments instead of string arrays, with multiple
arguments separated by predefined delimiters (see above).
<b>Parameters:</b>
the <a href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a>
one or more environment variables (separated by ':', ';' or ','),
or <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a>. Environment variable names may be followed by a path component
which will be added to the content of the environment variable, e.g.
""HOME/.mystuff/plugins:MYSTUFF_PLUGINS_PATH""
one ore more directory paths (separated by ':' or ';' or ','),
or <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a>. Example: ""/usr/lib/mystuff/plugins""
one or more file names or file name suffixes (separated by commas),
or <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a>
optional flags, or <a href=""gstreamer/gstplugin.html#GST_PLUGIN_DEPENDENCY_FLAG_NONE"">GST_PLUGIN_DEPENDENCY_FLAG_NONE</a>
Make GStreamer aware of external dependencies which affect the feature
set of this plugin (ie. the elements or typefinders associated with it).
GStreamer will re-inspect plugins with external dependencies whenever any
of the external dependencies change. This is useful for plugins which wrap
other plugin systems, e.g. a plugin which wraps a plugin-based visualisation
library and makes visualisations available as GStreamer elements, or a
codec loader which exposes elements and/or caps dependent on what external
codec libraries are currently installed.
Convenience wrapper function for <a href=""gstreamer/gstplugin.html#gst_plugin_add_dependency"">Gst.Plugin.prototype.add_dependency</a> which
takes simple strings as arguments instead of string arrays, with multiple
arguments separated by predefined delimiters (see above).
<b>Parameters:</b>
the <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
one or more environment variables (separated by ':', ';' or ','),
or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a>. Environment variable names may be followed by a path component
which will be added to the content of the environment variable, e.g.
""HOME/.mystuff/plugins:MYSTUFF_PLUGINS_PATH""
one ore more directory paths (separated by ':' or ';' or ','),
or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a>. Example: ""/usr/lib/mystuff/plugins""
one or more file names or file name suffixes (separated by commas),
or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a>
optional flags, or <a href=""gstreamer/gstplugin.html#GST_PLUGIN_DEPENDENCY_FLAG_NONE"">Gst.PluginDependencyFlags.NONE</a>
Make GStreamer aware of external dependencies which affect the feature
set of this plugin (ie. the elements or typefinders associated with it).
GStreamer will re-inspect plugins with external dependencies whenever any
of the external dependencies change. This is useful for plugins which wrap
other plugin systems, e.g. a plugin which wraps a plugin-based visualisation
library and makes visualisations available as GStreamer elements, or a
codec loader which exposes elements and/or caps dependent on what external
codec libraries are currently installed.
Convenience wrapper function for <a href=""gstreamer/gstplugin.html#gst_plugin_add_dependency"">Gst.Plugin.add_dependency</a> which
takes simple strings as arguments instead of string arrays, with multiple
arguments separated by predefined delimiters (see above).
<b>Parameters:</b>
the <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
one or more environment variables (separated by ':', ';' or ','),
or <a href=""https://docs.python.org/3/library/constants.html#None"">None</a>. Environment variable names may be followed by a path component
which will be added to the content of the environment variable, e.g.
""HOME/.mystuff/plugins:MYSTUFF_PLUGINS_PATH""
one ore more directory paths (separated by ':' or ';' or ','),
or <a href=""https://docs.python.org/3/library/constants.html#None"">None</a>. Example: ""/usr/lib/mystuff/plugins""
one or more file names or file name suffixes (separated by commas),
or <a href=""https://docs.python.org/3/library/constants.html#None"">None</a>
optional flags, or <a href=""gstreamer/gstplugin.html#GST_PLUGIN_DEPENDENCY_FLAG_NONE"">Gst.PluginDependencyFlags.NONE</a>
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a>
the status error message

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
the status error message

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
the status error message

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a>
the status info message

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
the status info message

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
the status info message

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a>
the status warning message

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
the status warning message

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
the status warning message

	<b>Since</b>			: 1.24
		
Gets the plugin specific data cache. If it is <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a> there is no cached data
stored. This is the case when the registry is getting rebuilt.
<b>Parameters:</b>
a plugin
The cached data as a
<a href=""gstreamer/gststructure.html#GstStructure"">GstStructure</a> or <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a>.
Gets the plugin specific data cache. If it is <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a> there is no cached data
stored. This is the case when the registry is getting rebuilt.
<b>Parameters:</b>
a plugin
The cached data as a
<a href=""gstreamer/gststructure.html#GstStructure"">Gst.Structure</a> or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a>.
Gets the plugin specific data cache. If it is <a href=""https://docs.python.org/3/library/constants.html#None"">None</a> there is no cached data
stored. This is the case when the registry is getting rebuilt.
<b>Parameters:</b>
a plugin
The cached data as a
<a href=""gstreamer/gststructure.html#GstStructure"">Gst.Structure</a> or <a href=""https://docs.python.org/3/library/constants.html#None"">None</a>.
Get the long descriptive name of the plugin
<b>Parameters:</b>
plugin to get long name of
the long name of the plugin
Get the long descriptive name of the plugin
<b>Parameters:</b>
plugin to get long name of
the long name of the plugin
Get the long descriptive name of the plugin
<b>Parameters:</b>
plugin to get long name of
the long name of the plugin
get the filename of the plugin
<b>Parameters:</b>
plugin to get the filename of
the filename of the plugin
get the filename of the plugin
<b>Parameters:</b>
plugin to get the filename of
the filename of the plugin
get the filename of the plugin
<b>Parameters:</b>
plugin to get the filename of
the filename of the plugin
get the license of the plugin
<b>Parameters:</b>
plugin to get the license of
the license of the plugin
get the license of the plugin
<b>Parameters:</b>
plugin to get the license of
the license of the plugin
get the license of the plugin
<b>Parameters:</b>
plugin to get the license of
the license of the plugin
Get the short name of the plugin
<b>Parameters:</b>
plugin to get the name of
the name of the plugin
Get the short name of the plugin
<b>Parameters:</b>
plugin to get the name of
the name of the plugin
Get the short name of the plugin
<b>Parameters:</b>
plugin to get the name of
the name of the plugin
get the URL where the plugin comes from
<b>Parameters:</b>
plugin to get the origin of
the origin of the plugin
get the URL where the plugin comes from
<b>Parameters:</b>
plugin to get the origin of
the origin of the plugin
get the URL where the plugin comes from
<b>Parameters:</b>
plugin to get the origin of
the origin of the plugin
get the package the plugin belongs to.
<b>Parameters:</b>
plugin to get the package of
the package of the plugin
get the package the plugin belongs to.
<b>Parameters:</b>
plugin to get the package of
the package of the plugin
get the package the plugin belongs to.
<b>Parameters:</b>
plugin to get the package of
the package of the plugin
Get the release date (and possibly time) in form of a string, if available.
For normal GStreamer plugin releases this will usually just be a date in
the form of ""YYYY-MM-DD"", while pre-releases and builds from git may contain
a time component after the date as well, in which case the string will be
formatted like ""YYYY-MM-DDTHH:MMZ"" (e.g. ""2012-04-30T09:30Z"").
There may be plugins that do not have a valid release date set on them.
<b>Parameters:</b>
plugin to get the release date of
the date string of the plugin, or <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a> if not
available.
Get the release date (and possibly time) in form of a string, if available.
For normal GStreamer plugin releases this will usually just be a date in
the form of ""YYYY-MM-DD"", while pre-releases and builds from git may contain
a time component after the date as well, in which case the string will be
formatted like ""YYYY-MM-DDTHH:MMZ"" (e.g. ""2012-04-30T09:30Z"").
There may be plugins that do not have a valid release date set on them.
<b>Parameters:</b>
plugin to get the release date of
the date string of the plugin, or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a> if not
available.
Get the release date (and possibly time) in form of a string, if available.
For normal GStreamer plugin releases this will usually just be a date in
the form of ""YYYY-MM-DD"", while pre-releases and builds from git may contain
a time component after the date as well, in which case the string will be
formatted like ""YYYY-MM-DDTHH:MMZ"" (e.g. ""2012-04-30T09:30Z"").
There may be plugins that do not have a valid release date set on them.
<b>Parameters:</b>
plugin to get the release date of
the date string of the plugin, or <a href=""https://docs.python.org/3/library/constants.html#None"">None</a> if not
available.
get the source module the plugin belongs to.
<b>Parameters:</b>
plugin to get the source of
the source of the plugin
get the source module the plugin belongs to.
<b>Parameters:</b>
plugin to get the source of
the source of the plugin
get the source module the plugin belongs to.
<b>Parameters:</b>
plugin to get the source of
the source of the plugin
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a>
an array of plugin status error messages, or NULL

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
an array of plugin status error messages, or NULL

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
an array of plugin status error messages, or NULL

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a>
an array of plugin status info messages, or NULL

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
an array of plugin status info messages, or NULL

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
an array of plugin status info messages, or NULL

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a>
an array of plugin status warning messages, or NULL

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
an array of plugin status warning messages, or NULL

	<b>Since</b>			: 1.24
		
<b>Parameters:</b>
a <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
an array of plugin status warning messages, or NULL

	<b>Since</b>			: 1.24
		
get the version of the plugin
<b>Parameters:</b>
plugin to get the version of
the version of the plugin
get the version of the plugin
<b>Parameters:</b>
plugin to get the version of
the version of the plugin
get the version of the plugin
<b>Parameters:</b>
plugin to get the version of
the version of the plugin
queries if the plugin is loaded into memory
<b>Parameters:</b>
plugin to query
<a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#TRUE:CAPS"">TRUE</a> is loaded, <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#FALSE:CAPS"">FALSE</a> otherwise
queries if the plugin is loaded into memory
<b>Parameters:</b>
plugin to query
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"">true</a> is loaded, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"">false</a> otherwise
queries if the plugin is loaded into memory
<b>Parameters:</b>
plugin to query
<a href=""https://docs.python.org/3/library/constants.html#True"">True</a> is loaded, <a href=""https://docs.python.org/3/library/constants.html#False"">False</a> otherwise
Loads <em>plugin</em>. Note that the <em>return value</em> is the loaded plugin; <em>plugin</em> is
untouched. The normal use pattern of this function goes like this:
<b>Parameters:</b>
plugin to load
a reference to a loaded plugin, or
<a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a> on error.
Loads <em>plugin</em>. Note that the <em>return value</em> is the loaded plugin; <em>plugin</em> is
untouched. The normal use pattern of this function goes like this:
<b>Parameters:</b>
plugin to load
a reference to a loaded plugin, or
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a> on error.
Loads <em>plugin</em>. Note that the <em>return value</em> is the loaded plugin; <em>plugin</em> is
untouched. The normal use pattern of this function goes like this:
<b>Parameters:</b>
plugin to load
a reference to a loaded plugin, or
<a href=""https://docs.python.org/3/library/constants.html#None"">None</a> on error.
Adds plugin specific data to cache. Passes the ownership of the structure to
the <em>plugin</em>.
The cache is flushed every time the registry is rebuilt.
<b>Parameters:</b>
a plugin
a structure containing the data to cache
Adds plugin specific data to cache. Passes the ownership of the structure to
the <em>plugin</em>.
The cache is flushed every time the registry is rebuilt.
<b>Parameters:</b>
a plugin
a structure containing the data to cache
Adds plugin specific data to cache. Passes the ownership of the structure to
the <em>plugin</em>.
The cache is flushed every time the registry is rebuilt.
<b>Parameters:</b>
a plugin
a structure containing the data to cache
Unrefs each member of <em>list</em>, then frees the list.
<b>Parameters:</b>
list of <a href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a>
Unrefs each member of <em>list</em>, then frees the list.
<b>Parameters:</b>
list of <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
Unrefs each member of <em>list</em>, then frees the list.
<b>Parameters:</b>
list of <a href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>
Load the named plugin. Refs the plugin.
<b>Parameters:</b>
name of plugin to load
a reference to a loaded plugin, or
<a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a> on error.
Load the named plugin. Refs the plugin.
<b>Parameters:</b>
name of plugin to load
a reference to a loaded plugin, or
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a> on error.
Load the named plugin. Refs the plugin.
<b>Parameters:</b>
name of plugin to load
a reference to a loaded plugin, or
<a href=""https://docs.python.org/3/library/constants.html#None"">None</a> on error.
Loads the given plugin and refs it.  Caller needs to unref after use.
<b>Parameters:</b>
the plugin filename to load
pointer to a <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a>-valued GError
a reference to the existing loaded GstPlugin, a
reference to the newly-loaded GstPlugin, or <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a> if an error occurred.
Loads the given plugin and refs it.  Caller needs to unref after use.
<b>Parameters:</b>
the plugin filename to load
a reference to the existing loaded GstPlugin, a
reference to the newly-loaded GstPlugin, or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a> if an error occurred.
Loads the given plugin and refs it.  Caller needs to unref after use.
<b>Parameters:</b>
the plugin filename to load
a reference to the existing loaded GstPlugin, a
reference to the newly-loaded GstPlugin, or <a href=""https://docs.python.org/3/library/constants.html#None"">None</a> if an error occurred.
Registers a static plugin, ie. a plugin which is private to an application
or library and contained within the application or library (as opposed to
being shipped as a separate module file).
You must make sure that GStreamer has been initialised (with <a href=""gstreamer/gst.html#gst_init"">gst_init</a> or
via <a href=""gstreamer/gst.html#gst_init_get_option_group"">gst_init_get_option_group</a>) before calling this function.
<b>Parameters:</b>
the major version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MAJOR here
the minor version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MINOR here
a unique name of the plugin (ideally prefixed with an application- or
library-specific namespace prefix in order to avoid name conflicts in
case a similar plugin with the same name ever gets added to GStreamer)
description of the plugin
pointer to the init function of this plugin.
version string of the plugin
effective license of plugin. Must be one of the approved licenses
(see <a href=""gstreamer/gstplugin.html#GstPluginDesc"">GstPluginDesc</a> above) or the plugin will not be registered.
source module plugin belongs to
shipped package plugin belongs to
URL to provider of plugin
<a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#TRUE:CAPS"">TRUE</a> if the plugin was registered correctly, otherwise <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#FALSE:CAPS"">FALSE</a>.
Registers a static plugin, ie. a plugin which is private to an application
or library and contained within the application or library (as opposed to
being shipped as a separate module file).
You must make sure that GStreamer has been initialised (with <a href=""gstreamer/gst.html#gst_init"">Gst.prototype.init</a> or
via <a href=""gstreamer/gst.html#gst_init_get_option_group"">gst_init_get_option_group (not introspectable)</a>) before calling this function.
<b>Parameters:</b>
the major version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MAJOR here
the minor version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MINOR here
a unique name of the plugin (ideally prefixed with an application- or
library-specific namespace prefix in order to avoid name conflicts in
case a similar plugin with the same name ever gets added to GStreamer)
description of the plugin
pointer to the init function of this plugin.
version string of the plugin
effective license of plugin. Must be one of the approved licenses
(see <a href=""gstreamer/gstplugin.html#GstPluginDesc"">Gst.PluginDesc</a> above) or the plugin will not be registered.
source module plugin belongs to
shipped package plugin belongs to
URL to provider of plugin
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"">true</a> if the plugin was registered correctly, otherwise <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"">false</a>.
Registers a static plugin, ie. a plugin which is private to an application
or library and contained within the application or library (as opposed to
being shipped as a separate module file).
You must make sure that GStreamer has been initialised (with <a href=""gstreamer/gst.html#gst_init"">Gst.init</a> or
via <a href=""gstreamer/gst.html#gst_init_get_option_group"">gst_init_get_option_group (not introspectable)</a>) before calling this function.
<b>Parameters:</b>
the major version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MAJOR here
the minor version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MINOR here
a unique name of the plugin (ideally prefixed with an application- or
library-specific namespace prefix in order to avoid name conflicts in
case a similar plugin with the same name ever gets added to GStreamer)
description of the plugin
pointer to the init function of this plugin.
version string of the plugin
effective license of plugin. Must be one of the approved licenses
(see <a href=""gstreamer/gstplugin.html#GstPluginDesc"">Gst.PluginDesc</a> above) or the plugin will not be registered.
source module plugin belongs to
shipped package plugin belongs to
URL to provider of plugin
<a href=""https://docs.python.org/3/library/constants.html#True"">True</a> if the plugin was registered correctly, otherwise <a href=""https://docs.python.org/3/library/constants.html#False"">False</a>.
Registers a static plugin, ie. a plugin which is private to an application
or library and contained within the application or library (as opposed to
being shipped as a separate module file) with a <a href=""gstreamer/gstplugin.html#GstPluginInitFullFunc"">GstPluginInitFullFunc</a>
which allows user data to be passed to the callback function (useful
for bindings).
You must make sure that GStreamer has been initialised (with <a href=""gstreamer/gst.html#gst_init"">gst_init</a> or
via <a href=""gstreamer/gst.html#gst_init_get_option_group"">gst_init_get_option_group</a>) before calling this function.
<b>Parameters:</b>
the major version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MAJOR here
the minor version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MINOR here
a unique name of the plugin (ideally prefixed with an application- or
library-specific namespace prefix in order to avoid name conflicts in
case a similar plugin with the same name ever gets added to GStreamer)
description of the plugin
pointer to the init function with user data
of this plugin.
version string of the plugin
effective license of plugin. Must be one of the approved licenses
(see <a href=""gstreamer/gstplugin.html#GstPluginDesc"">GstPluginDesc</a> above) or the plugin will not be registered.
source module plugin belongs to
shipped package plugin belongs to
URL to provider of plugin
gpointer to user data
<a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#TRUE:CAPS"">TRUE</a> if the plugin was registered correctly, otherwise <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#FALSE:CAPS"">FALSE</a>.
Registers a static plugin, ie. a plugin which is private to an application
or library and contained within the application or library (as opposed to
being shipped as a separate module file) with a <a href=""gstreamer/gstplugin.html#GstPluginInitFullFunc"">Gst.PluginInitFullFunc</a>
which allows user data to be passed to the callback function (useful
for bindings).
You must make sure that GStreamer has been initialised (with <a href=""gstreamer/gst.html#gst_init"">Gst.prototype.init</a> or
via <a href=""gstreamer/gst.html#gst_init_get_option_group"">gst_init_get_option_group (not introspectable)</a>) before calling this function.
<b>Parameters:</b>
the major version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MAJOR here
the minor version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MINOR here
a unique name of the plugin (ideally prefixed with an application- or
library-specific namespace prefix in order to avoid name conflicts in
case a similar plugin with the same name ever gets added to GStreamer)
description of the plugin
pointer to the init function with user data
of this plugin.
version string of the plugin
effective license of plugin. Must be one of the approved licenses
(see <a href=""gstreamer/gstplugin.html#GstPluginDesc"">Gst.PluginDesc</a> above) or the plugin will not be registered.
source module plugin belongs to
shipped package plugin belongs to
URL to provider of plugin
gpointer to user data
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"">true</a> if the plugin was registered correctly, otherwise <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"">false</a>.
Registers a static plugin, ie. a plugin which is private to an application
or library and contained within the application or library (as opposed to
being shipped as a separate module file) with a <a href=""gstreamer/gstplugin.html#GstPluginInitFullFunc"">Gst.PluginInitFullFunc</a>
which allows user data to be passed to the callback function (useful
for bindings).
You must make sure that GStreamer has been initialised (with <a href=""gstreamer/gst.html#gst_init"">Gst.init</a> or
via <a href=""gstreamer/gst.html#gst_init_get_option_group"">gst_init_get_option_group (not introspectable)</a>) before calling this function.
<b>Parameters:</b>
the major version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MAJOR here
the minor version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MINOR here
a unique name of the plugin (ideally prefixed with an application- or
library-specific namespace prefix in order to avoid name conflicts in
case a similar plugin with the same name ever gets added to GStreamer)
description of the plugin
pointer to the init function with user data
of this plugin.
version string of the plugin
effective license of plugin. Must be one of the approved licenses
(see <a href=""gstreamer/gstplugin.html#GstPluginDesc"">Gst.PluginDesc</a> above) or the plugin will not be registered.
source module plugin belongs to
shipped package plugin belongs to
URL to provider of plugin
gpointer to user data
<a href=""https://docs.python.org/3/library/constants.html#True"">True</a> if the plugin was registered correctly, otherwise <a href=""https://docs.python.org/3/library/constants.html#False"">False</a>.
A plugin should export a variable of this type called plugin_desc. The plugin
loader will use the data provided there to initialize the plugin.
The <em>licence</em> parameter must be one of: LGPL, GPL, QPL, GPL/QPL, MPL,
BSD, MIT/X11, Proprietary, unknown.
the major version number of core that plugin was compiled for
the minor version number of core that plugin was compiled for
a unique name of the plugin
description of plugin
pointer to the init function of this plugin.
version of the plugin
effective license of plugin
source module plugin belongs to
shipped package plugin belongs to
URL to provider of plugin
date time string in ISO 8601
format (or rather, a subset thereof), or <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS"">NULL</a>. Allowed are the
following formats: ""YYYY-MM-DD"" and ""YYY-MM-DDTHH:MMZ"" (with
'T' a separator and 'Z' indicating UTC/Zulu time). This field
should be set via the GST_PACKAGE_RELEASE_DATETIME
preprocessor macro.
A plugin should export a variable of this type called plugin_desc. The plugin
loader will use the data provided there to initialize the plugin.
The <em>licence</em> parameter must be one of: LGPL, GPL, QPL, GPL/QPL, MPL,
BSD, MIT/X11, Proprietary, unknown.
the major version number of core that plugin was compiled for
the minor version number of core that plugin was compiled for
a unique name of the plugin
description of plugin
pointer to the init function of this plugin.
version of the plugin
effective license of plugin
source module plugin belongs to
shipped package plugin belongs to
URL to provider of plugin
date time string in ISO 8601
format (or rather, a subset thereof), or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"">null</a>. Allowed are the
following formats: ""YYYY-MM-DD"" and ""YYY-MM-DDTHH:MMZ"" (with
'T' a separator and 'Z' indicating UTC/Zulu time). This field
should be set via the GST_PACKAGE_RELEASE_DATETIME
preprocessor macro.
A plugin should export a variable of this type called plugin_desc. The plugin
loader will use the data provided there to initialize the plugin.
The <em>licence</em> parameter must be one of: LGPL, GPL, QPL, GPL/QPL, MPL,
BSD, MIT/X11, Proprietary, unknown.
the major version number of core that plugin was compiled for
the minor version number of core that plugin was compiled for
a unique name of the plugin
description of plugin
pointer to the init function of this plugin.
version of the plugin
effective license of plugin
source module plugin belongs to
shipped package plugin belongs to
URL to provider of plugin
date time string in ISO 8601
format (or rather, a subset thereof), or <a href=""https://docs.python.org/3/library/constants.html#None"">None</a>. Allowed are the
following formats: ""YYYY-MM-DD"" and ""YYY-MM-DDTHH:MMZ"" (with
'T' a separator and 'Z' indicating UTC/Zulu time). This field
should be set via the GST_PACKAGE_RELEASE_DATETIME
preprocessor macro.
Get the error quark.
The error quark used in GError messages
Get the error quark.
The error quark used in GError messages
Get the error quark.
The error quark used in GError messages
This macro needs to be used to define the entry point and meta data of a
plugin. One would use this macro to export a plugin, so that it can be used
by other applications.
The macro uses a define named PACKAGE for the <a href=""gstreamer/gstplugin.html#GstPluginDesc"">GstPluginDesc</a>,source field.
When using autoconf, this is usually set automatically via the AC_INIT
macro, and set in config.h. If you are not using autoconf, you will need to
define PACKAGE yourself and set it to a short mnemonic string identifying
your application/package, e.g. 'someapp' or 'my-plugins-foo.
If defined, the GST_PACKAGE_RELEASE_DATETIME will also be used for the
<a href=""gstreamer/gstplugin.html#GstPluginDesc"">GstPluginDesc</a>,release_datetime field.
<b>Parameters:</b>
major version number of the gstreamer-core that plugin was compiled for
minor version number of the gstreamer-core that plugin was compiled for
short, but unique name of the plugin
information about the purpose of the plugin
function pointer to the plugin_init method with the signature of <code>static gboolean plugin_init (GstPlugin * plugin)</code>.
full version string (e.g. VERSION from config.h)
under which licence the package has been released, e.g. GPL, LGPL.
the package-name (e.g. PACKAGE_NAME from config.h)
a description from where the package comes from (e.g. the homepage URL)
This macro can be used to initialize statically linked plugins. It is
necessary to call this macro before the plugin can be used.
It has to be used in combination with GST_PLUGIN_STATIC_REGISTER
and must be placed outside any block to declare the plugin initialization
function.
<b>Parameters:</b>
short, but unique name of the plugin

	<b>Since</b>			: 1.2
		
This macro can be used to initialize statically linked plugins. It is
necessary to call this macro before the plugin can be used.
It has to be used in combination with GST_PLUGIN_STATIC_DECLARE and
calls the plugin initialization function.
<b>Parameters:</b>
short, but unique name of the plugin

	<b>Since</b>			: 1.2
		
Flags used in connection with <a href=""gstreamer/gstplugin.html#gst_plugin_add_dependency"">gst_plugin_add_dependency</a>.
no special flags
recurse into subdirectories
use paths
argument only if none of the environment variables is set
interpret
filename argument as filter suffix and check all matching files in
the directory
interpret
filename argument as filter prefix and check all matching files in
the directory. Since: 1.8.
interpret
non-absolute paths as relative to the main executable directory. Since
1.14.
Flags used in connection with <a href=""gstreamer/gstplugin.html#gst_plugin_add_dependency"">Gst.Plugin.prototype.add_dependency</a>.
no special flags
recurse into subdirectories
use paths
argument only if none of the environment variables is set
interpret
filename argument as filter suffix and check all matching files in
the directory
interpret
filename argument as filter prefix and check all matching files in
the directory. Since: 1.8.
interpret
non-absolute paths as relative to the main executable directory. Since
1.14.
Flags used in connection with <a href=""gstreamer/gstplugin.html#gst_plugin_add_dependency"">Gst.Plugin.add_dependency</a>.
no special flags
recurse into subdirectories
use paths
argument only if none of the environment variables is set
interpret
filename argument as filter suffix and check all matching files in
the directory
interpret
filename argument as filter prefix and check all matching files in
the directory. Since: 1.8.
interpret
non-absolute paths as relative to the main executable directory. Since
1.14.
The plugin loading errors
The plugin could not be loaded
The plugin has unresolved dependencies
The plugin has already be loaded from a different file
The plugin loading errors
The plugin could not be loaded
The plugin has unresolved dependencies
The plugin has already be loaded from a different file
The plugin loading errors
The plugin could not be loaded
The plugin has unresolved dependencies
The plugin has already be loaded from a different file
The plugin loading state
Temporarily loaded plugins
The plugin won't be scanned (again)
The plugin loading state
Temporarily loaded plugins
The plugin won't be scanned (again)
The plugin loading state
Temporarily loaded plugins
The plugin won't be scanned (again)
To be used in GST_PLUGIN_DEFINE if unsure about the licence.
To be used in GST_PLUGIN_DEFINE if unsure about the licence.
To be used in GST_PLUGIN_DEFINE if unsure about the licence.
The error message category quark
A function that can be used with e.g. <a href=""gstreamer/gstregistry.html#gst_registry_plugin_filter"">gst_registry_plugin_filter</a>
to get a list of plugins that match certain criteria.
<b>Parameters:</b>
the plugin to check
the user_data that has been passed on e.g. <a href=""gstreamer/gstregistry.html#gst_registry_plugin_filter"">gst_registry_plugin_filter</a>
<a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#TRUE:CAPS"">TRUE</a> for a positive match, <a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#FALSE:CAPS"">FALSE</a> otherwise
A function that can be used with e.g. <a href=""gstreamer/gstregistry.html#gst_registry_plugin_filter"">Gst.Registry.prototype.plugin_filter</a>
to get a list of plugins that match certain criteria.
<b>Parameters:</b>
the plugin to check
the user_data that has been passed on e.g. <a href=""gstreamer/gstregistry.html#gst_registry_plugin_filter"">Gst.Registry.prototype.plugin_filter</a>
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"">true</a> for a positive match, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"">false</a> otherwise
A function that can be used with e.g. <a href=""gstreamer/gstregistry.html#gst_registry_plugin_filter"">Gst.Registry.plugin_filter</a>
to get a list of plugins that match certain criteria.
<b>Parameters:</b>
the plugin to check
the user_data that has been passed on e.g. <a href=""gstreamer/gstregistry.html#gst_registry_plugin_filter"">Gst.Registry.plugin_filter</a>
<a href=""https://docs.python.org/3/library/constants.html#True"">True</a> for a positive match, <a href=""https://docs.python.org/3/library/constants.html#False"">False</a> otherwise
A plugin should provide a pointer to a function of either <a href=""gstreamer/gstplugin.html#GstPluginInitFunc"">GstPluginInitFunc</a>
or this type in the plugin_desc struct.
The function will be called by the loader at startup. One would then
register each <a href=""gstreamer/gstpluginfeature.html#GstPluginFeature"">GstPluginFeature</a>. This version allows
user data to be passed to init function (useful for bindings).
<b>Parameters:</b>
The plugin object
extra data
<a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#TRUE:CAPS"">TRUE</a> if plugin initialised successfully
A plugin should provide a pointer to a function of either <a href=""gstreamer/gstplugin.html#GstPluginInitFunc"">Gst.PluginInitFunc</a>
or this type in the plugin_desc struct.
The function will be called by the loader at startup. One would then
register each <a href=""gstreamer/gstpluginfeature.html#GstPluginFeature"">Gst.PluginFeature</a>. This version allows
user data to be passed to init function (useful for bindings).
<b>Parameters:</b>
The plugin object
extra data
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"">true</a> if plugin initialised successfully
A plugin should provide a pointer to a function of either <a href=""gstreamer/gstplugin.html#GstPluginInitFunc"">Gst.PluginInitFunc</a>
or this type in the plugin_desc struct.
The function will be called by the loader at startup. One would then
register each <a href=""gstreamer/gstpluginfeature.html#GstPluginFeature"">Gst.PluginFeature</a>. This version allows
user data to be passed to init function (useful for bindings).
<b>Parameters:</b>
The plugin object
extra data
<a href=""https://docs.python.org/3/library/constants.html#True"">True</a> if plugin initialised successfully
A plugin should provide a pointer to a function of this type in the
plugin_desc struct.
This function will be called by the loader at startup. One would then
register each <a href=""gstreamer/gstpluginfeature.html#GstPluginFeature"">GstPluginFeature</a>.
<b>Parameters:</b>
The plugin object
<a href=""https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#TRUE:CAPS"">TRUE</a> if plugin initialised successfully
A plugin should provide a pointer to a function of this type in the
plugin_desc struct.
This function will be called by the loader at startup. One would then
register each <a href=""gstreamer/gstpluginfeature.html#GstPluginFeature"">Gst.PluginFeature</a>.
<b>Parameters:</b>
The plugin object
<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"">true</a> if plugin initialised successfully
A plugin should provide a pointer to a function of this type in the
plugin_desc struct.
This function will be called by the loader at startup. One would then
register each <a href=""gstreamer/gstpluginfeature.html#GstPluginFeature"">Gst.PluginFeature</a>.
<b>Parameters:</b>
The plugin object
<a href=""https://docs.python.org/3/library/constants.html#True"">True</a> if plugin initialised successfully
The results of the search are
<a href=""https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#GObject-struct"" title=""GObject"">GObject</a>
    <span class=""lineart"">╰──</span><a href=""https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#GInitiallyUnowned"" title=""GInitiallyUnowned"">GInitiallyUnowned</a>
        <span class=""lineart"">╰──</span><a href=""gstreamer/gstobject.html#GstObject"" title=""GstObject"">GstObject</a>
            <span class=""lineart"">╰──</span>GstPlugin

<a title=""GObject.Object"" href=""https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#GObject-struct"">GObject.Object</a>
    <span class=""lineart"">╰──</span><a href=""https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#GInitiallyUnowned"" title=""GObject.InitiallyUnowned"">GObject.InitiallyUnowned</a>
        <span class=""lineart"">╰──</span><a title=""Gst.Object"" href=""gstreamer/gstobject.html#GstObject"">Gst.Object</a>
            <span class=""lineart"">╰──</span>Gst.Plugin

<a title=""GObject.Object"" href=""https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#GObject-struct"">GObject.Object</a>
    <span class=""lineart"">╰──</span><a title=""GObject.InitiallyUnowned"" href=""https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#GInitiallyUnowned"">GObject.InitiallyUnowned</a>
        <span class=""lineart"">╰──</span><a href=""gstreamer/gstobject.html#GstObject"" title=""Gst.Object"">Gst.Object</a>
            <span class=""lineart"">╰──</span>Gst.Plugin

gst_plugin_add_dependency (<a href=""gstreamer/gstplugin.html#GstPlugin"" title=""GstPlugin"">GstPlugin</a> * plugin,
                           const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> ** env_vars,
                           const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> ** paths,
                           const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> ** names,
                           <a href=""gstreamer/gstplugin.html#GstPluginDependencyFlags"" title=""GstPluginDependencyFlags"">GstPluginDependencyFlags</a> flags)
<code>function Gst.Plugin.prototype.add_dependency(env_vars: [ <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a> ], paths: [ <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a> ], names: [ <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a> ], flags: <a href=""gstreamer/gstplugin.html#GstPluginDependencyFlags"" title=""Gst.PluginDependencyFlags"">Gst.PluginDependencyFlags</a>): {
    // javascript wrapper for 'gst_plugin_add_dependency'
}</code>
<code>def Gst.Plugin.add_dependency (self, env_vars, paths, names, flags):
    #python wrapper for 'gst_plugin_add_dependency'</code>
gst_plugin_add_dependency_simple (<a title=""GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a> * plugin,
                                  const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> * env_vars,
                                  const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> * paths,
                                  const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> * names,
                                  <a title=""GstPluginDependencyFlags"" href=""gstreamer/gstplugin.html#GstPluginDependencyFlags"">GstPluginDependencyFlags</a> flags)
<code>function Gst.Plugin.prototype.add_dependency_simple(env_vars: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, paths: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>, names: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>, flags: <a title=""Gst.PluginDependencyFlags"" href=""gstreamer/gstplugin.html#GstPluginDependencyFlags"">Gst.PluginDependencyFlags</a>): {
    // javascript wrapper for 'gst_plugin_add_dependency_simple'
}</code>
<code>def Gst.Plugin.add_dependency_simple (self, env_vars, paths, names, flags):
    #python wrapper for 'gst_plugin_add_dependency_simple'</code>
gst_plugin_add_status_error (<a title=""GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a> * plugin,
                             const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> * message)
<code>function Gst.Plugin.prototype.add_status_error(message: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>): {
    // javascript wrapper for 'gst_plugin_add_status_error'
}</code>
<code>def Gst.Plugin.add_status_error (self, message):
    #python wrapper for 'gst_plugin_add_status_error'</code>
gst_plugin_add_status_info (<a title=""GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a> * plugin,
                            const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> * message)
<code>function Gst.Plugin.prototype.add_status_info(message: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>): {
    // javascript wrapper for 'gst_plugin_add_status_info'
}</code>
<code>def Gst.Plugin.add_status_info (self, message):
    #python wrapper for 'gst_plugin_add_status_info'</code>
gst_plugin_add_status_warning (<a href=""gstreamer/gstplugin.html#GstPlugin"" title=""GstPlugin"">GstPlugin</a> * plugin,
                               const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> * message)
<code>function Gst.Plugin.prototype.add_status_warning(message: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>): {
    // javascript wrapper for 'gst_plugin_add_status_warning'
}</code>
<code>def Gst.Plugin.add_status_warning (self, message):
    #python wrapper for 'gst_plugin_add_status_warning'</code>
const <a href=""gstreamer/gststructure.html#GstStructure"" title=""GstStructure"">GstStructure</a> *
gst_plugin_get_cache_data (<a title=""GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a> * plugin)
<code>function Gst.Plugin.prototype.get_cache_data(): {
    // javascript wrapper for 'gst_plugin_get_cache_data'
}</code>
<code>def Gst.Plugin.get_cache_data (self):
    #python wrapper for 'gst_plugin_get_cache_data'</code>
const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> *
gst_plugin_get_description (<a href=""gstreamer/gstplugin.html#GstPlugin"" title=""GstPlugin"">GstPlugin</a> * plugin)
<code>function Gst.Plugin.prototype.get_description(): {
    // javascript wrapper for 'gst_plugin_get_description'
}</code>
<code>def Gst.Plugin.get_description (self):
    #python wrapper for 'gst_plugin_get_description'</code>
const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> *
gst_plugin_get_filename (<a href=""gstreamer/gstplugin.html#GstPlugin"" title=""GstPlugin"">GstPlugin</a> * plugin)
<code>function Gst.Plugin.prototype.get_filename(): {
    // javascript wrapper for 'gst_plugin_get_filename'
}</code>
<code>def Gst.Plugin.get_filename (self):
    #python wrapper for 'gst_plugin_get_filename'</code>
const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> *
gst_plugin_get_license (<a title=""GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a> * plugin)
<code>function Gst.Plugin.prototype.get_license(): {
    // javascript wrapper for 'gst_plugin_get_license'
}</code>
<code>def Gst.Plugin.get_license (self):
    #python wrapper for 'gst_plugin_get_license'</code>
const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> *
gst_plugin_get_name (<a title=""GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a> * plugin)
<code>function Gst.Plugin.prototype.get_name(): {
    // javascript wrapper for 'gst_plugin_get_name'
}</code>
<code>def Gst.Plugin.get_name (self):
    #python wrapper for 'gst_plugin_get_name'</code>
const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> *
gst_plugin_get_origin (<a href=""gstreamer/gstplugin.html#GstPlugin"" title=""GstPlugin"">GstPlugin</a> * plugin)
<code>function Gst.Plugin.prototype.get_origin(): {
    // javascript wrapper for 'gst_plugin_get_origin'
}</code>
<code>def Gst.Plugin.get_origin (self):
    #python wrapper for 'gst_plugin_get_origin'</code>
const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> *
gst_plugin_get_package (<a href=""gstreamer/gstplugin.html#GstPlugin"" title=""GstPlugin"">GstPlugin</a> * plugin)
<code>function Gst.Plugin.prototype.get_package(): {
    // javascript wrapper for 'gst_plugin_get_package'
}</code>
<code>def Gst.Plugin.get_package (self):
    #python wrapper for 'gst_plugin_get_package'</code>
const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> *
gst_plugin_get_release_date_string (<a href=""gstreamer/gstplugin.html#GstPlugin"" title=""GstPlugin"">GstPlugin</a> * plugin)
<code>function Gst.Plugin.prototype.get_release_date_string(): {
    // javascript wrapper for 'gst_plugin_get_release_date_string'
}</code>
<code>def Gst.Plugin.get_release_date_string (self):
    #python wrapper for 'gst_plugin_get_release_date_string'</code>
const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> *
gst_plugin_get_source (<a href=""gstreamer/gstplugin.html#GstPlugin"" title=""GstPlugin"">GstPlugin</a> * plugin)
<code>function Gst.Plugin.prototype.get_source(): {
    // javascript wrapper for 'gst_plugin_get_source'
}</code>
<code>def Gst.Plugin.get_source (self):
    #python wrapper for 'gst_plugin_get_source'</code>
<a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> **
gst_plugin_get_status_errors (<a href=""gstreamer/gstplugin.html#GstPlugin"" title=""GstPlugin"">GstPlugin</a> * plugin)
<code>function Gst.Plugin.prototype.get_status_errors(): {
    // javascript wrapper for 'gst_plugin_get_status_errors'
}</code>
<code>def Gst.Plugin.get_status_errors (self):
    #python wrapper for 'gst_plugin_get_status_errors'</code>
<a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> **
gst_plugin_get_status_infos (<a title=""GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a> * plugin)
<code>function Gst.Plugin.prototype.get_status_infos(): {
    // javascript wrapper for 'gst_plugin_get_status_infos'
}</code>
<code>def Gst.Plugin.get_status_infos (self):
    #python wrapper for 'gst_plugin_get_status_infos'</code>
<a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> **
gst_plugin_get_status_warnings (<a title=""GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a> * plugin)
<code>function Gst.Plugin.prototype.get_status_warnings(): {
    // javascript wrapper for 'gst_plugin_get_status_warnings'
}</code>
<code>def Gst.Plugin.get_status_warnings (self):
    #python wrapper for 'gst_plugin_get_status_warnings'</code>
const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> *
gst_plugin_get_version (<a href=""gstreamer/gstplugin.html#GstPlugin"" title=""GstPlugin"">GstPlugin</a> * plugin)
<code>function Gst.Plugin.prototype.get_version(): {
    // javascript wrapper for 'gst_plugin_get_version'
}</code>
<code>def Gst.Plugin.get_version (self):
    #python wrapper for 'gst_plugin_get_version'</code>
<a title=""gboolean"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gboolean"">gboolean</a>
gst_plugin_is_loaded (<a title=""GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a> * plugin)
<code>function Gst.Plugin.prototype.is_loaded(): {
    // javascript wrapper for 'gst_plugin_is_loaded'
}</code>
<code>def Gst.Plugin.is_loaded (self):
    #python wrapper for 'gst_plugin_is_loaded'</code>
<a title=""GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a> *
gst_plugin_load (<a title=""GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a> * plugin)
<code class=""language-[""> GstPlugin *loaded_plugin;
 loaded_plugin = gst_plugin_load (plugin);
 // presumably, we're no longer interested in the potentially-unloaded plugin
 gst_object_unref (plugin);
 plugin = loaded_plugin;
</code>
<code>function Gst.Plugin.prototype.load(): {
    // javascript wrapper for 'gst_plugin_load'
}</code>
<code class=""language-[""> GstPlugin *loaded_plugin;
 loaded_plugin = gst_plugin_load (plugin);
 // presumably, we're no longer interested in the potentially-unloaded plugin
 gst_object_unref (plugin);
 plugin = loaded_plugin;
</code>
<code>def Gst.Plugin.load (self):
    #python wrapper for 'gst_plugin_load'</code>
<code class=""language-[""> GstPlugin *loaded_plugin;
 loaded_plugin = gst_plugin_load (plugin);
 // presumably, we're no longer interested in the potentially-unloaded plugin
 gst_object_unref (plugin);
 plugin = loaded_plugin;
</code>
gst_plugin_set_cache_data (<a href=""gstreamer/gstplugin.html#GstPlugin"" title=""GstPlugin"">GstPlugin</a> * plugin,
                           <a title=""GstStructure"" href=""gstreamer/gststructure.html#GstStructure"">GstStructure</a> * cache_data)
<code>function Gst.Plugin.prototype.set_cache_data(cache_data: <a href=""gstreamer/gststructure.html#GstStructure"" title=""Gst.Structure"">Gst.Structure</a>): {
    // javascript wrapper for 'gst_plugin_set_cache_data'
}</code>
<code>def Gst.Plugin.set_cache_data (self, cache_data):
    #python wrapper for 'gst_plugin_set_cache_data'</code>
gst_plugin_list_free (<a href=""https://developer.gnome.org/glib/unstable/glib-Doubly-Linked-Lists.html#GList"" title=""GList"">GList</a> * list)
<code>function Gst.Plugin.prototype.list_free(list: [ <a title=""Gst.Plugin"" href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a> ]): {
    // javascript wrapper for 'gst_plugin_list_free'
}</code>
<code>def Gst.Plugin.list_free (list):
    #python wrapper for 'gst_plugin_list_free'</code>
<a title=""GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a> *
gst_plugin_load_by_name (const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> * name)
<code>function Gst.Plugin.prototype.load_by_name(name: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>): {
    // javascript wrapper for 'gst_plugin_load_by_name'
}</code>
<code>def Gst.Plugin.load_by_name (name):
    #python wrapper for 'gst_plugin_load_by_name'</code>
<a title=""GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a> *
gst_plugin_load_file (const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> * filename,
                      <a href=""https://developer.gnome.org/glib/unstable/glib-Error-Reporting.html#GError"" title=""GError"">GError</a> ** error)
<code>function Gst.Plugin.prototype.load_file(filename: filename): {
    // javascript wrapper for 'gst_plugin_load_file'
}</code>
<code>@raises(<a href=""https://developer.gnome.org/glib/stable/glib-Error-Reporting.html"">GLib.GError</a>)
def Gst.Plugin.load_file (filename):
    #python wrapper for 'gst_plugin_load_file'</code>
<a title=""gboolean"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gboolean"">gboolean</a>
gst_plugin_register_static (<a title=""gint"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gint"">gint</a> major_version,
                            <a title=""gint"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gint"">gint</a> minor_version,
                            const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> * name,
                            const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> * description,
                            <a title=""GstPluginInitFunc"" href=""gstreamer/gstplugin.html#GstPluginInitFunc"">GstPluginInitFunc</a> init_func,
                            const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> * version,
                            const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> * license,
                            const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> * source,
                            const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> * package,
                            const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> * origin)
<code>function Gst.Plugin.prototype.register_static(major_version: <a title=""Number"" href=""https://developer.mozilla.org/en-US/docs/Glossary/Number"">Number</a>, minor_version: <a href=""https://developer.mozilla.org/en-US/docs/Glossary/Number"" title=""Number"">Number</a>, name: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, description: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>, init_func: <a href=""gstreamer/gstplugin.html#GstPluginInitFunc"" title=""Gst.PluginInitFunc"">Gst.PluginInitFunc</a>, version: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, license: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, source: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, package: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>, origin: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>): {
    // javascript wrapper for 'gst_plugin_register_static'
}</code>
<code>def Gst.Plugin.register_static (major_version, minor_version, name, description, init_func, version, license, source, package, origin):
    #python wrapper for 'gst_plugin_register_static'</code>
<a title=""gboolean"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gboolean"">gboolean</a>
gst_plugin_register_static_full (<a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gint"" title=""gint"">gint</a> major_version,
                                 <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gint"" title=""gint"">gint</a> minor_version,
                                 const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> * name,
                                 const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> * description,
                                 <a href=""gstreamer/gstplugin.html#GstPluginInitFullFunc"" title=""GstPluginInitFullFunc"">GstPluginInitFullFunc</a> init_full_func,
                                 const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> * version,
                                 const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> * license,
                                 const <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"" title=""gchar"">gchar</a> * source,
                                 const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> * package,
                                 const <a title=""gchar"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gchar"">gchar</a> * origin,
                                 <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gpointer"" title=""gpointer"">gpointer</a> user_data)
<code>function Gst.Plugin.prototype.register_static_full(major_version: <a title=""Number"" href=""https://developer.mozilla.org/en-US/docs/Glossary/Number"">Number</a>, minor_version: <a title=""Number"" href=""https://developer.mozilla.org/en-US/docs/Glossary/Number"">Number</a>, name: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, description: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>, init_full_func: <a href=""gstreamer/gstplugin.html#GstPluginInitFullFunc"" title=""Gst.PluginInitFullFunc"">Gst.PluginInitFullFunc</a>, version: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>, license: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, source: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, package: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, origin: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>, user_data: <a title=""Object"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"">Object</a>): {
    // javascript wrapper for 'gst_plugin_register_static_full'
}</code>
<code>def Gst.Plugin.register_static_full (major_version, minor_version, name, description, init_full_func, version, license, source, package, origin, *user_data):
    #python wrapper for 'gst_plugin_register_static_full'</code>
<a title=""GQuark"" href=""https://developer.gnome.org/glib/unstable/glib-Quarks.html#GQuark"">GQuark</a>
gst_plugin_error_quark ()
<code>function Gst.prototype.plugin_error_quark(): {
    // javascript wrapper for 'gst_plugin_error_quark'
}</code>
<code>def Gst.plugin_error_quark ():
    #python wrapper for 'gst_plugin_error_quark'</code>
#define GST_PLUGIN_CAST(obj)           ((GstPlugin*)(obj))

#define GST_PLUGIN_DEFINE(major,minor,name,description,init,version,license,package,origin) \
G_BEGIN_DECLS \
GST_PLUGIN_EXPORT const GstPluginDesc * G_PASTE(gst_plugin_, G_PASTE(name, _get_desc)) (void); \
GST_PLUGIN_EXPORT void G_PASTE(gst_plugin_, G_PASTE(name, _register)) (void); \
\
static const GstPluginDesc gst_plugin_desc = { \
  major, \
  minor, \
  G_STRINGIFY(name), \
  (gchar *) description, \
  init, \
  version, \
  license, \
  PACKAGE, \
  package, \
  origin, \
  __GST_PACKAGE_RELEASE_DATETIME, \
  GST_PADDING_INIT \
};                                       \
\
const GstPluginDesc * \
G_PASTE(gst_plugin_, G_PASTE(name, _get_desc)) (void) \
{ \
    return &amp;gst_plugin_desc; \
} \
\
void \
G_PASTE(gst_plugin_, G_PASTE(name, _register)) (void) \
{ \
  gst_plugin_register_static (major, minor, G_STRINGIFY(name), \
      description, init, version, license, \
      PACKAGE, package, origin); \
} \
G_END_DECLS

#define GST_PLUGIN_STATIC_DECLARE(name) \
  extern void G_PASTE(gst_plugin_, G_PASTE(name, _register)) (void)

#define GST_PLUGIN_STATIC_REGISTER(name) G_PASTE(gst_plugin_, G_PASTE(name, _register)) ()

#define GST_LICENSE_UNKNOWN ""unknown""

#define GST_PLUGIN_ERROR gst_plugin_error_quark ()

#define __GST_PACKAGE_RELEASE_DATETIME GST_PACKAGE_RELEASE_DATETIME

<a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gboolean"" title=""gboolean"">gboolean</a>
(*GstPluginFilter) (<a title=""GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a> * plugin,
                    <a title=""gpointer"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gpointer"">gpointer</a> user_data)
<code>function Gst.PluginFilter(plugin: <a title=""Gst.Plugin"" href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>, user_data: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" title=""Object"">Object</a>): {
    // javascript wrapper for 'GstPluginFilter'
}</code>
<code>def Gst.PluginFilter (plugin, *user_data):
    #python wrapper for 'GstPluginFilter'</code>
<a title=""gboolean"" href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gboolean"">gboolean</a>
(*GstPluginInitFullFunc) (<a title=""GstPlugin"" href=""gstreamer/gstplugin.html#GstPlugin"">GstPlugin</a> * plugin,
                          <a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gpointer"" title=""gpointer"">gpointer</a> user_data)
<code>function Gst.PluginInitFullFunc(plugin: <a href=""gstreamer/gstplugin.html#GstPlugin"" title=""Gst.Plugin"">Gst.Plugin</a>, user_data: <a title=""Object"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"">Object</a>): {
    // javascript wrapper for 'GstPluginInitFullFunc'
}</code>
<code>def Gst.PluginInitFullFunc (plugin, *user_data):
    #python wrapper for 'GstPluginInitFullFunc'</code>
<a href=""https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gboolean"" title=""gboolean"">gboolean</a>
(*GstPluginInitFunc) (<a href=""gstreamer/gstplugin.html#GstPlugin"" title=""GstPlugin"">GstPlugin</a> * plugin)
<code>function Gst.PluginInitFunc(plugin: <a href=""gstreamer/gstplugin.html#GstPlugin"" title=""Gst.Plugin"">Gst.Plugin</a>): {
    // javascript wrapper for 'GstPluginInitFunc'
}</code>
<code>def Gst.PluginInitFunc (plugin):
    #python wrapper for 'GstPluginInitFunc'</code>
gst_plugin_desc
gst_plugin_desc
plugin
env_vars
paths
names
flags
function Gst.Plugin.prototype.add_dependency(env_vars: [ <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a> ], paths: [ <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a> ], names: [ <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a> ], flags: <a href=""gstreamer/gstplugin.html#GstPluginDependencyFlags"" title=""Gst.PluginDependencyFlags"">Gst.PluginDependencyFlags</a>): {
    // javascript wrapper for 'gst_plugin_add_dependency'
}
plugin
env_vars
paths
names
flags
def Gst.Plugin.add_dependency (self, env_vars, paths, names, flags):
    #python wrapper for 'gst_plugin_add_dependency'
plugin
env_vars
paths
names
flags
plugin
env_vars
paths
names
flags
function Gst.Plugin.prototype.add_dependency_simple(env_vars: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, paths: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>, names: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>, flags: <a title=""Gst.PluginDependencyFlags"" href=""gstreamer/gstplugin.html#GstPluginDependencyFlags"">Gst.PluginDependencyFlags</a>): {
    // javascript wrapper for 'gst_plugin_add_dependency_simple'
}
plugin
env_vars
paths
names
flags
def Gst.Plugin.add_dependency_simple (self, env_vars, paths, names, flags):
    #python wrapper for 'gst_plugin_add_dependency_simple'
plugin
env_vars
paths
names
flags
plugin
message
function Gst.Plugin.prototype.add_status_error(message: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>): {
    // javascript wrapper for 'gst_plugin_add_status_error'
}
plugin
message
def Gst.Plugin.add_status_error (self, message):
    #python wrapper for 'gst_plugin_add_status_error'
plugin
message
plugin
message
function Gst.Plugin.prototype.add_status_info(message: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>): {
    // javascript wrapper for 'gst_plugin_add_status_info'
}
plugin
message
def Gst.Plugin.add_status_info (self, message):
    #python wrapper for 'gst_plugin_add_status_info'
plugin
message
plugin
message
function Gst.Plugin.prototype.add_status_warning(message: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>): {
    // javascript wrapper for 'gst_plugin_add_status_warning'
}
plugin
message
def Gst.Plugin.add_status_warning (self, message):
    #python wrapper for 'gst_plugin_add_status_warning'
plugin
message
plugin
function Gst.Plugin.prototype.get_cache_data(): {
    // javascript wrapper for 'gst_plugin_get_cache_data'
}
plugin
def Gst.Plugin.get_cache_data (self):
    #python wrapper for 'gst_plugin_get_cache_data'
plugin
plugin
function Gst.Plugin.prototype.get_description(): {
    // javascript wrapper for 'gst_plugin_get_description'
}
plugin
def Gst.Plugin.get_description (self):
    #python wrapper for 'gst_plugin_get_description'
plugin
plugin
function Gst.Plugin.prototype.get_filename(): {
    // javascript wrapper for 'gst_plugin_get_filename'
}
plugin
def Gst.Plugin.get_filename (self):
    #python wrapper for 'gst_plugin_get_filename'
plugin
plugin
function Gst.Plugin.prototype.get_license(): {
    // javascript wrapper for 'gst_plugin_get_license'
}
plugin
def Gst.Plugin.get_license (self):
    #python wrapper for 'gst_plugin_get_license'
plugin
plugin
function Gst.Plugin.prototype.get_name(): {
    // javascript wrapper for 'gst_plugin_get_name'
}
plugin
def Gst.Plugin.get_name (self):
    #python wrapper for 'gst_plugin_get_name'
plugin
plugin
function Gst.Plugin.prototype.get_origin(): {
    // javascript wrapper for 'gst_plugin_get_origin'
}
plugin
def Gst.Plugin.get_origin (self):
    #python wrapper for 'gst_plugin_get_origin'
plugin
plugin
function Gst.Plugin.prototype.get_package(): {
    // javascript wrapper for 'gst_plugin_get_package'
}
plugin
def Gst.Plugin.get_package (self):
    #python wrapper for 'gst_plugin_get_package'
plugin
plugin
function Gst.Plugin.prototype.get_release_date_string(): {
    // javascript wrapper for 'gst_plugin_get_release_date_string'
}
plugin
def Gst.Plugin.get_release_date_string (self):
    #python wrapper for 'gst_plugin_get_release_date_string'
plugin
plugin
function Gst.Plugin.prototype.get_source(): {
    // javascript wrapper for 'gst_plugin_get_source'
}
plugin
def Gst.Plugin.get_source (self):
    #python wrapper for 'gst_plugin_get_source'
plugin
plugin
function Gst.Plugin.prototype.get_status_errors(): {
    // javascript wrapper for 'gst_plugin_get_status_errors'
}
plugin
def Gst.Plugin.get_status_errors (self):
    #python wrapper for 'gst_plugin_get_status_errors'
plugin
plugin
function Gst.Plugin.prototype.get_status_infos(): {
    // javascript wrapper for 'gst_plugin_get_status_infos'
}
plugin
def Gst.Plugin.get_status_infos (self):
    #python wrapper for 'gst_plugin_get_status_infos'
plugin
plugin
function Gst.Plugin.prototype.get_status_warnings(): {
    // javascript wrapper for 'gst_plugin_get_status_warnings'
}
plugin
def Gst.Plugin.get_status_warnings (self):
    #python wrapper for 'gst_plugin_get_status_warnings'
plugin
plugin
function Gst.Plugin.prototype.get_version(): {
    // javascript wrapper for 'gst_plugin_get_version'
}
plugin
def Gst.Plugin.get_version (self):
    #python wrapper for 'gst_plugin_get_version'
plugin
plugin
function Gst.Plugin.prototype.is_loaded(): {
    // javascript wrapper for 'gst_plugin_is_loaded'
}
plugin
def Gst.Plugin.is_loaded (self):
    #python wrapper for 'gst_plugin_is_loaded'
plugin
 GstPlugin *loaded_plugin;
 loaded_plugin = gst_plugin_load (plugin);
 // presumably, we're no longer interested in the potentially-unloaded plugin
 gst_object_unref (plugin);
 plugin = loaded_plugin;

plugin
function Gst.Plugin.prototype.load(): {
    // javascript wrapper for 'gst_plugin_load'
}
 GstPlugin *loaded_plugin;
 loaded_plugin = gst_plugin_load (plugin);
 // presumably, we're no longer interested in the potentially-unloaded plugin
 gst_object_unref (plugin);
 plugin = loaded_plugin;

plugin
def Gst.Plugin.load (self):
    #python wrapper for 'gst_plugin_load'
 GstPlugin *loaded_plugin;
 loaded_plugin = gst_plugin_load (plugin);
 // presumably, we're no longer interested in the potentially-unloaded plugin
 gst_object_unref (plugin);
 plugin = loaded_plugin;

plugin
plugin
cache_data
function Gst.Plugin.prototype.set_cache_data(cache_data: <a href=""gstreamer/gststructure.html#GstStructure"" title=""Gst.Structure"">Gst.Structure</a>): {
    // javascript wrapper for 'gst_plugin_set_cache_data'
}
plugin
cache_data
def Gst.Plugin.set_cache_data (self, cache_data):
    #python wrapper for 'gst_plugin_set_cache_data'
plugin
cache_data
list
function Gst.Plugin.prototype.list_free(list: [ <a title=""Gst.Plugin"" href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a> ]): {
    // javascript wrapper for 'gst_plugin_list_free'
}
list
def Gst.Plugin.list_free (list):
    #python wrapper for 'gst_plugin_list_free'
list
name
function Gst.Plugin.prototype.load_by_name(name: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>): {
    // javascript wrapper for 'gst_plugin_load_by_name'
}
name
def Gst.Plugin.load_by_name (name):
    #python wrapper for 'gst_plugin_load_by_name'
name
filename
error
function Gst.Plugin.prototype.load_file(filename: filename): {
    // javascript wrapper for 'gst_plugin_load_file'
}
filename
@raises(<a href=""https://developer.gnome.org/glib/stable/glib-Error-Reporting.html"">GLib.GError</a>)
def Gst.Plugin.load_file (filename):
    #python wrapper for 'gst_plugin_load_file'
filename
major_version
minor_version
name
description
init_func
version
license
source
package
origin
function Gst.Plugin.prototype.register_static(major_version: <a title=""Number"" href=""https://developer.mozilla.org/en-US/docs/Glossary/Number"">Number</a>, minor_version: <a href=""https://developer.mozilla.org/en-US/docs/Glossary/Number"" title=""Number"">Number</a>, name: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, description: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>, init_func: <a href=""gstreamer/gstplugin.html#GstPluginInitFunc"" title=""Gst.PluginInitFunc"">Gst.PluginInitFunc</a>, version: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, license: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, source: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, package: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>, origin: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>): {
    // javascript wrapper for 'gst_plugin_register_static'
}
major_version
minor_version
name
description
init_func
version
license
source
package
origin
def Gst.Plugin.register_static (major_version, minor_version, name, description, init_func, version, license, source, package, origin):
    #python wrapper for 'gst_plugin_register_static'
major_version
minor_version
name
description
init_func
version
license
source
package
origin
major_version
minor_version
name
description
init_full_func
version
license
source
package
origin
user_data
function Gst.Plugin.prototype.register_static_full(major_version: <a title=""Number"" href=""https://developer.mozilla.org/en-US/docs/Glossary/Number"">Number</a>, minor_version: <a title=""Number"" href=""https://developer.mozilla.org/en-US/docs/Glossary/Number"">Number</a>, name: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, description: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>, init_full_func: <a href=""gstreamer/gstplugin.html#GstPluginInitFullFunc"" title=""Gst.PluginInitFullFunc"">Gst.PluginInitFullFunc</a>, version: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>, license: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, source: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, package: <a title=""String"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"">String</a>, origin: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"" title=""String"">String</a>, user_data: <a title=""Object"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"">Object</a>): {
    // javascript wrapper for 'gst_plugin_register_static_full'
}
major_version
minor_version
name
description
init_full_func
version
license
source
package
origin
user_data
def Gst.Plugin.register_static_full (major_version, minor_version, name, description, init_full_func, version, license, source, package, origin, *user_data):
    #python wrapper for 'gst_plugin_register_static_full'
major_version
minor_version
name
description
init_full_func
version
license
source
package
origin
user_data
major_version
minor_version
name
description
plugin_init
version
license
source
package
origin
release_datetime
major_version
minor_version
name
description
plugin_init
version
license
source
package
origin
release_datetime
major_version
minor_version
name
description
plugin_init
version
license
source
package
origin
release_datetime
function Gst.prototype.plugin_error_quark(): {
    // javascript wrapper for 'gst_plugin_error_quark'
}
def Gst.plugin_error_quark ():
    #python wrapper for 'gst_plugin_error_quark'
major
minor
name
description
init
static gboolean plugin_init (GstPlugin * plugin)
version
license
package
origin
name
name
GST_PLUGIN_DEPENDENCY_FLAG_NONE
GST_PLUGIN_DEPENDENCY_FLAG_RECURSE
GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_DEFAULT_ONLY
GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_SUFFIX
GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_PREFIX
GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_RELATIVE_TO_EXE
Gst.PluginDependencyFlags.NONE
Gst.PluginDependencyFlags.RECURSE
Gst.PluginDependencyFlags.PATHS_ARE_DEFAULT_ONLY
Gst.PluginDependencyFlags.FILE_NAME_IS_SUFFIX
Gst.PluginDependencyFlags.FILE_NAME_IS_PREFIX
Gst.PluginDependencyFlags.PATHS_ARE_RELATIVE_TO_EXE
Gst.PluginDependencyFlags.NONE
Gst.PluginDependencyFlags.RECURSE
Gst.PluginDependencyFlags.PATHS_ARE_DEFAULT_ONLY
Gst.PluginDependencyFlags.FILE_NAME_IS_SUFFIX
Gst.PluginDependencyFlags.FILE_NAME_IS_PREFIX
Gst.PluginDependencyFlags.PATHS_ARE_RELATIVE_TO_EXE
GST_PLUGIN_ERROR_MODULE
GST_PLUGIN_ERROR_DEPENDENCIES
GST_PLUGIN_ERROR_NAME_MISMATCH
Gst.PluginError.MODULE
Gst.PluginError.DEPENDENCIES
Gst.PluginError.NAME_MISMATCH
Gst.PluginError.MODULE
Gst.PluginError.DEPENDENCIES
Gst.PluginError.NAME_MISMATCH
GST_PLUGIN_FLAG_CACHED
GST_PLUGIN_FLAG_BLACKLISTED
Gst.PluginFlags.CACHED
Gst.PluginFlags.BLACKLISTED
Gst.PluginFlags.CACHED
Gst.PluginFlags.BLACKLISTED
plugin
user_data
function Gst.PluginFilter(plugin: <a title=""Gst.Plugin"" href=""gstreamer/gstplugin.html#GstPlugin"">Gst.Plugin</a>, user_data: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"" title=""Object"">Object</a>): {
    // javascript wrapper for 'GstPluginFilter'
}
plugin
user_data
def Gst.PluginFilter (plugin, *user_data):
    #python wrapper for 'GstPluginFilter'
plugin
user_data
plugin
user_data
function Gst.PluginInitFullFunc(plugin: <a href=""gstreamer/gstplugin.html#GstPlugin"" title=""Gst.Plugin"">Gst.Plugin</a>, user_data: <a title=""Object"" href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"">Object</a>): {
    // javascript wrapper for 'GstPluginInitFullFunc'
}
plugin
user_data
def Gst.PluginInitFullFunc (plugin, *user_data):
    #python wrapper for 'GstPluginInitFullFunc'
plugin
user_data
plugin
function Gst.PluginInitFunc(plugin: <a href=""gstreamer/gstplugin.html#GstPlugin"" title=""Gst.Plugin"">Gst.Plugin</a>): {
    // javascript wrapper for 'GstPluginInitFunc'
}
plugin
def Gst.PluginInitFunc (plugin):
    #python wrapper for 'GstPluginInitFunc'
plugin

    <a role=""button"" data-toggle=""dropdown"" aria-haspopup=""true"" class=""dropdown-toggle"" aria-expanded=""false"">
        API References<span class=""caret""></span>
    </a>
	<ul id=""modules-menu"" class=""dropdown-menu"">
					<li>
				<a href=""gstreamer/gi-index.html"">GStreamer core</a>
			</li>
					<li>
				<a href=""libs.html"">GStreamer Libraries</a>
			</li>
					<li>
				<a href=""plugins_doc.html"">GStreamer Plugins</a>
			</li>
		</ul>


				<a href=""gstreamer/gi-index.html"">GStreamer core</a>
			

				<a href=""libs.html"">GStreamer Libraries</a>
			

				<a href=""plugins_doc.html"">GStreamer Plugins</a>
			

    <a href=""application-development/index.html"">Application manual</a>


    <a href=""tutorials/index.html"">Tutorials</a>

"
https://gstreamer.freedesktop.org/documentation/gstreamer/gi-index.html?gi-language=c,Core Library,"libgstreamer-1.0
.so provides all the core GStreamer
services, including initialization, plugin management and types, as well
as the object hierarchy that defines elements and bins, along with some
more specialized elements.
<b>Subpages:</b>

			<a href=""gstreamer/running.html"">Running GStreamer Applications</a>
							– How to run and debug your GStreamer application
						

			<a href=""gstreamer/gst.html"">GStreamer</a>
							– Media library supporting arbitrary formats and filter
                     graphs.
						

			<a href=""gstreamer/debugutils.html"">Debugging utilities</a>
							– A set of utilities for debugging and development
						

			<a href=""gstreamer/gstallocator.html"">GstAllocator</a>
							– allocate memory blocks
						

			<a href=""gstreamer/gstatomicqueue.html"">GstAtomicQueue</a>
							– An atomic queue implementation
						

			<a href=""gstreamer/gstbin.html"">GstBin</a>
							– Base class and element that can contain other elements
						

			<a href=""gstreamer/gstbuffer.html"">GstBuffer</a>
							– Data-passing buffer type
						

			<a href=""gstreamer/gstbufferlist.html"">GstBufferList</a>
							– Lists of buffers for data-passing
						

			<a href=""gstreamer/gstbufferpool.html"">GstBufferPool</a>
							– Pool for buffers
						

			<a href=""gstreamer/gstbus.html"">GstBus</a>
							– Asynchronous message bus subsystem
						

			<a href=""gstreamer/gstbytearrayinterface.html"">gstbytearrayinterface</a>
						

			<a href=""gstreamer/gstcaps.html"">GstCaps</a>
							– Structure describing sets of media formats
						

			<a href=""gstreamer/gstcapsfeatures.html"">GstCapsFeatures</a>
							– A set of features in caps
						

			<a href=""gstreamer/gstchildproxy.html"">GstChildProxy</a>
							– Interface for multi child elements.
						

			<a href=""gstreamer/gstclock.html"">GstClock</a>
							– Abstract class for global clocks
						

			<a href=""gstreamer/gstcompat.html"">GstCompat</a>
							– Deprecated API entries
						

			<a href=""gstreamer/gstcontext.html"">GstContext</a>
							– Lightweight objects to represent element contexts
						

			<a href=""gstreamer/gstcontrolbinding.html"">GstControlBinding</a>
							– attachment for control source sources
						

			<a href=""gstreamer/gstcontrolsource.html"">GstControlSource</a>
							– base class for control source sources
						

			<a href=""gstreamer/gstdatetime.html"">GstDateTime</a>
							– A date, time and timezone structure
						

			<a href=""gstreamer/gstdevice.html"">GstDevice</a>
							– Object representing a device
						

			<a href=""gstreamer/gstdevicemonitor.html"">GstDeviceMonitor</a>
							– A device monitor and prober
						

			<a href=""gstreamer/gstdeviceprovider.html"">GstDeviceProvider</a>
							– A device provider
						

			<a href=""gstreamer/gstdeviceproviderfactory.html"">GstDeviceProviderFactory</a>
							– Create GstDeviceProviders from a factory
						

			<a href=""gstreamer/gstdynamictypefactory.html"">GstDynamicTypeFactory</a>
							– Represents a registered dynamically loadable GType
						

			<a href=""gstreamer/gstelement.html"">GstElement</a>
							– Abstract base class for all pipeline elements
						

			<a href=""gstreamer/gstelementfactory.html"">GstElementFactory</a>
							– Create GstElements from a factory
						

			<a href=""gstreamer/gstevent.html"">GstEvent</a>
							– Structure describing events that are passed up and down
                     a pipeline
						

			<a href=""gstreamer/gstformat.html"">GstFormat</a>
							– Dynamically register new data formats
						

			<a href=""gstreamer/gsterror.html"">GstGError</a>
							– Categorized error messages
						

			<a href=""gstreamer/gstghostpad.html"">GstGhostPad</a>
							– Pseudo link pads
						

			<a href=""gstreamer/gstinfo.html"">GstInfo</a>
							– Debugging and logging facilities
						

			<a href=""gstreamer/gstiterator.html"">GstIterator</a>
							– Object to retrieve multiple elements in a threadsafe
 way.
						

			<a href=""gstreamer/gstmemory.html"">GstMemory</a>
							– refcounted wrapper for memory blocks
						

			<a href=""gstreamer/gstmessage.html"">GstMessage</a>
							– Lightweight objects to signal the application of
                     pipeline events
						

			<a href=""gstreamer/gstmeta.html"">GstMeta</a>
							– Buffer metadata
						

			<a href=""gstreamer/gstminiobject.html"">GstMiniObject</a>
							– Lightweight base class for the GStreamer object hierarchy
						

			<a href=""gstreamer/gstobject.html"">GstObject</a>
							– Base class for the GStreamer object hierarchy
						

			<a href=""gstreamer/gstpad.html"">GstPad</a>
							– Object contained by elements that allows links to
                     other elements
						

			<a href=""gstreamer/gstpadtemplate.html"">GstPadTemplate</a>
							– Describe the media type of a pad.
						

			<a href=""gstreamer/gstparamspec.html"">GstParamSpec</a>
							– GParamSpec implementations specific
 to GStreamer
						

			<a href=""gstreamer/gstparse.html"">GstParse</a>
							– Get a pipeline from a text pipeline description
						

			<a href=""gstreamer/gstpipeline.html"">GstPipeline</a>
							– Top-level bin with clocking and bus management
                       functionality.
						

			<a href=""gstreamer/gstplugin.html"">GstPlugin</a>
							– Container for features loaded from a shared object module
						

			<a href=""gstreamer/gstpluginfeature.html"">GstPluginfeature</a>
							– Base class for contents of a GstPlugin
						

			<a href=""gstreamer/gstpoll.html"">GstPoll</a>
							– Keep track of file descriptors and make it possible
                     to wait on them in a cancellable way
						

			<a href=""gstreamer/gstpreset.html"">GstPreset</a>
							– helper interface for element presets
						

			<a href=""gstreamer/gstpromise.html"">GstPromise</a>
							– a miniobject for future/promise-like functionality
						

			<a href=""gstreamer/gstprotection.html"">GstProtection</a>
							– Functions and classes to support encrypted streams.
						

			<a href=""gstreamer/gstquark.html"">gstquark</a>
						

			<a href=""gstreamer/gstquery.html"">GstQuery</a>
							– Provide functions to create queries, and to set and parse
                     values in them.
						

			<a href=""gstreamer/gstregistry.html"">GstRegistry</a>
							– Abstract base class for management of #GstPlugin objects
						

			<a href=""gstreamer/gstsample.html"">GstSample</a>
							– A media sample
						

			<a href=""gstreamer/gstsegment.html"">GstSegment</a>
							– Structure describing the configured region of interest
                     in a media file.
						

			<a href=""gstreamer/gststreamcollection.html"">GstStreamCollection</a>
							– Base class for collection of streams
						

			<a href=""gstreamer/gststreams.html"">GstStreams</a>
							– Base class for stream objects
						

			<a href=""gstreamer/gststructure.html"">GstStructure</a>
							– Generic structure containing fields of names and values
						

			<a href=""gstreamer/gstsystemclock.html"">GstSystemClock</a>
							– Default clock that uses the current system time
						

			<a href=""gstreamer/gsttaglist.html"">GstTagList</a>
							– List of tags and values used to describe media metadata
						

			<a href=""gstreamer/gsttagsetter.html"">GstTagsetter</a>
							– Element interface that allows setting and retrieval
                     of media metadata
						

			<a href=""gstreamer/gsttask.html"">GstTask</a>
							– Abstraction of GStreamer streaming threads.
						

			<a href=""gstreamer/gsttaskpool.html"">GstTaskPool</a>
							– Pool of GStreamer streaming threads
						

			<a href=""gstreamer/gsttoc.html"">GstToc</a>
							– Generic table of contents support
						

			<a href=""gstreamer/gsttocsetter.html"">GstTocSetter</a>
							– Element interface that allows setting and retrieval
                     of the TOC
						

			<a href=""gstreamer/gsttracer.html"">GstTracer</a>
							– Tracing base class
						

			<a href=""gstreamer/gsttracerfactory.html"">GstTracerFactory</a>
							– Information about registered tracer functions
						

			<a href=""gstreamer/gsttracerrecord.html"">GstTracerRecord</a>
							– Trace log entry class
						

			<a href=""gstreamer/gsttracerutils.html"">gsttracerutils</a>
						

			<a href=""gstreamer/gsttypefind.html"">GstTypefind</a>
							– Stream type detection
						

			<a href=""gstreamer/gsttypefindfactory.html"">GstTypeFindFactory</a>
							– Information about registered typefind functions
						

			<a href=""gstreamer/gsturi.html"">GstUri</a>
							– URI parsing and manipulation.
						

			<a href=""gstreamer/gsturihandler.html"">GstUriHandler</a>
							– Interface to ease URI handling in plugins.
						

			<a href=""gstreamer/gstutils.html"">GstUtils</a>
							– Various utility functions
						

			<a href=""gstreamer/gstvalue.html"">GstValue</a>
							– GValue implementations specific
 to GStreamer
						

			<a href=""gstreamer/gstvecdeque.html"">GstVecDeque</a>
							– Array based double-ended queue object
						
The results of the search are

    <a aria-expanded=""false"" data-toggle=""dropdown"" role=""button"" aria-haspopup=""true"" class=""dropdown-toggle"">
        API References<span class=""caret""></span>
    </a>
	<ul id=""modules-menu"" class=""dropdown-menu"">
					<li>
				<a href=""gstreamer/gi-index.html"">GStreamer core</a>
			</li>
					<li>
				<a href=""libs.html"">GStreamer Libraries</a>
			</li>
					<li>
				<a href=""plugins_doc.html"">GStreamer Plugins</a>
			</li>
		</ul>


				<a href=""gstreamer/gi-index.html"">GStreamer core</a>
			

				<a href=""libs.html"">GStreamer Libraries</a>
			

				<a href=""plugins_doc.html"">GStreamer Plugins</a>
			

    <a href=""application-development/index.html"">Application manual</a>


    <a href=""tutorials/index.html"">Tutorials</a>

"
